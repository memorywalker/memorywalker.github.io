<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Steam ASF</title>
    <url>/2021/01/05/ASF/</url>
    <content><![CDATA[<h2 id="ASF"><a href="#ASF" class="headerlink" title="ASF"></a>ASF</h2><p>ArchiSteamFarm </p>
<p>这是一个服务器端的程序，当然也可以在本地的PC上运行</p>
<ol>
<li>可以用来挂卡</li>
<li>和小号聊天，让机器人执行命令，批量激活游戏 </li>
</ol>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><h4 id="Install-NET-Core-prerequisites"><a href="#Install-NET-Core-prerequisites" class="headerlink" title="Install .NET Core prerequisites"></a>Install .NET Core prerequisites</h4><ul>
<li>Microsoft Visual C++ 2015 Redistributable Update 3 RC</li>
<li>KB2533623 and KB2999226</li>
</ul>
<p>For Linux:</p>
<ul>
<li>libcurl3 (libcurl)</li>
<li>libicu60 (libicu, latest version for your distribution, for example libicu57 for Debian 9)</li>
<li>libkrb5-3 (krb5-libs)</li>
<li>liblttng-ust0 (lttng-ust)</li>
<li>libssl1.0.2 (libssl, openssl-libs, latest 1.0.X version for your distribution)</li>
<li>zlib1g (zlib)</li>
</ul>
<h4 id="Download-latest-ASF-release"><a href="#Download-latest-ASF-release" class="headerlink" title="Download latest ASF release"></a>Download latest ASF release</h4><p>From <a href="https://github.com/JustArchi/ArchiSteamFarm/releases/latest" target="_blank" rel="noopener">here</a></p>
<p>windows 64位 下载这个<strong>ASF-win-x64</strong></p>
<p>recommend file structrue</p>
<pre><code>C:\ASF (where you put your own things)
    ├── ASF shortcut.lnk (optional)
    ├── Config shortcut.lnk (optional)
    ├── Commands.txt (optional)
    ├── MyExtraScript.bat (optional)
    ├── ... (any other files of your choice, optional)
    └── Core (dedicated to ASF only, where you extract the archive)
         ├── ArchiSteamFarm.dll
         ├── config
         └── (...)</code></pre><h4 id="Configure-ASF"><a href="#Configure-ASF" class="headerlink" title="Configure ASF"></a>Configure ASF</h4><h5 id="Web-配置"><a href="#Web-配置" class="headerlink" title="Web 配置"></a>Web 配置</h5><ul>
<li>可以直接到官方提供的网站配置，这个网页只是客户端执行，因此不要担心帐号被盗<a href="https://justarchi.github.io/ArchiSteamFarm/#/" target="_blank" rel="noopener">here</a></li>
<li>也可以把那个网页下载下来，在本地浏览器打开，这个工具只是js写的，不需要服务器环境</li>
<li>直接拷贝模板配置，修改配置文件</li>
</ul>
<p>切换到Bot选项：</p>
<ol>
<li>输入一个Bot的名字，不能是<code>ASF</code>，<code>example</code>以及<code>minimal</code>，因为默认配置目录已经有了这3个文件</li>
<li>steam的用户名和密码这里如果不填，每次启动asf时，需要与程序交互输入密码，如果是本地使用建议填上密码，也可以生成配置文件后手动增加的配置文件中</li>
<li>勾选Enabled</li>
<li>点击下载json格式的配置文件，并把这个文件放入config目录</li>
</ol>
<h4 id="Launch-ASF"><a href="#Launch-ASF" class="headerlink" title="Launch ASF"></a>Launch ASF</h4><p>点击ArchiSteamFarm.exe启动asf，第一次登录过程中，需要输入steam guard</p>
<p>如果steam的帐号解锁了5美元限制，系统会自动挂卡，并显示每个游戏还有多少个卡</p>
<p><img src="/uploads/steam/asf_account_limited.png" alt="limited"></p>
<h4 id="Extended-configuration"><a href="#Extended-configuration" class="headerlink" title="Extended configuration"></a>Extended configuration</h4><ul>
<li><p>ASF支持同时挂多个帐号，只需要将帐号的配置文件放到config目录即可，一个帐号配置如<code>tip_bot.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"SteamLogin"</span>: <span class="string">"loginname"</span>,</span><br><span class="line">  <span class="attr">"SteamPassword"</span>: <span class="string">"password"</span>,</span><br><span class="line">  <span class="attr">"Enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"AutoSteamSaleEvent"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"SteamUserPermissions"</span>: &#123;</span><br><span class="line">    <span class="attr">"76561199116482158"</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>可以自定义设置挂卡时显示的游戏信息，在配置页面的高级选项中，编辑<code>CustomGamePlayedWhileFarming</code>为你想显示的文字，这样看不到当前正在挂哪个游戏。</p>
</li>
<li><p>配置页面的ASF选项页是针对ASF的全局配置，编辑后使用生成的<code>ASF.json</code>替换原来的文件即可</p>
</li>
</ul>
<h4 id="Using-IPC-GUI"><a href="#Using-IPC-GUI" class="headerlink" title="Using IPC GUI"></a>Using IPC GUI</h4><p>ASF提供了一个IPC的GUI访问方式，默认这个功能是开启的，但是常用的功能都是支持的。</p>
<p>使用这个功能需要知道自己的<code>SteamOwnerID</code>，这个id可在<a href="https://steamrep.com/" target="_blank" rel="noopener">steamrep</a>网站查询，是一个7656开始的数字</p>
<p>也可以直接看自己的个人资料页面 <code>https://steamcommunity.com/profiles/</code>后面的数字就是</p>
<p>配置页面切换到ASF配置，配置全局配置文件<code>ASF.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"SteamOwnerID"</span>: <span class="string">"76561198099917059"</span>, </span><br><span class="line">  <span class="attr">"UpdatePeriod"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>填入自己的<code>SteamOwnerID</code></li>
<li>在Remote Access中勾选IPC选项即可</li>
<li>用新生成的<code>ASF.json</code>替换config目录的原始文件</li>
<li>运行asf时，注意ipc服务是否有运行起来<br><img src="/uploads/steam/asf_ipc_server.png" alt="asf_ipc_run"></li>
<li>浏览器打开<code>http://127.0.0.1:1242/</code>就可以访问到asf的ipc界面</li>
</ol>
<h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><h5 id="使用IPC执行命令"><a href="#使用IPC执行命令" class="headerlink" title="使用IPC执行命令"></a>使用IPC执行命令</h5><p>点击左侧的<code>Commands</code>, 在命令窗口输入命令，例如让所有的bot都添加游戏 输入</p>
<p><code>!addlicense ASF 533150,533382,533349</code></p>
<p>如果让指定的bot执行一个命令，需要在命令后指定bot的名称，</p>
<p> <code>!addlicense  bottle_bot 884660</code></p>
<ul>
<li>addlicensem命令后的id默认为subid，可以在steamdb上查到，如果要用app id，命令格式为</li>
</ul>
<p><code>addlicense ASF app/292030,sub/47807</code></p>
<p><img src="/uploads/steam/asf_bot_command.png" alt="asf_bot_command"></p>
<h5 id="使用与小号聊天执行命令"><a href="#使用与小号聊天执行命令" class="headerlink" title="使用与小号聊天执行命令"></a>使用与小号聊天执行命令</h5><ul>
<li>在生成bot的配置文件时，Access里面的SteamUserPermissions可以控制权限，权限有4种，默认为None。一般需要将自己帐号设置为Master最大权限。</li>
<li>每个命令有自己的权限要求，例如添加免费游戏的命令只需要operator权限</li>
</ul>
<p>SteamUserPermissions是Key-Value格式的配置，key为用户的64位id，value为具体的权限数值，生成的配置文件部分如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;SteamUserPermissions&quot;: &#123;</span><br><span class="line">  &quot;76561198833106606&quot;: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：<br>假设有大号Android和小号Apple，ASF中运行了一个大号Android的机器人bottle_bot。<br>在Steam网页上，大号Android发起与Apple的聊天，发起消息!addlicense bottle_bot 32287，则自动会把这个游戏加入到大号的库中。如果小号发送这个消息则没有任何反映，因为小号没有任何权限。这里小号的作用只是让大号可以把消息发给机器人而建立的聊天入口。因为大号无法自己给你聊天，除非通过群组聊天。</p>
<p>如果小号Apple也启动了一个<code>apple_bot</code>，则需要把Apple的64位id设置到<code>apple_bot</code>的用户权限中。在聊天窗口中执行<code>!addlicense 32287</code>，则所有的bot都会执行这个命令，根据发命令的用户的权限来判断是否执行这个命令。</p>
<p>在ASF全局配置中的设置的<code>SteamOwnerID</code>的帐号的权限为Owner拥有对于ASF中所有bot的最高权限，因此这个帐号可以让所有的bot执行所有的命令。一般这个id是大号的id，因此大号在聊天窗口中可以给所有的bot添加游戏执行命令。如果需要给指定bot发命令，则需要指明bot的名字。例如<code>!cmd bot_name param</code></p>
<h4 id="Privacy-Policy"><a href="#Privacy-Policy" class="headerlink" title="Privacy Policy"></a>Privacy Policy</h4><p>默认系统会使用你的帐号加入ASF群组</p>
<h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><h5 id="ASFEnhance"><a href="#ASFEnhance" class="headerlink" title="ASFEnhance"></a>ASFEnhance</h5><p><a href="https://github.com/chr233/ASFEnhance" target="_blank" rel="noopener">GitHub - chr233/ASFEnhance: ASF增强插件 / Add useful features for ASF</a></p>
<p>将<code>ASFEnhance.dll</code> 丢进 ASF 目录下的 <code>plugins</code> 文件夹即可安装</p>
<p>2022 夏促，在网页的命令中输入</p>
<p><code>EVENT ASF</code>,获取特卖徽章</p>
<p><code>EVENTTHEME ASF</code>获取特卖主题</p>
<p><code>EXPLORER ASF</code>5 秒后触发 ASF 探索队列任务</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>steam</tag>
        <tag>asf</tag>
      </tags>
  </entry>
  <entry>
    <title>Git study</title>
    <url>/2020/02/05/Git/</url>
    <content><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>/git/ </p>
<p><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">BOOK</a></p>
<h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><p>/tɜːrmɪˈnɑːlədʒi /  (某学科的) 术语; 有特别含义的用语; 专门用语 </p>
<p> <strong>version control system</strong> (abbreviated as <strong>VCS</strong>) </p>
<p> <strong>source code manager</strong> (abbreviated as <strong>SCM</strong>) </p>
<p> <strong>commit</strong>  保存一份当前项目的state到git中，可以看做游戏保存当前进度</p>
<p> <strong>Repository / repo</strong> 一个仓库中包含了项目的所有文件，由commit组成</p>
<p> <strong>Working Directory</strong> 本地的工作目录</p>
<p> <strong>checkout</strong> 把repo中的所有文件拷贝一份到本地目录</p>
<p> <strong>staging area</strong> as a prep table where Git will take the next commit. Files on the <strong>Staging Index</strong> are poised to be added to the repository </p>
<p> <strong>branch</strong> 分支 游戏中保存一个新的存档，然后就可以选择不同的结局，在Half Life结尾G Man给你选择前可以新建一个存档位置，可以选择不为他打工</p>
<p><strong>Working Directory</strong>  -(add)-&gt; <strong>staging area</strong> -(commit)-&gt; <strong>Repository</strong></p>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><ol>
<li><p>右键打开Git bash，直接输入<code>cd</code>，进入<strong>home</strong>目录</p>
</li>
<li><p><code>start .</code> 在资源管理器中打开目录</p>
</li>
<li><p>再打开的文件中，右键点收藏夹，将当前文件添加到收藏夹，方便以后打开这个目录</p>
</li>
<li><p>把下载的配置文件中的<code>bash_profile</code>和文件夹<code>udacity-terminal-config</code>拷贝到根目录</p>
</li>
<li><p>由于windows不支持修改文件名为.开始的名字，需要在命令提示符下使用<code>mv</code>命令实现</p>
<p><code>$ mv bash_profile .bash_profile</code></p>
<p><code>$ mv udacity-terminal-config .udacity-terminal-config</code></p>
</li>
<li><p>重新打开一个bash窗口，点击左上角，option，设置前景色为黑色，背景色为白色   </p>
</li>
<li><p>执行以下命令进行全局配置</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> sets up Git with your name</span><br><span class="line">git config --global user.name "&lt;Your-Full-Name&gt;"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> sets up Git with your email</span><br><span class="line">git config --global user.email "&lt;your-email-address&gt;"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> makes sure that Git output is colored</span><br><span class="line">git config --global color.ui auto</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> displays the original state in a conflict</span><br><span class="line">git config --global merge.conflictstyle diff3</span><br><span class="line"></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> git work with sublime editor</span><br><span class="line">git config --global core.editor "'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> git work with VS Code</span><br><span class="line">git config --global core.editor "code --wait"</span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="init一个Repo"><a href="#init一个Repo" class="headerlink" title="init一个Repo"></a>init一个Repo</h4><ol>
<li>新建一个目录并进入到新建目录中<code>mkdir -p udacity-git-course/new-git-project &amp;&amp; cd $_</code></li>
<li>执行<code>git init</code>，会在当前目录下创建一个repo，<code>.git</code>中就是这个repo的目录</li>
</ol>
<p>Repo中的内容</p>
<ul>
<li><strong>config file</strong> - where all <em>project specific</em> configuration settings are stored. </li>
<li><strong>description file</strong> - this file is only used by the GitWeb program </li>
<li><strong>hooks directory</strong> - this is where we could place client-side or server-side scripts that we can use to hook into Git’s different lifecycle events </li>
<li><strong>info directory</strong> - contains the global excludes file </li>
<li><strong>objects directory</strong> - this directory will store all of the commits we make </li>
<li><strong>refs directory</strong> - this directory holds pointers to commits (basically the “branches” and “tags”) </li>
</ul>
<h4 id="clone一个Repo"><a href="#clone一个Repo" class="headerlink" title="clone一个Repo"></a>clone一个Repo</h4><p>clone可以创建一个现有项目的完全相同的复制</p>
<p>执行<code>git clone https://github.com/udacity/course-git-blog-project</code>会创建一个新的项目目录<code>course-git-blog-project</code>在当前目录中</p>
<p>执行<code>git clone http://xxx/project newName</code>可以在克隆时直接换一个本地的目录名称</p>
<h4 id="status"><a href="#status" class="headerlink" title="status"></a>status</h4><p><code>git status</code>查看当前repo的状态，应该在执行每一个git的命令后都查看一下status</p>
<h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p><code>git log</code>查看所有commit历史记录</p>
<p>输出的内容在<strong>Less</strong>中相同</p>
<ul>
<li>下翻<ul>
<li><code>j</code> or <code>↓</code> 下翻一行</li>
<li><code>d</code> 下翻半屏</li>
<li><code>f</code> 下翻一屏</li>
</ul>
</li>
<li>上翻<ul>
<li><code>k</code> or <code>↑</code> 上翻一行</li>
<li><code>u</code> 上翻半屏</li>
<li><code>b</code> 上翻一屏</li>
</ul>
</li>
<li>退出 press <code>q</code> to <strong>quit</strong> </li>
</ul>
<p><code>git log --oneline</code> 简化显示log信息</p>
<p><code>git log --stat</code>显示每一个commit的汇总信息，stat是 statistics 的缩写</p>
<p><code>git log -p</code> p是patch的缩写，显示每个文件具体改了哪些内容</p>
<p><code>git log -p --stat -w</code>可以组合使用标记，<code>-w</code>不显示空白行的更改</p>
<p>git以行为单位对文件的更改进行追踪</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">diff --git a/index.html b/index.html  (正在显示的文件)</span><br><span class="line">index 0381211..43f5b28 100644 （更改前的前后的这个文件的hash）</span><br><span class="line"><span class="comment">--- a/index.html  （指明旧的文件）</span></span><br><span class="line"><span class="comment">+++ b/index.html  （指明新的文件）</span></span><br><span class="line">@@ -15,83 +15,85 @@ （-标识旧文件，从15行开始共83行，+标识新文件，15行开始，共85行）</span><br><span class="line">         &lt;h1&gt;Expedition&lt;/h1&gt;</span><br><span class="line">     &lt;/header&gt;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-    &lt;main&gt;   （旧文件删除的行）</span></span><br><span class="line"><span class="deletion">-        &lt;h2 class="visuallyhidden"&gt;Articles&lt;/h2&gt;</span></span><br><span class="line"><span class="addition">+    &lt;div class="container"&gt;  （新文件增加行）</span></span><br><span class="line"><span class="addition">+        &lt;main&gt;</span></span><br><span class="line"><span class="addition">+            &lt;h2 class="visuallyhidden"&gt;Articles&lt;/h2&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>git log -p fdf5493</code>显示fdf5493和这个commit之前的所有log</p>
</li>
<li><p><code>git show [SHA]</code>查看指定的一次提交的信息，默认附带了<code>-p</code>标记，如果要加<code>--stat</code>会把默认的<code>-p</code>标记去掉，要手动加上<code>-p</code>, <code>-w</code>不显示对空白行的更改 <code>git show --stat -p 8d3ea36</code></p>
</li>
</ul>
<h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>将文件从<strong>work directory</strong>加入<strong>staging index</strong></p>
<ul>
<li><code>git add index.html</code>增加一个文件到staging index，多个文件用空格分隔开</li>
<li><code>git rm --cached index.html</code> 删除一个staged的文件</li>
<li><code>git add .</code>把当前目录下的所有文件增加到staging index</li>
</ul>
<h4 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h4><p><code>git commit</code>会打开配置的默认编辑器，当保存文件，关闭编辑器后，数据才会提交</p>
<p><code>git commit -m &quot;Initial commit&quot;</code>提交信息使用<code>-m</code></p>
<p>每次提交应该只有一个重点，记录一个单位的更改，只是更改项目的一个方面</p>
<p>一次提交不能包含不相关的更改</p>
<h5 id="提交信息"><a href="#提交信息" class="headerlink" title="提交信息"></a>提交信息</h5><ul>
<li>信息简短，不超过60个英文单词</li>
<li>解释提交内容做了什么，而不是为什么或怎么做的</li>
<li>不要解释为什么做了这个更改</li>
<li>不要解释怎么做了更改</li>
<li>不要使用and，说明你提交了多个更改</li>
<li>写完简短的信息后，可以换行增加一个空行，再写详细的更改原因，方便<code>git log --oneline</code></li>
</ul>
<p>udacity的<a href="https://udacity.github.io/git-styleguide/" target="_blank" rel="noopener">commit style guide</a></p>
<h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><p>用来查看当前没有commit的更改</p>
<h4 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h4><p>在和<code>.git</code>目录同级的目录下使用<code>touch .gitignore</code>新建<code>.gitignore</code>文件用来屏蔽那些不需要版本管理的文件</p>
<h5 id="globbing规则"><a href="#globbing规则" class="headerlink" title="globbing规则"></a>globbing规则</h5><ul>
<li>空行用来分隔</li>
<li><code>#</code>标识注释</li>
<li><code>*</code>匹配0或多个字符</li>
<li><code>?</code>匹配1个字符</li>
<li><code>[abc]</code>匹配a, b, or c</li>
<li><code>**</code>匹配嵌入的目录 <code>a/**/z</code>匹配<code>a/z</code>,<code>a/b/z</code>, <code>a/b/c/z</code></li>
</ul>
<h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h4><p>tag用来标识一个特殊的版本，比如beta1.0，它和一个commit关联起来</p>
<p><code>git tag -a v1.0</code>会以当前的commit创建一个tag并打开编辑器等待输入tag的备注信息，<code>-a</code>指明创建一个annotated tag，建议始终带有a选项的tag，包含更多的信息，如果不带a，只是一个轻量级的tag，没有创建人和创建日期信息</p>
<p><code>git tag</code>列出当前repo的所有tag，使用<code>git log</code>可以看到当前的tag信息</p>
<p><code>git tag -d v1.0</code>删除tag v1.0</p>
<p><code>git tag -a v1.0 9a2e3bf</code>指定commit创建一个tag</p>
<h4 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h4><p>一个Tag永久性的指向一个commit，一个branch会移动到最后的一个commit</p>
<p>master是git给的默认branch，head指向当前活动的branch</p>
<p><code>git branch</code>列出当前的所有分支，星号标识的是当前分支</p>
<p><code>git branch feature</code>以当前的commit创建一个名为feature的分支</p>
<p><code>git branch feature SHA</code>以SHA对应的commit创建一个名为feature的分支</p>
<p><code>git checkout master</code>切换到master分支，checkout可以在多个branch之间切换，让head指向当前的分支。这个命令会：</p>
<ol>
<li>删除当前工作目录下的所有被git管理的文件（所有已经commit到repo中的文件），没有被add或commit的文件会保持不变</li>
<li>从repo中取出指定分支的文件到当前工作目录</li>
</ol>
<p><code>git branch -d feature</code>删除名为feature的分支，当前活动的分支不能被删除，如果一个分支上有commit是只有这个分支才有的，还没有合并到其他分支，也不能删除；如果要强制删除这个有自己的commit的分支，使用<code>git branch -D feature</code></p>
<p><code>git checkout -b footer master</code>基于master分支创建footer分支，并切换到footer分支</p>
<p><code>git log --graph --all --oneline</code> graph用来显示log最左侧的分支路径线all参数用来显示repo中的所有分支</p>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>把分支的更改进行合并，git可以自动合并不同分支的更改</p>
<ul>
<li>普通merge ： 如果两个分支有差异的内容，把另一个分支的内容合并到当前的分支，此时merge也是一次commit，需要提供message，而且git已经提供了默认的message</li>
<li>fast-forward merge 如果一个分支newfeature已经在master的前面（在master的基础上已经有了新的更改，但是master一直没有更改），此时要把它合入master分支，在合并的时候，只是把master指向newfeature的commit即可，并不需要一次新的commit</li>
</ul>
<p><code>git merge name-of-branch-to-merge-in</code>把另一个分支合入当前的分支，例如<code>git merge sidebar</code></p>
<h5 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h5><p>git以文件中的一行为单位作为文件改变的标识，当两个分支中对同一个文件的同一行都有修改，在自动merge的时候，就不能自动选择用哪一个分支的了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git merge head-update</span><br><span class="line">Auto-merging index.html</span><br><span class="line">CONFLICT (content): Merge conflict in index.html</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>

<p>此时执行<code>git status</code>会提示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run "git commit")</span><br><span class="line">  (use "git merge --abort" to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use "git add &lt;file&gt;..." to mark resolution)</span><br><span class="line">        both modified:   index.html</span><br></pre></td></tr></table></figure>

<p>此时文件已经被改动，并且有标记哪些部分是冲突的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  本地分支当前内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Future<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">||||||| b27a903 合并前的上一次的原始内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Expedition Future<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">======= 合并内容的结束行标记</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Past<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; head-update 合入的分支的结束标记</span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在编辑器中直接修改文本内容为最终需要的内容，保存后提交，可以在提交之前执行<code>git diff</code>查看更改的内容，避免把标记没有删除也提交上去</p>
<h4 id="amend"><a href="#amend" class="headerlink" title="amend"></a>amend</h4><p><code>git commit --amend</code>修改最近一次的commit，而不会产生新的commit。</p>
<p>如果当前已经没有需要commit的内容，则会弹出编辑commit message的编辑器，修改message的内容</p>
<p>如果有遗漏的文件忘记修改，可以修改文件后并执行add来stage文件，执行<code>git commit --amend</code>让上次的commit增加新的文件</p>
<h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h4><p>revert是对一次commit的恢复，因此也是一次新的commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git revert ee4190c</span><br><span class="line">[master 65d78c2] Revert "change title"</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">Moon (master) newrepo</span><br><span class="line"><span class="meta">$</span> git log --oneline</span><br><span class="line">65d78c2 (HEAD -&gt; master) Revert "change title" #新的一次提交</span><br><span class="line">ee4190c change title</span><br></pre></td></tr></table></figure>

<h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h4><p> reset从repo中删除一个commit，git会在删除数据前保存所有的信息30天，可以使用<code>git reflog</code></p>
<p>在执行reset之前可以对当前的commit创建一个backup的新分支用来备份commit的数据<code>git branch backup_somework</code>。需要恢复时，<code>git merge backup</code>即可</p>
<p><code>git reset &lt;reference-to-commit&gt;</code>把Head指向reference commit，删除中间的commit，把已经commit的数据放入staging index，把staged的数据变为unstaged</p>
<p><code>git reset --mixed HEAD^</code>默认的选项，把当前commit的内容回退到work directory，变为unstaged状态</p>
<p><code>git reset --soft HEAD^</code>把当前commit的内容回退到staging index</p>
<p><code>git reset --hard HEAD^</code>把当前commit的内容放入stash</p>
<p><code>git checkout -- &lt;filename&gt;</code>撤销当前工作目录中filename文件的所有更改</p>
<h5 id="Relative-Commit-References"><a href="#Relative-Commit-References" class="headerlink" title="Relative Commit References"></a>Relative Commit References</h5><p>相对commit引用, <code>HEAD</code>指向当前commit，<code>^</code>指向当前的父commit，<code>~</code>指向第一层父commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HEAD^ = HEAD~ = HEAD~1</span><br><span class="line">HEAD^^ = HEAD~2</span><br></pre></td></tr></table></figure>

<p>一个merge的commit有两个父commit，<code>^</code>指向执行<code>git merge</code>分支的父commit，<code>^2</code>指向合并过来的分支的父commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* 9ec05ca (HEAD -&gt; master) Revert "Set page heading to "Quests &amp; Crusades""</span><br><span class="line">* db7e87a Set page heading to "Quests &amp; Crusades"</span><br><span class="line">*   796ddb0 Merge branch 'heading-update'</span><br><span class="line">|\  </span><br><span class="line">| * 4c9749e (heading-update) Set page heading to "Crusade"</span><br><span class="line">* | 0c5975a Set page heading to "Quest"</span><br><span class="line">|/  </span><br><span class="line">*   1a56a81 Merge branch 'sidebar'</span><br></pre></td></tr></table></figure>

<p> <code>HEAD^^^</code> 指向 <code>0c5975a</code> ，只有当前分支路径上带<code>*</code>的commit都是这个分支的</p>
<p> <code>HEAD^^^2</code> 指向 <code>4c9749e</code> </p>
<h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><ul>
<li><p>sneak / sniːk /  偷偷地走; 溜; 偷偷地做; 偷带; 偷拿; 偷走(不重要的或小的东西);  突然的; 出其不意的 ; 打小报告的人，告状者(尤指儿童);</p>
<p>Wanna <em>have a sneak peak of</em> the next lesson (偷偷看一下)</p>
</li>
<li><p>intro  介绍; (尤指) 前奏，前言，导言 </p>
</li>
<li><p>outro  结尾部分 </p>
</li>
<li><p>globbing   通配符; 文件名扩展; 文件名代换; 展开 </p>
</li>
<li><p>annotated  给…作注解(或评注) </p>
</li>
<li><p>delve  /delv/  (在手提包、容器等中) 翻找;  delve into her mother’s past探究母亲的过去</p>
</li>
<li><p>nitty  尼堤; 多虱卵的; 很紧甚至有些紧弱; </p>
</li>
<li><p>gritty  含沙砾的; 沙砾般的; 有勇气的; 坚定的; 坚毅的; (对消极事物的描述) 逼真的，真实的，活生生的;  The sheets fell on the <em>gritty</em> floor  床单掉到满是沙砾的地板上 </p>
</li>
<li><p>nitty gritty  本质; 实质; 基本事实; The city’s newspapers still attempt to get down to the <em>nitty</em> <em>gritty</em> of investigative <em>journalism</em>  该市报纸仍在试图厘清调查性新闻的实质 </p>
</li>
<li><p>asterisk / ˈæstərɪsk / 星号(置于词语旁以引起注意或另有注释) </p>
</li>
<li><p>nerve-wracking  令人焦虑的; 使人十分紧张的 </p>
</li>
<li><p>grins  露齿而笑; 咧着嘴笑; 龇着牙笑 </p>
</li>
<li><p>giggles  咯咯笑; 傻笑; 趣事; 玩笑; 可笑的事; 止不住的咯咯笑 </p>
</li>
<li><p>divergent  有分歧的; 不同的; 相异的; </p>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github study</title>
    <url>/2020/02/07/Github/</url>
    <content><![CDATA[<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>当多人合作时，可以每个人各自创建一个分支，每个分支都有明确的名称，做完自己的开发后，合并到一起</p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>远端仓库是存在远端服务器或PC上的git仓库，可以使用URL或文件系统的路径来访问一个远程仓库</p>
<p>可以把本地的repo的分支同步到remote repo，一个本地的repo可以关联多个远端repo</p>
<h3 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h3><p><code>git remote</code>可以查看当前关联的remote repo的路径，一般使用origin作为主干的remote repo的名称</p>
<p>关联一个remote repo，在本地的repo目录下，执行</p>
<p><code>git remote add origin https://github.com/memorywalker/workflow.git</code></p>
<p>其中的origin只是一个惯例，也可以使用任意一个名称来代表远端repo，然后使用</p>
<p><code>git remote -v</code>查看当前关联的remote repo是否正确</p>
<p><code>git remote rename newname oldname</code>更改一个remote repo的别名</p>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p><code>git push origin master</code>把本地的master分支发送到名为origin的远端repo，会在远端创建一个master分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">To https://github.com/memorywalker/workflow.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>

<p>执行<code>git log --oneline --all</code>可以看到当前本地更新的远端分支在哪个commit上，其中的<code>origin/master</code>称作追踪分支，表示一个远端分支当前指向当前的哪个commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0f40286 (HEAD -&gt; master, origin/master, backup) change call of duty</span><br></pre></td></tr></table></figure>

<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p><code>git pull origin hexo</code>从名为origin的远端更新hexo分支的commit到本地，pull会合并远端分支的更改到本地</p>
<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>当本地的更改和远端的commit有冲突时，可能不需要git自动合并remote的更改到本地，此时需要先把远端的更改下载到本地，在本地手动合并冲突后，再把本地的push到远端</p>
<p><code>git fetch origin master</code>从名为origin的远端下载master分支到本地，但是不合并到本地的master分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --oneline --all</span><br><span class="line">f85bd96 (origin/master) add h2 style</span><br><span class="line">0f40286 (HEAD -&gt; master, backup) change call of duty</span><br></pre></td></tr></table></figure>

<p>如果要把已经下载下来的合并到本地分支，需要本地执行merge命令</p>
<p><code>git merge origin/master</code>,在本地把冲突处理</p>
<h3 id="shortlog"><a href="#shortlog" class="headerlink" title="shortlog"></a>shortlog</h3><p><code>git shortlog</code>可以查看每一个提交者提交了多少次以及每次提交信息，默认使用作者的名称字母顺序，可以增加<code>-n</code>安提交次数降序排列，<code>-s</code>只显示提交次数，不显示提交信息</p>
<h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p><code>git log --author=xxx</code>只显示作者名字以xxx开始提交的日志，如果名字中有空格，需要使用””包住</p>
<p><code>git log --grep=bug</code>和<code>git log --grep bug</code>过滤commit的信息中有bug的commit，这里grep的规则和shell的grep相同，如果有空格也需要””包住</p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>rebase可以把多个commit合并到一起，如果和多人一起工作，不要把已经push过的commit执行rebase，这样会导致其他人本地的和库里面的不一致，合并起来很麻烦。</p>
<p><code>git rebase -i HEAD~3</code>从<code>HEAD~3</code>的位置重新创建一个base，这个commit之后的会合并到一起，之后<code>git log</code>不会看见已经合并的这些commit，<code>-i</code>标识交互的方式进行rebase</p>
<p>在执行rebase之前可以先创建一个backup分支，避免rebase之后被合并的commit被删除了无法恢复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*   c4f25cd (HEAD -&gt; backup, master) change h2 style</span><br><span class="line">|\</span><br><span class="line">| * f85bd96 (origin/master) add h2 style</span><br><span class="line">* | ff309fe add h2 style local</span><br><span class="line">|/</span><br><span class="line">* 0f40286 change call of duty</span><br><span class="line">* 65d78c2 Revert "change title"</span><br><span class="line">* ee4190c change title</span><br></pre></td></tr></table></figure>

<p>执行<code>git rebase -i HEAD~3</code>后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pick 0f40286 change call of duty</span><br><span class="line">pick ff309fe add h2 style local</span><br><span class="line">pick f85bd96 add h2 style</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Rebase 65d78c2..c4f25cd onto 65d78c2 (3 commands)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Commands:</span><br><span class="line"><span class="meta">#</span> p, pick &lt;commit&gt; = use commit</span><br><span class="line"><span class="meta">#</span> r, reword &lt;commit&gt; = use commit, but edit the commit message</span><br><span class="line"><span class="meta">#</span> e, edit &lt;commit&gt; = use commit, but stop for amending</span><br><span class="line"><span class="meta">#</span> s, squash &lt;commit&gt; = use commit, but meld into previous commit</span><br><span class="line"><span class="meta">#</span> f, fixup &lt;commit&gt; = like "squash", but discard this commit's log message</span><br><span class="line"><span class="meta">#</span> x, exec &lt;command&gt; = run command (the rest of the line) using shell</span><br><span class="line"><span class="meta">#</span> b, break = stop here (continue rebase later with 'git rebase --continue')</span><br><span class="line"><span class="meta">#</span> d, drop &lt;commit&gt; = remove commit</span><br><span class="line"><span class="meta">#</span> l, label &lt;label&gt; = label current HEAD with a name</span><br><span class="line"><span class="meta">#</span> t, reset &lt;label&gt; = reset HEAD to a label</span><br><span class="line"><span class="meta">#</span> m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span><br></pre></td></tr></table></figure>

<p>修改其中的内容，从下向上依次是最早的commit，前缀改为s，说明要把这个commit合并到它的上一个commit，而r对这次提交重新写commit信息，作为最后rebase的新的commit的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">r 0f40286 change call of duty</span><br><span class="line">s ff309fe add h2 style local</span><br><span class="line">s f85bd96 add h2 style</span><br></pre></td></tr></table></figure>

<p>保存文件后，会提示编辑commit信息</p>
<p>合并后65d78c2现在是master的base，中间的其他commit都没有了，不过backup分支还有备份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* fc0772e (HEAD -&gt; master) add h2 style</span><br><span class="line">| * 9848bbf (readme) add readme file</span><br><span class="line">| *   c4f25cd (backup) change h2 style</span><br><span class="line">| |\</span><br><span class="line">| | * f85bd96 (origin/master) add h2 style</span><br><span class="line">| * | ff309fe add h2 style local</span><br><span class="line">| |/</span><br><span class="line">| * 0f40286 change call of duty</span><br><span class="line">|/</span><br><span class="line">* 65d78c2 Revert &quot;change title&quot;</span><br><span class="line">* ee4190c change title</span><br></pre></td></tr></table></figure>

<h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p>拷贝一份其他人的repo到自己的账户</p>
<h4 id="push-1"><a href="#push-1" class="headerlink" title="push"></a>push</h4><blockquote>
<p>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>remote: Please see <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/" target="_blank" rel="noopener">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a> for more information.</p>
</blockquote>
<p>现在github不再使用用户名密码作为验证，而使用token，这个token在<code>[Personal Access Tokens (github.com)](https://github.com/settings/tokens)</code>生成，在生成的页面会显示一次，需要自己保存好，每一个token可以有不同的权限和有效期设置</p>
<p>本地push时，输入用户名后，提示输入密码要用这个新生成的token（一串字符）</p>
<h4 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h4><p>如果要给公共库提交更改，要先查看库的贡献说明文档；查看issue列表是否有类似的问题，咨询库的所有者是否有人在处理这个问题、自己是否可以处理，避免浪费工作时间；是不要提交一个issue来追溯这个更改</p>
<p>github的issue不只是bug，可以是项目相关的任何问题，可以把一个issue指派给一个人或一个版本，一个issue下面可以评论，你也可以订阅这个issue，只要有变化，你都会收到通知</p>
<p>如果一个项目有<code>CONTRIBUTING.md</code>这个文件，在给项目新建issue时，会在页面的最下提示Remember, contributions to this repository should follow its <a href="https://github.com/memorywalker/workflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">contributing guidelines</a>. 链接到项目的贡献说明文档</p>
<p>master分支作为默认的分支一般用来放所有的commit，而更改一个故障可以创建一个topic分支，分支的命就可以是bug-xxx之类，不要在master分支做自己的更改</p>
<p>尽量经常提交小的commit，一个commit的更改一定不能太多，比如十几个文件，几百行代码，因为管理者在合并你的代码时，可能会觉得其中的一部分时合适的，而另一部分不合适，如果全部放在一个commit里，无法单独更改</p>
<p>做了更改之后，不要忘记更多readme文件</p>
<h4 id="pull-request"><a href="#pull-request" class="headerlink" title="pull request"></a>pull request</h4><p>当你在forked的项目上修改了一个故障，此时需要原始的项目维护者从你forked的项目pull这个更改到原始的项目上时，做的一个request</p>
<p>常规流程：</p>
<ol>
<li>fork一个原始项目AA到自己的账户下</li>
<li>把forked的项目下载到本地，并创建一个topic分支进行更改</li>
<li>把topic分支的更改push到自己的账户</li>
<li>在GitHub创建一个pull request并选择更改的topic分支</li>
</ol>
<h4 id="watch-amp-amp-star"><a href="#watch-amp-amp-star" class="headerlink" title="watch &amp;&amp; star"></a>watch &amp;&amp; star</h4><p>watch:当项目有任何的变化都会通知到你的邮箱，如果你是项目的维护者，需要这个</p>
<p>star:在自己的主页可以看到项目的更改，但是不会主动通知</p>
<h4 id="与源项目同步"><a href="#与源项目同步" class="headerlink" title="与源项目同步"></a>与源项目同步</h4><p>fork的项目在本地更改后，原始的项目可能已经更新了内容，但是还是需要把源项目的更改同步过来的</p>
<ol>
<li><p>在本地的项目中增加源项目作物一个remote repo</p>
<p><code>git remote add upstream https://github.com/udacity/course-collaboration-travel-plans.git</code></p>
<p><code>upstream</code>通常作为原始项目的remote的别名</p>
</li>
<li><p><code>git remote -v</code>查看本地的项目应该是关联了两个remote的repo</p>
</li>
<li><p><code>git fetch upstream master</code>从源项目获取最新的更改</p>
</li>
<li><p><code>git checkout master</code>本地的分支切换到master分支</p>
</li>
<li><p><code>git merge upstream/master</code>合并远端upstream的master分支到本地的master分支</p>
</li>
<li><p><code>git push origin master</code>把最新的master推到自己的GitHub的项目的master上</p>
</li>
</ol>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><ul>
<li><p>git push origin 提示 <code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p>
<p>网络原因导致失败，可以多试几次，也可以关闭ssl验证</p>
<p><code>git config --global http.sslVerify &quot;false&quot;</code></p>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.firsttimersonly.com/" target="_blank" rel="noopener">http://www.firsttimersonly.com/</a></p>
<p><a href="https://up-for-grabs.net/#/" target="_blank" rel="noopener">up for grabs</a></p>
<h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3><p> defacto  事实上; 事实; 事实上的; 实际上; 实际上的 </p>
<p> substantial  大量的; 价值巨大的; 重大的; 大而坚固的; 结实的; 牢固的 </p>
<p> <code>a11y</code> stands for “accessibility”. In the word “accessibility”, there are eleven letters between the <code>a</code> and the <code>y</code>, so it gets shortened to just <code>a11y</code> </p>
<p> squash  压软(或挤软、压坏、压扁等); 把…压(或挤)变形; (使) 挤进; 塞入; 打断; 制止; 去除; 粉碎;  墙网球; 壁球; 果汁饮料; 南瓜小果 </p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab使用</title>
    <url>/2020/02/18/Gitlab/</url>
    <content><![CDATA[<h2 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h2><p> <a href="https://gitlab.com/" target="_blank" rel="noopener">https://gitlab.com/</a> </p>
<p>Gitlab实现了git flow的工作模式，可以进行项目的管理、追溯、任务分配。</p>
<p>可以在网站注册账号直接使用gitlab的服务，也可以下载软件，自己在linux系统安装配置服务</p>
<p>注册时需要人机验证，需要科学上网</p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>使用账号登陆后，可以开始创建一个项目</p>
<p>这个项目可以自己从零开始创建，也可以使用现有的模板，甚至从其他平台如GitHub导入</p>
<p>项目创建完成后，就可以<code>git clone</code>下来再本地进行开发了</p>
<h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><h3 id="Milestone"><a href="#Milestone" class="headerlink" title="Milestone"></a>Milestone</h3><p>可以看做是一个大的功能版本，这个版本里面有一些小的功能Issue组成</p>
<p>例如可以把读一本书作为一个里程碑</p>
<p>新建一个里程碑时，可以设置<strong>标题</strong>和<strong>开始</strong>、<strong>结束日期</strong></p>
<h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>一个Issue是一个独立的功能点，例如可以是读完书的某一个章节</p>
<ul>
<li><p>一个Issue可以把它指派给某个成员，这个成员的To Do List将会收到通知</p>
</li>
<li><p>可以把它设置为某个milestone的issue</p>
</li>
<li><p>issue可以设置完成时间</p>
</li>
</ul>
<p>直接在To Do List里点击对应的Issue，就可以看Issue的信息</p>
<h4 id="处理Issue"><a href="#处理Issue" class="headerlink" title="处理Issue"></a>处理Issue</h4><p>本地新建一个对应Issue的分支<code>git checkout -b wireshark</code></p>
<p>代码完成后，本地commit之后，push到远端</p>
<p><code>git push --set-upstream origin wireshark</code> </p>
<p>填写commit的消息时，可以填入issue的编号例如<code>read chapter 1 finished #1.</code>其中的<code>#1</code>可以自动关联到对应的issue</p>
<p>此时在第一个issue的信息页面可以看到</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Memory Walker @memorywalker changed due date to February 22, 2020 11 minutes ago</span><br><span class="line">Memory Walker @memorywalker changed milestone to %wireshark数据包分析 11 minutes ago</span><br><span class="line">Memory Walker @memorywalker mentioned in commit 57932869 5 minutes ago</span><br></pre></td></tr></table></figure>

<p>在Merge Request中新建一个Request，选择issue的分支合并到master，并选择对应的管理人进行合并</p>
<p>管理人会收到一个新的Merge Request的任务，可以自己或再找人审核提交的内容</p>
<p>在changes标签页可以看到更改的内容，并进行评注</p>
<p>如果没有问题，可以点击merge进行合并，然后就可以关闭这个issue</p>
<h4 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h4><p> <a href="https://gitlab.com/memorywalker/blog/" target="_blank" rel="noopener">https://gitlab.com/memorywalker/blog/</a> </p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Service</title>
    <url>/2022/02/09/android-service/</url>
    <content><![CDATA[<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p> <a href="https://developer.android.google.cn/guide/components/services" target="_blank" rel="noopener">Services overview  | Android Developers (google.cn)</a> </p>
<p>一个应用程序组件，没有界面，即使切换到其他程序还可以长期在后台运行。一个组件可以和一个服务绑定后交互，甚至可以进程间通信。服务可以在后台处理网络通信，播放音乐，文件读写或者与content provider交互。</p>
<p>服务运行在当前进程的主线程中，除非指定，否则服务不会创建自己的线程也不会运行在独立的进程中，因此服务中执行任何阻塞操作需要在单独的线程中执行，避免阻塞主线程导致ANR。</p>
<p>考虑使用<code>WorkManager</code>来代替<code>Service</code>的功能</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><strong>前端服务</strong>：显示在通知栏上的服务，用户可以明确知道当前有这个服务在运行，例如音乐播放时，通知栏显示</p>
<p><strong>后端服务</strong>：后台服务，用户不会感知到在执行，例如下载文件</p>
<p><strong>绑定服务</strong>：当一个应用组件通过<code>bindService()</code>绑定到这个服务，服务给组件提供C/S模式的交互，也可以进程间通信。绑定服务只在一个组件与他绑定后才会运行，当多个组件和一个服务绑定，只有当所有的组件都解绑后，服务才会销毁。</p>
<p>服务作为一个组件需要在manifest文件中声明，也可声明为私有，这样别的应用程序不能使用。可以在声明中增加<code>android:description</code>属性提供一个服务的说明，用户可以看到这个服务的作用。</p>
<p>安全考虑使用一个显式的Intent来启动服务，不要给服务声明intent filter。</p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>由于用户可能看不到服务的运行状态，所以服务的生命周期管理十分重要，避免没有被销毁。</p>
<p><strong>启动服务</strong>：一个组件通过调用startService()运行起来，通过参数Intent将信息传递给服务，服务自己调用stopSelf()或其他组件调用stopService()。启动这个服务的组件即使销毁了，服务还是运行状态。另一个组件可以停止其他组件启动的服务。一个服务可以启动多次，如果服务已经是运行状态，那么startService()执行后会调用onStartCommand()，而不再调用onCreate()</p>
<p><strong>绑定服务</strong>：其他组件通过调用bindService()运行起来，客户端通过IBinder接口与服务交互。客户端通过调用unbindService()结束连接。服务不需要自己结束。</p>
<p>对于一个启动服务，其他组件还可以bind到这个服务上，此时调用stopService()或stopSelf()并不会结束服务，直到所有绑定的客户端unbind。例如通过启动服务开始播放音乐，其他组件可以通过绑定到这个服务获取当前播放的歌曲信息。</p>
<p><strong>停止一个服务</strong>，当一个服务有多个并行启动的请求时，多个请求都会执行onStartCommand()，如果有一个触发停止，可能会导致新启动服务被停止掉，因此可以在stopSelf(int)中传入对应请求onStartCommand()的startId，在stopSelf()中判断如果id不是当前最新的id，就不能停止。</p>
<p>系统在内存很少时会结束后台运行的服务，如果服务与用户当前交互的界面绑定，不太会被销毁；如果一个服务声明为前端服务，几乎不会被自动销毁；系统销毁一个服务后，当资源满足后，还会把服务运行起来，此时会执行onStartCommand()接口。根据onStartCommand()的返回值<code>START_NOT_STICKY</code>/<code>START_STICKY</code>/<code>START_REDELIVER_INTENT</code>，系统会决定重启服务时传入的Intent的方式。</p>
<p><img src="/uploads/android/service_lifecycle.png" alt="android"></p>
<h4 id="基本接口"><a href="#基本接口" class="headerlink" title="基本接口"></a>基本接口</h4><p>onStartCommand()  组件调用startService()启动服务时会回调这个接口，只要有调用这个接口，就需要手动调用stopService()来释放</p>
<p>onBind() 组件通过调用bindService()与服务绑定会回调这个接口，这个接口需要返回一个IBinder接口，用来实现客户端与服务的交互。如果不希望被绑定，返回null。</p>
<p>onCreate() 只会在服务初始化调用一次，如果服务已经运行，不会被回调。例如绑定一个已经启动服务，不会回调这个接口。可以在这里创建线程</p>
<p>onDestroy() 系统销毁服务回调，可以用来释放创建的资源例如线程。</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Looper serviceLooper;</span><br><span class="line">  <span class="keyword">private</span> ServiceHandler serviceHandler;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handler that receives messages from the thread</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>(looper);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// Normally we would do some work here, like download a file.</span></span><br><span class="line">          <span class="comment">// For our sample, we just sleep for 5 seconds.</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              <span class="comment">// Restore interrupt status.</span></span><br><span class="line">              Thread.currentThread().interrupt();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// Stop the service using the startId, so that we don't stop</span></span><br><span class="line">          <span class="comment">// the service in the middle of handling another job</span></span><br><span class="line">          stopSelf(msg.arg1);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Start up the thread running the service. Note that we create a</span></span><br><span class="line">    <span class="comment">// separate thread because the service normally runs in the process's</span></span><br><span class="line">    <span class="comment">// main thread, which we don't want to block. We also make it</span></span><br><span class="line">    <span class="comment">// background priority so CPU-intensive work doesn't disrupt our UI.</span></span><br><span class="line">    HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"ServiceStartArguments"</span>,</span><br><span class="line">            Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the HandlerThread's Looper and use it for our Handler</span></span><br><span class="line">    serviceLooper = thread.getLooper();</span><br><span class="line">    serviceHandler = <span class="keyword">new</span> ServiceHandler(serviceLooper);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">      Toast.makeText(<span class="keyword">this</span>, <span class="string">"service starting"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// For each start request, send a message to start a job and deliver the</span></span><br><span class="line">      <span class="comment">// start ID so we know which request we're stopping when we finish the job</span></span><br><span class="line">      Message msg = serviceHandler.obtainMessage();</span><br><span class="line">      msg.arg1 = startId;</span><br><span class="line">      serviceHandler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If we get killed, after returning from here, restart</span></span><br><span class="line">      <span class="keyword">return</span> START_STICKY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// We don't provide binding, so return null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"service done"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start Sevice</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, HelloService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure>

<h4 id="前端服务"><a href="#前端服务" class="headerlink" title="前端服务"></a>前端服务</h4><p>前端服务用于当用户不需要与应用直接交互，但是又需要知道应用当前的运行状态的场景。前端服务会固定显示通知栏通知，直到服务结束。例如音乐播放器切换到后台后，波形音乐信息可以用前端服务在状态栏显示，一个跑步应用可以实时显示跑步距离。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>API level 28 anroid 9 必须声明<code>FOREGROUND_SERVICE</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.FOREGROUND_SERVICE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="前端服务周期"><a href="#前端服务周期" class="headerlink" title="前端服务周期"></a>前端服务周期</h5><ol>
<li><p>启动一个服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Context context = getApplicationContext();</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(...); <span class="comment">// Build the intent for the service</span></span><br><span class="line">context.startForegroundService(intent);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务的 <code>onStartCommand</code> 接口中调用 <code>startForeground</code> 让服务在前端运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent notificationIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ExampleActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">PendingIntent pendingIntent =</span><br><span class="line">        PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, notificationIntent, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Notification notification =</span><br><span class="line">          <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>, CHANNEL_DEFAULT_IMPORTANCE)</span><br><span class="line">    .setContentTitle(getText(R.string.notification_title))</span><br><span class="line">    .setContentText(getText(R.string.notification_message))</span><br><span class="line">    .setSmallIcon(R.drawable.icon)</span><br><span class="line">    .setContentIntent(pendingIntent)</span><br><span class="line">    .setTicker(getText(R.string.ticker_text))</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notification ID cannot be 0.</span></span><br><span class="line">startForeground(ONGOING_NOTIFICATION_ID, notification);</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除前端服务 使用 <code>stopForeground</code>传入boolean变量决定是否同时删除通知栏显示，这个方法执行后，服务还是运行状态。也可以停止服务来结束服务运行，通知栏会自动删除。</p>
</li>
</ol>
<h5 id="声明前端服务类型"><a href="#声明前端服务类型" class="headerlink" title="声明前端服务类型"></a>声明前端服务类型</h5><p>声明前端服务的类型，可以让前端服务访问位置，摄像头和麦克风信息</p>
<ol>
<li><p>配置文件中需要增加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:foregroundServiceType</span>=<span class="string">"location|camera|microphone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务时指明需要哪些权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Notification notification = ...;</span><br><span class="line">Service.startForeground(notification,</span><br><span class="line">        FOREGROUND_SERVICE_TYPE_LOCATION | FOREGROUND_SERVICE_TYPE_CAMERA);</span><br></pre></td></tr></table></figure>
</li>
<li><p>当应用在后台运行时，前端服务使用的这些权限会有限制，此时不能访问麦克风和摄像头，只有当用户授权了 <a href="https://developer.android.google.cn/reference/android/Manifest.permission#ACCESS_BACKGROUND_LOCATION" target="_blank" rel="noopener"><code>ACCESS_BACKGROUND_LOCATION</code></a> 权限后，才能访问位置信息。当然还有一些特殊情况可以去掉这种<a href="https://developer.android.google.cn/guide/components/foreground-services#bg-access-restriction-exemptions" target="_blank" rel="noopener">限制</a>。</p>
</li>
</ol>
<h5 id="通知栏"><a href="#通知栏" class="headerlink" title="通知栏"></a>通知栏</h5><p>以下几种前端服务会立即显示到通知栏：</p>
<ul>
<li>The service is associated with a notification that includes <a href="https://developer.android.google.cn/training/notify-user/build-notification#Actions" target="_blank" rel="noopener">action buttons</a>.</li>
<li>The service has a <a href="https://developer.android.google.cn/guide/topics/manifest/service-element#foregroundservicetype" target="_blank" rel="noopener"><code>foregroundServiceType</code></a> of <code>mediaPlayback</code>, <code>mediaProjection</code>, or <code>phoneCall</code>.</li>
<li>The service provides a use case related to phone calls, navigation, or media playback, as defined in the notification’s <a href="https://developer.android.google.cn/reference/android/app/Notification#category" target="_blank" rel="noopener">category attribute</a>.</li>
<li>The service has opted out of the behavior change by passing <code>FOREGROUND_SERVICE_IMMEDIATE</code> into <a href="https://developer.android.google.cn/reference/android/app/Notification.Builder#setForegroundServiceBehavior(int)" target="_blank" rel="noopener"><code>setForegroundServiceBehavior()</code></a> when setting up the notification.</li>
</ul>
<h4 id="绑定服务"><a href="#绑定服务" class="headerlink" title="绑定服务"></a>绑定服务</h4><p>绑定服务是一种客户端-服务端模式的服务，当一个组件例如activity绑定了一个服务，activity作为客户端可以向服务发送请求。同时不同进程间可以使用绑定服务实现IPC。</p>
<p>可以同时实现 <code>onBind()</code>和<code>onStartCommand()</code>两个接口，这样一个服务可以正常启动后，再被别的组件绑定。例如用户从一个音乐播放器程序的activity启动了服务进行音乐播放，在用户把音乐程序切换后台后，再切换回来，这个activity可以绑定之前服务，对音乐进行控制。</p>
<h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>当有一个客户端绑定服务后，系统会回调服务的<a href="https://developer.android.google.cn/reference/android/app/Service#onBind(android.content.Intent)" target="_blank" rel="noopener">onBind()</a> 接口，这个接口返回一个<code>IBinder</code>对象供客户端访问服务的公共接口。当有多个客户端绑定服务时，只有<strong>第一个绑定</strong>时会回调<code>onBind</code>，后面的绑定都复用缓存的同一个<code>IBinder</code>接口对象。</p>
<p>如果服务端在<code>onUnBind()</code>中返回<code>true</code>，那么下次有客户端再绑定服务时，会回调服务的<code>onRebind</code>接口。</p>
<h6 id="IBinder接口对象"><a href="#IBinder接口对象" class="headerlink" title="IBinder接口对象"></a>IBinder接口对象</h6><p>有三种方式提供<code>IBinder</code>接口实现：</p>
<ul>
<li><p>提供<code>Binder</code>的子类</p>
<p>如果服务只是给应用内部使用，且不需要进程间通信，返回一个继承Binder类的对象来提供服务的公共接口最合适。</p>
</li>
<li><p>使用<code>Messenger</code></p>
<p>如果服务需要在不同进程间通信，由于不同进程间不能获取对方接口信息，所以不能直接调用<code>Binder</code>对象的方法。这时需要使用<code>Messenger</code>，通过消息的方式给服务发送请求。服务中定义一个<code>Handler</code>来处理客户端请求的<code>Message</code>。</p>
<p><code>Messenger</code>内部会把所有的客户端请求<code>Message</code>放在一个线程的队列中通知给服务，这样服务中不需要考虑多线程问题。</p>
</li>
<li><p>使用AIDL</p>
<p> Android Interface Definition Language (AIDL)  可以将对象进行序列化后用于进程间的通信。<code>Messenger</code>本质上也是使用了AIDL，只是把所有的请求放在一个队列中执行。当服务需要同时处理多个客户端的请求时，可以使用AIDL的方式，此时需要服务端自己处理多线程。</p>
</li>
</ul>
<h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>客户端通过调用 <code>bindService()</code>来绑定一个服务，绑定过程是异步的，bindService()会立即返回，客户端需要实现 <a href="https://developer.android.google.cn/reference/android/content/ServiceConnection" target="_blank" rel="noopener">ServiceConnection</a> 用来监控与服务的连接状态。</p>
<p><code>bindService(new Intent(Binding.this, MessengerService.class), mConnection, Context.BIND_AUTO_CREATE)</code></p>
<p>其中的<code>mConnection</code>在绑定成功后收到<code>onServiceConnected</code>回调，里面可以获得服务的<code>onBind</code>接口返回的<code>IBinder</code>对象。</p>
<p>客户端通过调用 <code>unbindService()</code> 与服务解绑，当客户端被销毁时，同时也会触发解绑，但是建议不需要服务的时候客户端主动解绑，释放服务资源。</p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li><code>bind</code>和<code>unbind</code>要成对出现。如果客户端只是在用户可见的时候与服务有交互，在<code>onStart</code>中绑定，<code>onStop</code>中解绑定</li>
<li>如果activity切换到后台后还有交互，在<code>onCreate</code>中绑定，<code>onDestory</code>中解绑定。这种方式activity在整个生命周期中都使用服务，如果服务在另一个进程中运行，这样会增加服务进程的权重，系统更可能杀死这个进程。</li>
<li>对象的引用计数会跨进程累计</li>
<li>连接发生异常时，会抛出 <a href="https://developer.android.google.cn/reference/android/os/DeadObjectException" target="_blank" rel="noopener">DeadObjectException</a> </li>
</ul>
<h5 id="实现Binder类的步骤"><a href="#实现Binder类的步骤" class="headerlink" title="实现Binder类的步骤"></a>实现Binder类的步骤</h5><ol>
<li>服务类中创建一个<strong>Binder</strong>类的实例，这个类提供：<ul>
<li>客户端可以调用的公共方法</li>
<li>返回当前的Service类的实例，客户端可以通过这个实例访问服务的公共方法</li>
<li>返回服务中定义的其他类的实例，客户端可以访问这些类的公共方法</li>
</ul>
</li>
<li>服务的<code>onBind()</code>方法返回定义的<strong>Binder</strong>类的实例</li>
<li>客户端在 <code>onServiceConnected()</code>中获取Binder类对象，并调用其提供的接口。</li>
</ol>
<h6 id="服务端举例"><a href="#服务端举例" class="headerlink" title="服务端举例"></a>服务端举例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Binder given to clients</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder binder = <span class="keyword">new</span> LocalBinder();</span><br><span class="line">    <span class="comment">// Random number generator</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random mGenerator = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class used for the client Binder.  Because we know this service always</span></span><br><span class="line"><span class="comment">     * runs in the same process as its clients, we don't need to deal with IPC.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">        <span class="function">LocalService <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Return this instance of LocalService so clients can call public methods</span></span><br><span class="line">            <span class="keyword">return</span> LocalService.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** method for clients */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandomNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mGenerator.nextInt(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="客户端举例"><a href="#客户端举例" class="headerlink" title="客户端举例"></a>客户端举例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    LocalService mService;</span><br><span class="line">    <span class="keyword">boolean</span> mBound = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        <span class="comment">// Bind to LocalService</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, LocalService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bindService(intent, connection, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        unbindService(connection);</span><br><span class="line">        mBound = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Called when a button is clicked (the button in the layout file attaches to</span></span><br><span class="line"><span class="comment">      * this method with the android:onClick attribute) */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBound) &#123;</span><br><span class="line">            <span class="comment">// Call a method from the LocalService.</span></span><br><span class="line">            <span class="comment">// However, if this call were something that might hang, then this request should</span></span><br><span class="line">            <span class="comment">// occur in a separate thread to avoid slowing down the activity performance.</span></span><br><span class="line">            <span class="keyword">int</span> num = mService.getRandomNumber();</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"number: "</span> + num, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Defines callbacks for service binding, passed to bindService() */</span></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className,</span></span></span><br><span class="line"><span class="function"><span class="params">                IBinder service)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// We've bound to LocalService, cast the IBinder and get LocalService instance</span></span><br><span class="line">            LocalBinder binder = (LocalBinder) service;</span><br><span class="line">            mService = binder.getService();</span><br><span class="line">            mBound = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName arg0)</span> </span>&#123;</span><br><span class="line">            mBound = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实现Messenger的步骤"><a href="#实现Messenger的步骤" class="headerlink" title="实现Messenger的步骤"></a>实现Messenger的步骤</h5><ol>
<li>服务实现 <a href="https://developer.android.google.cn/reference/android/os/Handler" target="_blank" rel="noopener">Handler</a> 用来处理客户端发来的请求</li>
<li>服务使用 <a href="https://developer.android.google.cn/reference/android/os/Handler" target="_blank" rel="noopener">Handler</a> 创建一个<code>Messenger</code>对象，<code>Messager</code>对象中有这个<code>Handler</code>的一个引用</li>
<li><code>Messenger</code>创建一个<code>IBinder</code>用来在<code>onBind</code>中返回给客户端</li>
<li>客户端使用<code>IBinder</code>对象获得<code>Messenger</code>对象，客户端使用<code>Messenger</code>对象给服务发送<code>Message</code>对象</li>
<li>服务在 <a href="https://developer.android.google.cn/reference/android/os/Handler" target="_blank" rel="noopener">Handler</a> 的<code>handleMessage()</code>中处理客户端发来的<code>Message</code></li>
<li>客户端中也可以像服务端一样创建一个<code>Messenger</code>对象，在发送消息时，把自己的<code>Messenger</code>对象作为<code>Message</code>的<code>replyTo</code>参数，这样服务收到消息后，可以使用客户端的<code>Messenger</code>对象给客户端回消息。</li>
</ol>
<h6 id="客户端举例-1"><a href="#客户端举例-1" class="headerlink" title="客户端举例"></a>客户端举例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerServiceActivities</span> </span>&#123;</span><br><span class="line"><span class="comment">// BEGIN_INCLUDE(bind)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Example of binding and unbinding to the remote service.</span></span><br><span class="line"><span class="comment">     * This demonstrates the implementation of a service which the client will</span></span><br><span class="line"><span class="comment">     * bind to, interacting with it through an aidl interface.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * Note that this is implemented as an inner class only keep the sample</span></span><br><span class="line"><span class="comment">     * all together; typically this code would appear in some separate class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Binding</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Messenger for communicating with service. */</span></span><br><span class="line">        Messenger mService = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/** Flag indicating whether we have called bind on the service. */</span></span><br><span class="line">        <span class="keyword">boolean</span> mIsBound;</span><br><span class="line">        <span class="comment">/** Some text view we are using to show state information. */</span></span><br><span class="line">        TextView mCallbackText;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Handler of incoming messages from service.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">IncomingHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MessengerService.MSG_SET_VALUE:</span><br><span class="line">                        mCallbackText.setText(<span class="string">"Received from service: "</span> + msg.arg1);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Target we publish for clients to send messages to IncomingHandler.</span></span><br><span class="line"><span class="comment">         * 通过消息把这个对象发送到服务，服务再利用这个对象给客户端回消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> IncomingHandler());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Class for interacting with the main interface of the service.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className,</span></span></span><br><span class="line"><span class="function"><span class="params">                    IBinder service)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// This is called when the connection with the service has been</span></span><br><span class="line">                <span class="comment">// established, giving us the service object we can use to</span></span><br><span class="line">                <span class="comment">// interact with the service.  We are communicating with our</span></span><br><span class="line">                <span class="comment">// service through an IDL interface, so get a client-side</span></span><br><span class="line">                <span class="comment">// representation of that from the raw service object.</span></span><br><span class="line">                mService = <span class="keyword">new</span> Messenger(service); <span class="comment">// 得到服务端的Messenger，用来给服务发消息</span></span><br><span class="line">                mCallbackText.setText(<span class="string">"Attached."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// We want to monitor the service for as long as we are</span></span><br><span class="line">                <span class="comment">// connected to it.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Message msg = Message.obtain(<span class="keyword">null</span>,</span><br><span class="line">                            MessengerService.MSG_REGISTER_CLIENT);</span><br><span class="line">                    <span class="comment">// 把自己的Messenger发给服务，好让服务可以给客户端回消息</span></span><br><span class="line">                    msg.replyTo = mMessenger;</span><br><span class="line">                    mService.send(msg);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// Give it some value as an example.</span></span><br><span class="line">                    msg = Message.obtain(<span class="keyword">null</span>,</span><br><span class="line">                            MessengerService.MSG_SET_VALUE, <span class="keyword">this</span>.hashCode(), <span class="number">0</span>);</span><br><span class="line">                    mService.send(msg);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    <span class="comment">// In this case the service has crashed before we could even</span></span><br><span class="line">                    <span class="comment">// do anything with it; we can count on soon being</span></span><br><span class="line">                    <span class="comment">// disconnected (and then reconnected if it can be restarted)</span></span><br><span class="line">                    <span class="comment">// so there is no need to do anything here.</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// As part of the sample, tell the user what happened.</span></span><br><span class="line">                Toast.makeText(Binding.<span class="keyword">this</span>, R.string.remote_service_connected,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName className)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// This is called when the connection with the service has been</span></span><br><span class="line">                <span class="comment">// unexpectedly disconnected -- that is, its process crashed.</span></span><br><span class="line">                mService = <span class="keyword">null</span>;</span><br><span class="line">                mCallbackText.setText(<span class="string">"Disconnected."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// As part of the sample, tell the user what happened.</span></span><br><span class="line">                Toast.makeText(Binding.<span class="keyword">this</span>, R.string.remote_service_disconnected,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doBindService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Establish a connection with the service.  We use an explicit</span></span><br><span class="line">            <span class="comment">// class name because there is no reason to be able to let other</span></span><br><span class="line">            <span class="comment">// applications replace our component.</span></span><br><span class="line">            bindService(<span class="keyword">new</span> Intent(Binding.<span class="keyword">this</span>, </span><br><span class="line">                    MessengerService<span class="class">.<span class="keyword">class</span>), <span class="title">mConnection</span>, <span class="title">Context</span>.<span class="title">BIND_AUTO_CREATE</span>)</span>;</span><br><span class="line">            mIsBound = <span class="keyword">true</span>;</span><br><span class="line">            mCallbackText.setText(<span class="string">"Binding."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doUnbindService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mIsBound) &#123;</span><br><span class="line">                <span class="comment">// If we have received the service, and hence registered with</span></span><br><span class="line">                <span class="comment">// it, then now is the time to unregister.</span></span><br><span class="line">                <span class="keyword">if</span> (mService != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 解绑的时候，通知服务也取消注册当前客户端的Messenger实例</span></span><br><span class="line">                        Message msg = Message.obtain(<span class="keyword">null</span>,</span><br><span class="line">                                MessengerService.MSG_UNREGISTER_CLIENT);</span><br><span class="line">                        msg.replyTo = mMessenger;</span><br><span class="line">                        mService.send(msg);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        <span class="comment">// There is nothing special we need to do if the service</span></span><br><span class="line">                        <span class="comment">// has crashed.</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Detach our existing connection.</span></span><br><span class="line">                unbindService(mConnection);</span><br><span class="line">                mIsBound = <span class="keyword">false</span>;</span><br><span class="line">                mCallbackText.setText(<span class="string">"Unbinding."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">// END_INCLUDE(bind)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Standard initialization of this activity.  Set up the UI, then wait</span></span><br><span class="line"><span class="comment">         * for the user to poke it before doing anything.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">            setContentView(R.layout.messenger_service_binding);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Watch for button clicks.</span></span><br><span class="line">            Button button = (Button)findViewById(R.id.bind);</span><br><span class="line">            button.setOnClickListener(mBindListener);</span><br><span class="line">            button = (Button)findViewById(R.id.unbind);</span><br><span class="line">            button.setOnClickListener(mUnbindListener);</span><br><span class="line">            </span><br><span class="line">            mCallbackText = (TextView)findViewById(R.id.callback);</span><br><span class="line">            mCallbackText.setText(<span class="string">"Not attached."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> OnClickListener mBindListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                doBindService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> OnClickListener mUnbindListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                doUnbindService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="服务端举例-1"><a href="#服务端举例-1" class="headerlink" title="服务端举例"></a>服务端举例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BEGIN_INCLUDE(service)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** For showing and hiding our notification. */</span></span><br><span class="line">    NotificationManager mNM;</span><br><span class="line">    <span class="comment">/** Keeps track of all current registered clients. */</span></span><br><span class="line">    ArrayList&lt;Messenger&gt; mClients = <span class="keyword">new</span> ArrayList&lt;Messenger&gt;();</span><br><span class="line">    <span class="comment">/** Holds last value set by a client. */</span></span><br><span class="line">    <span class="keyword">int</span> mValue = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Command to the service to register a client, receiving callbacks</span></span><br><span class="line"><span class="comment">     * from the service.  The Message's replyTo field must be a Messenger of</span></span><br><span class="line"><span class="comment">     * the client where callbacks should be sent.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_REGISTER_CLIENT = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Command to the service to unregister a client, ot stop receiving callbacks</span></span><br><span class="line"><span class="comment">     * from the service.  The Message's replyTo field must be a Messenger of</span></span><br><span class="line"><span class="comment">     * the client as previously given with MSG_REGISTER_CLIENT.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_UNREGISTER_CLIENT = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Command to service to set a new value.  This can be sent to the</span></span><br><span class="line"><span class="comment">     * service to supply a new value, and will be sent by the service to</span></span><br><span class="line"><span class="comment">     * any registered clients with the new value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SET_VALUE = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handler of incoming messages from clients.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IncomingHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MSG_REGISTER_CLIENT:</span><br><span class="line">                    <span class="comment">// 注册一个客户端Messenger，用来给对应的客户端应答Message</span></span><br><span class="line">                    mClients.add(msg.replyTo);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MSG_UNREGISTER_CLIENT:</span><br><span class="line">                    mClients.remove(msg.replyTo);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MSG_SET_VALUE:</span><br><span class="line">                    mValue = msg.arg1;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i=mClients.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            mClients.get(i).send(Message.obtain(<span class="keyword">null</span>,</span><br><span class="line">                                    MSG_SET_VALUE, mValue, <span class="number">0</span>));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                            <span class="comment">// The client is dead.  Remove it from the list;</span></span><br><span class="line">                            <span class="comment">// we are going through the list from back to front</span></span><br><span class="line">                            <span class="comment">// so this is safe to do inside the loop.</span></span><br><span class="line">                            mClients.remove(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Target we publish for clients to send messages to IncomingHandler.</span></span><br><span class="line"><span class="comment">     * 提供给客户端使用的Messenger对象，客户使用它来发消息给服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> IncomingHandler());</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mNM = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display a notification about us starting.</span></span><br><span class="line">        showNotification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Cancel the persistent notification.</span></span><br><span class="line">        mNM.cancel(R.string.remote_service_started);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the user we stopped.</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.remote_service_stopped, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When binding to the service, we return an interface to our messenger</span></span><br><span class="line"><span class="comment">     * for sending messages to the service.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMessenger.getBinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show a notification while this service is running.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNotification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// In this sample, we'll use the same text for the ticker and the expanded notification</span></span><br><span class="line">        CharSequence text = getText(R.string.remote_service_started);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The PendingIntent to launch our activity if the user selects this notification</span></span><br><span class="line">        PendingIntent contentIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="keyword">new</span> Intent(<span class="keyword">this</span>, Controller<span class="class">.<span class="keyword">class</span>), 0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the info for the views that show in the notification panel.</span></span><br><span class="line">        Notification notification = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setSmallIcon(R.drawable.stat_sample)  <span class="comment">// the status icon</span></span><br><span class="line">                .setTicker(text)  <span class="comment">// the status text</span></span><br><span class="line">                .setWhen(System.currentTimeMillis())  <span class="comment">// the time stamp</span></span><br><span class="line">                .setContentTitle(getText(R.string.local_service_label))  <span class="comment">// the label of the entry</span></span><br><span class="line">                .setContentText(text)  <span class="comment">// the contents of the entry</span></span><br><span class="line">                .setContentIntent(contentIntent)  <span class="comment">// The intent to send when the entry is clicked</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Send the notification.</span></span><br><span class="line">        <span class="comment">// We use a string id because it is a unique number.  We use it later to cancel.</span></span><br><span class="line">        mNM.notify(R.string.remote_service_started, notification);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//END_INCLUDE(service)</span></span><br></pre></td></tr></table></figure>

<h4 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h4><p>一般不会用到</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>应用程序网络代理</title>
    <url>/2020/02/23/app-proxy-use/</url>
    <content><![CDATA[<h3 id="Proxifier使用"><a href="#Proxifier使用" class="headerlink" title="Proxifier使用"></a>Proxifier使用</h3><p>启动SSR之后，<strong>不用</strong>选择服务器负载均衡，系统代理模式选择<strong>直连</strong>或<strong>PAC</strong>都可以</p>
<ol>
<li><p>设置服务器</p>
<p>使用默认的127.0.0.1端口为1080</p>
<p><img src="/uploads/proxy/proxifier_server.png" alt="proxifier_server"></p>
</li>
<li><p>设置域名解析</p>
<p>不设置也可以，如果域名解析失败需要通过代理解析再设置</p>
<p><img src="/uploads/proxy/proxifier_dns.png" alt="proxifier_dns"></p>
</li>
<li><p>设置代理规则</p>
<p>可以设置对一个程序禁止访问一些目标网址，action选择block</p>
<p>可以设置全局所有程序都走proxifier，application保留any不变，action选择刚刚的服务器，同时由于不能让SSR也走proxifier，所以需要新建一个rule，让ssr走direct即可</p>
<p><img src="/uploads/proxy/proxifier_rules.png" alt="proxifier_rules">   </p>
</li>
<li><p>运行程序后，显示数据包转发过程</p>
<p>epic客户端使用</p>
<p><img src="/uploads/proxy/proxifier_using.png" alt="proxifier_using"></p>
</li>
</ol>
<h4 id="游戏加速"><a href="#游戏加速" class="headerlink" title="游戏加速"></a>游戏加速</h4><p>玩GTA5的线上模式时，每日的赌场任务如果是裸连或香港的IP，无法游玩大转盘，虽然用联通手机开热点可以直接连接线上模式</p>
<p>在<a href="https://keylol.com/t290826-1-1" target="_blank" rel="noopener">keylol论坛</a>看到分享的GTA5代理设置，试了一下用美区代理可以玩转盘了，网络还还是挺稳定的。每次保存战局中的内容时会触发网络连接。</p>
<p>新增3个代理规则：</p>
<ul>
<li><p>GTA加速</p>
<p>应用程序: subprocess.exe; gta5.exe; gtavlauncher.exe;</p>
<p>目标主机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conductor-prod.ros.rockstargames.com; </span><br><span class="line">auth-prod.ros.rockstargames.com; </span><br><span class="line">prod.cloud.rockstargames.com;</span><br></pre></td></tr></table></figure>

<p>动作：选择配置好的sock5代理服务</p>
</li>
<li><p>GTA分析禁连</p>
<p>应用程序: subprocess.exe; gta5.exe; gtavlauncher.exe;</p>
<p>目标主机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.google-analytics.com;</span><br><span class="line">stats.g.doubleclick.net;</span><br><span class="line">www.google.com;</span><br></pre></td></tr></table></figure>

<p>动作：Block</p>
</li>
<li><p>GTA识别</p>
<p>应用程序: gta5.exe; gtavlauncher.exe;</p>
<p>目标主机：prod.ros.rockstargames.com;</p>
<p>动作：选择配置好的sock5代理服务</p>
</li>
</ul>
<p>游戏运行过程中会在状态窗口中刷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[03.07 19:49:28] GTA5.exe *64 - prod.p02sjc.pod.rockstargames.com:443 打开通过代理 127.0.0.1:10808 SOCKS5</span><br><span class="line">[03.07 19:49:30] GTA5.exe *64 - prod.p02sjc.pod.rockstargames.com:443 关闭，965 字节已发送，5005 字节 (4.88 KB) 已接收，生存期 00:02</span><br><span class="line">[03.07 19:49:51] GTA5.exe *64 - prod.ros.rockstargames.com:80 打开通过代理 127.0.0.1:10808 SOCKS5</span><br><span class="line">[03.07 19:49:54] GTA5.exe *64 - prod.ros.rockstargames.com:80 关闭，643 字节已发送，13001 字节 (12.6 KB) 已接收，生存期 00:03</span><br></pre></td></tr></table></figure>

<h5 id="GTA5-相关备注"><a href="#GTA5-相关备注" class="headerlink" title="GTA5 相关备注"></a>GTA5 相关备注</h5><ul>
<li>完成全福银行任务后，可以用批发价买骷髅马装甲版，这个车必须买，之后可以在车里做R星制作的任务刷等级和钱</li>
<li>北京时间每周四晚更新每周的活动，每周的活动有物品打折和新的玩法，赌场更新汽车奖品</li>
<li>有钱后可以先买公寓20W的，通过观光客任务一次2.5W，每次用时15分钟</li>
<li>可以创建两个角色，两个角色银行共享，其他都不共享，资产都要各自买，R星的奖励左轮枪任务、寻宝任务和帐号绑定，只能领取一次</li>
</ul>
<h3 id="SocksCap64使用"><a href="#SocksCap64使用" class="headerlink" title="SocksCap64使用"></a>SocksCap64使用</h3><h3 id="SSTAP使用"><a href="#SSTAP使用" class="headerlink" title="SSTAP使用"></a>SSTAP使用</h3>]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>proxifier</tag>
      </tags>
  </entry>
  <entry>
    <title>CMCC 宽带</title>
    <url>/2020/07/12/cmcc-tvbox/</url>
    <content><![CDATA[<h2 id="中国移动魔百盒使用"><a href="#中国移动魔百盒使用" class="headerlink" title="中国移动魔百盒使用"></a>中国移动魔百盒使用</h2><p>陕西移动的电视盒子版本为<code>CM201-2</code></p>
<h4 id="安装第三方软件步骤"><a href="#安装第三方软件步骤" class="headerlink" title="安装第三方软件步骤"></a>安装第三方软件步骤</h4><ol>
<li>第一次开机后不要升级，如果已经升级可以在设置中恢复出厂设置</li>
<li>遥控器点设置，在关于本机界面下依次按遥控器的 <code>上上下下左左右右OKOKOK</code></li>
<li>进入DebugTool界面后，abd服务设置，永久打开abd服务</li>
<li>将电脑和盒子连入同一个局域网中，下载电视应用安装器 <a href="http://www.cnhezi.com/pctool/" target="_blank" rel="noopener">http://www.cnhezi.com/pctool/</a></li>
<li>点击自动搜索后，找到盒子的ip地址，双击连接</li>
<li>点击安装应用，把下载好的当贝市场拖入软件，等待自动安装。时间会比较长</li>
<li>安装之后，就可以在当贝市场中安装需要的软件了</li>
</ol>
<h4 id="打开WIFI功能"><a href="#打开WIFI功能" class="headerlink" title="打开WIFI功能"></a>打开WIFI功能</h4><p>默认这个盒子只能通过有线网口连接网络，系统设置中的无线网络被移动用密码保护了，网上也没找来密码。</p>
<p>在当贝桌面中，进入桌面设置，无线网络，打开无线网络就可以连接WIFI了</p>
<h4 id="B站"><a href="#B站" class="headerlink" title="B站"></a>B站</h4><p>如果要看有弹幕的Bilibili，需要下载bilibili的老版本1.6.6版本</p>
<h4 id="京东无线路由器配置"><a href="#京东无线路由器配置" class="headerlink" title="京东无线路由器配置"></a>京东无线路由器配置</h4><p>登录移动光猫 <a href="http://192.168.1.1/html/login_CM.html" target="_blank" rel="noopener">http://192.168.1.1/html/login_CM.html</a></p>
<p>用户名：CMCCAdmin</p>
<p><code>应用--高级NAT设置--DMZ设置</code>其中的ip地址输入无线路由器的地址如192.168.1.1</p>
]]></content>
      <tags>
        <tag>cmcc</tag>
      </tags>
  </entry>
  <entry>
    <title>Code Review</title>
    <url>/2020/02/13/code-review/</url>
    <content><![CDATA[<h2 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h2><p>当多人合作时，可以每个人各自创建一个分支，每个分支都有明确的名称，做完自己的开发后，合并到一起</p>
<h3 id="评审别人代码"><a href="#评审别人代码" class="headerlink" title="评审别人代码"></a>评审别人代码</h3><ul>
<li>接受这样的事实：很多编程上的主张都是一种个人观点。应该讨论它们的利与弊，提出你的倾向观点，迅速的达成一种解决方案。</li>
<li>提问，而不是命令。(“把这个变量命名成<code>:user_id</code>你觉得怎样？”)</li>
<li>请求说明。(“我不明白。你能解释一下吗？”)</li>
<li>避免代码的归属之争。(“我的”，“不是我的”，“你的”)</li>
<li>避免使用一些会被认为是有关人身特征的词语。(“笨蛋”，“愚蠢”)要把所有人都看作是有魅力的、聪明的、善意的。</li>
<li>要明确。要记着并不是每个人都能理解你的意图。</li>
<li>要谦虚。(“我不能确定——我们来分析一下。”)</li>
<li>不要用夸张修辞语。(“总是”，“从不”，“永远”，“毫无…”)</li>
<li>不要讽刺。</li>
<li>展现真实的你。如果你不是幽默型的人，不喜欢使用一些表情符号或动画gif图，不要勉强。如果你是这种人，请自信的发挥。</li>
<li>如果有太多的“我不理解”或“另一种方案：”的评论，请专门针对这个人进行交流。可以把你们线下的交流总结成一个帖子附在后面。</li>
</ul>
<h3 id="被别人评审代码"><a href="#被别人评审代码" class="headerlink" title="被别人评审代码"></a>被别人评审代码</h3><ul>
<li>对审查者的建议表示感激。(“谢谢提醒。我会把它改正。”)</li>
<li>理解审查是对事不对人。审查的是你的代码，而不是你。</li>
<li>解释为什么代码写成这样。(“因为xxx原因我才写成这样。如果我把这个类/文件/方法/变量改个名会更清晰些吗？”)</li>
<li>整理所作的改动，在以后的迭代中重构它们。</li>
<li>在做修改的版本上注明代码审查的链接。(“Ready for review: <a href="http://github.com/organization/project/pull/1" " target="_blank" rel="noopener">http://github.com/organization/project/pull/1″</a>)</li>
<li>push提交要基于最早的一轮反馈，并形成一个独立的分支。等这个分支上的任务完全完成了再合并。这让审查者能够根据早先的反馈找到你的单独的更新。</li>
<li>努力站在审查者的立场上理解。</li>
<li>争取回复每个评论。</li>
<li>直到最后一个人退出登录后再合并分支。</li>
<li>直到持续集成测试(TDDium, TravisCI,等)告诉你这个分支的测试套件通过后再合并分支。</li>
</ul>
<h3 id="代码审查的过程"><a href="#代码审查的过程" class="headerlink" title="代码审查的过程"></a>代码审查的过程</h3><ul>
<li>针对你感觉非常好的地方以及不是很好的地方与作者交流。</li>
<li>找出既能解决问题又能简化代码的方法。</li>
<li>如果讨论变得过于哲学或理论，把讨论转到线下，做成一个有规律的每周五下午的讨论会。同时，是否采用你提出的实现方案，让作者自己做决定。</li>
<li>提出你的实现方案，但要表现出作者也在考虑这种方案。(“你觉得这里用一个自定义校验如何？”)</li>
<li>努力理解作者的立场。</li>
<li>pull请求登出时，加一个 👍 或“可以合并了”的注释。</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[中文原文] (<a href="https://www.oschina.net/news/38067/github-code-review" target="_blank" rel="noopener">https://www.oschina.net/news/38067/github-code-review</a>)</p>
<p><a href="https://github.com/thoughtbot/guides/tree/master/code-review" target="_blank" rel="noopener"> 英文原文 </a></p>
<h3 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h3>]]></content>
      <tags>
        <tag>code review</tag>
      </tags>
  </entry>
  <entry>
    <title>函数栈大小分析</title>
    <url>/2021/06/12/function-stack-size/</url>
    <content><![CDATA[<h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><p><a href="https://www.embeddedrelated.com/showarticle/1330.php" target="_blank" rel="noopener">原始文档</a></p>
<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>以下假设内存空间类似一个梯子，从上到下，地址值从小到大。</p>
<p>程序运行时内存主要分3种区域：</p>
<ul>
<li>静态内存，存储全局变量，静态变量 即BSS和Data段</li>
<li>堆，malloc动态分配的内存，使用free释放</li>
<li>栈，函数调用过程中动态分配的内存段。每个函数有自己的栈帧，包括函数的局部变量和返回值信息。可以通过alloca函数扩展当前栈帧。</li>
</ul>
<p>这三个区域在系统中的大小是预设好的，需要根据应用的情况进行分配各个区域的大小。如果一个区域分配的不合理，可能出现堆空间耗尽或栈溢出(stackoverflow)</p>
<h4 id="ARM-汇编学习"><a href="#ARM-汇编学习" class="headerlink" title="ARM 汇编学习"></a>ARM 汇编学习</h4><p><a href="https://azeria-labs.com/writing-arm-assembly-part-1/" target="_blank" rel="noopener">https://azeria-labs.com/writing-arm-assembly-part-1/</a></p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>作者发现<code>getaddrinfo()</code>  在他的树莓派系统初始化过程中占用了大量的栈空间，所以写了一个测试程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hints</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span>* <span class="title">address_list</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span>(hints));</span><br><span class="line">    hints.ai_family = AF_UNSPEC;</span><br><span class="line">    hints.ai_socktype = SOCK_STREAM;</span><br><span class="line">    hints.ai_protocol = IPPROTO_TCP;</span><br><span class="line">    <span class="keyword">int</span> result = getaddrinfo(<span class="string">"test.example.com"</span>, <span class="string">"80"</span>, &amp;hints, &amp;address_list);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译运行</p>
<p><code>gcc test-getaddrinfo.c -o test-getaddrinfo -g</code></p>
<h4 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h4><p>查看Linux给程序分配的栈开始和结束位置</p>
<p><code>/proc/&lt;pid&gt;/maps</code>文件中列出了内存的所有分段，<code>/proc/</code>文件系统可以看作是查看内核数据的一个UI界面。</p>
<p>也可以在一个运行的gdb会话中执行<code>info proc map</code></p>
<p>对于Nucleo的实时系统，这个地址区间可能在他的链接控制脚本(.ld)文件中</p>
<p>Linux中的栈使用从高地址向低地址方向，即从End到Start的方向使用。</p>
<p>一个栈帧包含了函数运行需要的所有信息，例如暂时保存寄存器中的值，局部变量，函数参数。ARM EABI (Embedded Application Binary Interfac)规定函数的第一个参数通过寄存器传递。</p>
<p>栈区域在进程创建时全部初始化为0.所以可以从栈的开始地址找第一个值为非0的地址，就可以找到当前程序执行的栈的最大深度（从栈底到栈顶的长度）</p>
<p> SP (Stack Pointer)当前栈顶指针，gdb中对应变量$sp</p>
<p>FP (Frame Pointer)当前栈帧地址，gdb中对应变量$r11</p>
<p>函数调用时，通过对SP的值进行减法操作（从高地址向低地址使用），例如当前函数执行需要20字节空间，就对<code>sp=sp-20</code>，让sp指向当前栈空间的顶部。这个操作只是移动了sp指向的位置，对其中的内存并没有执行初始化，所以如果对函数的局部变量不进行初始化就使用，局部变量的值可能就是原来这个内存区域的值，很有可能造成bug。</p>
<h5 id="gdb调试程序"><a href="#gdb调试程序" class="headerlink" title="gdb调试程序"></a>gdb调试程序</h5><p><code>-q</code>选项去掉gdb的启动信息 <code>gdb -q ./test-getaddrinfo</code></p>
<p>使用<code>(gdb) list</code>命令查看当前的源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="keyword">int</span></span><br><span class="line"><span class="number">6</span> main()</span><br><span class="line"><span class="number">7</span> &#123;</span><br><span class="line"><span class="number">8</span>     <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span>  <span class="title">hints</span>;</span></span><br><span class="line"><span class="number">9</span>     <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span>* <span class="title">address_list</span>;</span></span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span>     <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span>(hints));</span><br><span class="line"><span class="number">12</span>     hints.ai_family   = AF_UNSPEC;</span><br><span class="line"><span class="number">13</span>     hints.ai_socktype = SOCK_STREAM;</span><br><span class="line"><span class="number">14</span>     hints.ai_protocol = IPPROTO_TCP;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span>     <span class="keyword">int</span> result = getaddrinfo(<span class="string">"test.example.com"</span>, <span class="string">"80"</span>, &amp;hints, &amp;address_list);</span><br><span class="line"><span class="number">17</span>     <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure>

<p>在main函数打断点 <code>(gdb) b main</code></p>
<p>在main返回之前的17行打断点<code>(gdb) b 17</code></p>
<p>开始运行程序<code>(gdb) r</code></p>
<p>在程序在main中断点停止后，查看栈地址信息<code>(gdb) info proc map</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">process <span class="number">10163</span></span><br><span class="line">Mapped address spaces:</span><br><span class="line"> Start Addr   End Addr       Size     Offset objfile</span><br><span class="line">    <span class="number">0x10000</span>    <span class="number">0x11000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> /home/pi/Projects/test-getaddrinfo/test-getaddrinfo</span><br><span class="line">    <span class="number">0x20000</span>    <span class="number">0x21000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> /home/pi/Projects/test-getaddrinfo/test-getaddrinfo</span><br><span class="line">    <span class="number">0x21000</span>    <span class="number">0x22000</span>     <span class="number">0x1000</span>     <span class="number">0x1000</span> /home/pi/Projects/test-getaddrinfo/test-getaddrinfo</span><br><span class="line"> <span class="number">0x76e64000</span> <span class="number">0x76f8e000</span>   <span class="number">0x12a000</span>        <span class="number">0x0</span> /lib/arm-linux-gnueabihf/libc<span class="number">-2.24</span>.so</span><br><span class="line"> <span class="number">0x76f8e000</span> <span class="number">0x76f9d000</span>     <span class="number">0xf000</span>   <span class="number">0x12a000</span> /lib/arm-linux-gnueabihf/libc<span class="number">-2.24</span>.so</span><br><span class="line"> <span class="number">0x76f9d000</span> <span class="number">0x76f9f000</span>     <span class="number">0x2000</span>   <span class="number">0x129000</span> /lib/arm-linux-gnueabihf/libc<span class="number">-2.24</span>.so</span><br><span class="line"> <span class="number">0x76f9f000</span> <span class="number">0x76fa0000</span>     <span class="number">0x1000</span>   <span class="number">0x12b000</span> /lib/arm-linux-gnueabihf/libc<span class="number">-2.24</span>.so</span><br><span class="line"> <span class="number">0x76fa0000</span> <span class="number">0x76fa3000</span>     <span class="number">0x3000</span>        <span class="number">0x0</span> </span><br><span class="line"> <span class="number">0x76fb8000</span> <span class="number">0x76fbd000</span>     <span class="number">0x5000</span>        <span class="number">0x0</span> /usr/lib/arm-linux-gnueabihf/libarmmem.so</span><br><span class="line"> <span class="number">0x76fbd000</span> <span class="number">0x76fcc000</span>     <span class="number">0xf000</span>     <span class="number">0x5000</span> /usr/lib/arm-linux-gnueabihf/libarmmem.so</span><br><span class="line"> <span class="number">0x76fcc000</span> <span class="number">0x76fcd000</span>     <span class="number">0x1000</span>     <span class="number">0x4000</span> /usr/lib/arm-linux-gnueabihf/libarmmem.so</span><br><span class="line"> <span class="number">0x76fcd000</span> <span class="number">0x76fce000</span>     <span class="number">0x1000</span>     <span class="number">0x5000</span> /usr/lib/arm-linux-gnueabihf/libarmmem.so</span><br><span class="line"> <span class="number">0x76fce000</span> <span class="number">0x76fef000</span>    <span class="number">0x21000</span>        <span class="number">0x0</span> /lib/arm-linux-gnueabihf/ld<span class="number">-2.24</span>.so</span><br><span class="line"> <span class="number">0x76ff9000</span> <span class="number">0x76ffb000</span>     <span class="number">0x2000</span>        <span class="number">0x0</span> </span><br><span class="line"> <span class="number">0x76ffb000</span> <span class="number">0x76ffc000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> [sigpage]</span><br><span class="line"> <span class="number">0x76ffc000</span> <span class="number">0x76ffd000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> [vvar]</span><br><span class="line"> <span class="number">0x76ffd000</span> <span class="number">0x76ffe000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> [vdso]</span><br><span class="line"> <span class="number">0x76ffe000</span> <span class="number">0x76fff000</span>     <span class="number">0x1000</span>    <span class="number">0x20000</span> /lib/arm-linux-gnueabihf/ld<span class="number">-2.24</span>.so</span><br><span class="line"> <span class="number">0x76fff000</span> <span class="number">0x77000000</span>     <span class="number">0x1000</span>    <span class="number">0x21000</span> /lib/arm-linux-gnueabihf/ld<span class="number">-2.24</span>.so</span><br><span class="line"> <span class="number">0x7efdf000</span> <span class="number">0x7f000000</span>    <span class="number">0x21000</span>        <span class="number">0x0</span> [<span class="built_in">stack</span>]</span><br><span class="line"> <span class="number">0xffff0000</span> <span class="number">0xffff1000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> [vectors]</span><br></pre></td></tr></table></figure>

<p>可以看到栈的结束位置在<code>0x7f000000</code>，大小为<code>0x21000</code>，可以算出来栈的开始位置为<code>0x7EFDF000</code></p>
<p> <strong>注意：</strong>这里的栈大小不是Linux系统默认的8M，是132K，这是系统默认给当前进程分配的大小，当进程中的使用的栈空间更多时，系统会扩大这个区域的大小。例如在一个函数中使用了2M的局部变量，系统会把stack区域范围调大，即把低地址0x7efdf000再像低地址区域扩大，例如编程0x7bf00000</p>
<p>查看当前栈执行最大深度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) scan_stack 0 <span class="variable">$stack_size</span></span><br><span class="line">Scanned 10000</span><br><span class="line">Scanned 20000</span><br><span class="line">Scanned 30000</span><br><span class="line">Scanned 40000</span><br><span class="line">Scanned 50000</span><br><span class="line">Scanned 60000</span><br><span class="line">Scanned 70000</span><br><span class="line">Scanned 80000</span><br><span class="line">Scanned 90000</span><br><span class="line">Scanned 100000</span><br><span class="line">Scanned 110000</span><br><span class="line">Scanned 120000</span><br><span class="line">Found data 4660 bytes deeper than current stack frame (0x7effeeb0).</span><br><span class="line">Address    2130697340 = 0x7effdc7c</span><br><span class="line">Stack size   135168 = 0x21000 = 132.0KB, 0x7efdf000-0x7f000000</span><br><span class="line">Stack offset 126076 = 0x1ec7c = 123.1KB</span><br><span class="line">Stack depth    9092 = 0x02384 =   8.9KB</span><br><span class="line">0x7effdc7c: 0x00000020 0x00002e41 0x61656100 0x01006962</span><br><span class="line">0x7effdc8c: 0x00000024 0x06003605 0x09010806 0x12020a01</span><br><span class="line">0x7effdc9c: 0x14011304 0x16011501 0x18031701 0x1c021a01</span><br><span class="line">0x7effdcac: 0x00012201 0x00000000 0x7effe8f4 0x00000000</span><br></pre></td></tr></table></figure>

<p>可以出当前使用栈的最大深度是8.9K，而栈顶的历史最大值比当前SP的值还小了4660字节。这是因为系统在执行我们的程序的main函数之前进行的库和数据段的初始化，例如把二进制程序中的<code>.data</code>段数据拷贝到静态内存区域，初始化全局变量和静态变量。</p>
<p>查看当前栈顶的深度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) stack_offset <span class="variable">$sp</span></span><br><span class="line">Address    2130702000 = 0x7effeeb0</span><br><span class="line">Stack size   135168 = 0x21000 = 132.0KB, 0x7efdf000-0x7f000000</span><br><span class="line">Stack offset 130736 = 0x1feb0 = 127.7KB</span><br><span class="line">Stack depth    4432 = 0x01150 =   4.3KB</span><br></pre></td></tr></table></figure>

<p>查看当前程序的汇编</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble </span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00010474 &lt;+0&gt;: push &#123;r11, lr&#125;</span><br><span class="line">   0x00010478 &lt;+4&gt;: add r11, sp, #4</span><br><span class="line">   0x0001047c &lt;+8&gt;: sub sp, sp, #40 ; 0x28</span><br><span class="line">=&gt; 0x00010480 &lt;+12&gt;: sub r3, r11, #40 ; 0x28</span><br><span class="line">   0x00010484 &lt;+16&gt;: mov r2, #32</span><br><span class="line">   0x00010488 &lt;+20&gt;: mov r1, #0</span><br><span class="line">   0x0001048c &lt;+24&gt;: mov r0, r3</span><br><span class="line">   0x00010490 &lt;+28&gt;: bl 0x10328 &lt;memset@plt&gt;</span><br><span class="line">   0x00010494 &lt;+32&gt;: mov r3, #0</span><br><span class="line">   0x00010498 &lt;+36&gt;: str r3, [r11, #-36] ; 0xffffffdc</span><br><span class="line">   0x0001049c &lt;+40&gt;: mov r3, #1</span><br><span class="line">   0x000104a0 &lt;+44&gt;: str r3, [r11, #-32] ; 0xffffffe0</span><br><span class="line">   0x000104a4 &lt;+48&gt;: mov r3, #6</span><br><span class="line">   0x000104a8 &lt;+52&gt;: str r3, [r11, #-28] ; 0xffffffe4</span><br><span class="line">   0x000104ac &lt;+56&gt;: sub r3, r11, #44 ; 0x2c</span><br><span class="line">   0x000104b0 &lt;+60&gt;: sub r2, r11, #40 ; 0x28</span><br><span class="line">   0x000104b4 &lt;+64&gt;: ldr r1, [pc, #24] ; 0x104d4 &lt;main+96&gt;</span><br><span class="line">   0x000104b8 &lt;+68&gt;: ldr r0, [pc, #24] ; 0x104d8 &lt;main+100&gt;</span><br><span class="line">   0x000104bc &lt;+72&gt;: bl 0x10334 &lt;getaddrinfo@plt&gt;</span><br><span class="line">   0x000104c0 &lt;+76&gt;: str r0, [r11, #-8]</span><br><span class="line">   0x000104c4 &lt;+80&gt;: ldr r3, [r11, #-8]</span><br><span class="line">   0x000104c8 &lt;+84&gt;: mov r0, r3</span><br><span class="line">   0x000104cc &lt;+88&gt;: sub sp, r11, #4</span><br><span class="line">   0x000104d0 &lt;+92&gt;: pop &#123;r11, pc&#125;</span><br><span class="line">   0x000104d4 &lt;+96&gt;: andeq r0, r1, r12, asr #10</span><br><span class="line">   0x000104d8 &lt;+100&gt;: andeq r0, r1, r0, asr r5</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>如果我们有当前程序的源代码，可以匹配使用<code>(gdb) disassemble /s</code>匹配到源代码</p>
<p>每一个函数的汇编由序言，正文和结尾组成，序言用来保存返回上一个函数的地址以及分配当前函数的栈帧空间，正文是函数内容的实现，结尾返回值并跳转回上一级地址。</p>
<ul>
<li>ARM汇编函数的序言</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00010474 &lt;+0&gt;: push &#123;r11, lr&#125;</span><br><span class="line">0x00010478 &lt;+4&gt;: add r11, sp, #4</span><br><span class="line">0x0001047c &lt;+8&gt;: sub sp, sp, #40 ; 0x28</span><br></pre></td></tr></table></figure>

<ol>
<li>把当前FP和LR(Link Register)这两个寄存器的值依次压入栈中，LR中是上一级函数中调用当前函数后的下一个指令地址</li>
<li>把SP的值+4，然后把结果存入FP中，此时FP指向的是当前栈帧的开始</li>
<li>让sp-40，给当前栈帧分配空间</li>
</ol>
<ul>
<li>ARM汇编函数的结束</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x000104c8 &lt;+84&gt;: mov r0, r3</span><br><span class="line">0x000104cc &lt;+88&gt;: sub sp, r11, #4</span><br><span class="line">0x000104d0 &lt;+92&gt;: pop &#123;r11, pc&#125;</span><br><span class="line">0x000104d4 &lt;+96&gt;: andeq r0, r1, r12, asr #10</span><br><span class="line">0x000104d8 &lt;+100&gt;: andeq r0, r1, r0, asr r5</span><br></pre></td></tr></table></figure>

<ol>
<li>把返回值存入r0</li>
<li>让sp指向FP-4的位置</li>
<li>依次把当前栈中的值弹出到pc和FP中，把进入函数时的LR填入PC，从而让处理器执行下一行指令</li>
</ol>
<ul>
<li>函数调用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x000104bc &lt;+72&gt;: bl 0x10334 &lt;getaddrinfo@plt&gt;</span><br></pre></td></tr></table></figure>

<p><code>bl</code>是branch-and-link指令，跳转到新的函数地址，并把当前PC的值存入LR寄存器作为返回地址。</p>
<p><strong>plt</strong> Procedure Linkage Table，库加载的函数，参见</p>
<p><a href="https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html" target="_blank" rel="noopener">https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html</a></p>
<p>继续执行程序到main函数返回前的17行后，在查看当前栈的最大深度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) scan_stack 0 <span class="variable">$stack_size</span></span><br><span class="line">Scanned 10000</span><br><span class="line">Scanned 20000</span><br><span class="line">Scanned 30000</span><br><span class="line">Scanned 40000</span><br><span class="line">Scanned 50000</span><br><span class="line">Scanned 60000</span><br><span class="line">Scanned 70000</span><br><span class="line">Scanned 80000</span><br><span class="line">Scanned 90000</span><br><span class="line">Scanned 100000</span><br><span class="line">Scanned 110000</span><br><span class="line">Found data 11648 bytes deeper than current stack frame (0x7effeeb0).</span><br><span class="line">Address    2130690352 = 0x7effc130</span><br><span class="line">Stack size   135168 = 0x21000 = 132.0KB, 0x7efdf000-0x7f000000</span><br><span class="line">Stack offset 119088 = 0x1d130 = 116.3KB</span><br><span class="line">Stack depth   16080 = 0x03ed0 =  15.7KB</span><br><span class="line">0x7effc130: 0x76ff94b0 0x7effc1a8 0x76e66c28 0x000004b0</span><br><span class="line">0x7effc140: 0x7effc1ac 0x76fd8548 0x00000001 0x76e6c754</span><br><span class="line">0x7effc150: 0x000004b0 0x76e70804 0x76ff94b0 0x7effc1ac</span><br><span class="line">0x7effc160: 0x7effc1a8 0x00000000 0x76ffecf0 0x76e70804</span><br></pre></td></tr></table></figure>

<p>此时的最大深度变为了15.7KB，说明执行过程某一个函数栈顶指向到了<code>0x7effc130</code>的位置</p>
<p>重启程序，并在执行到在main函数的断点后，增加一个<strong>数据断点</strong>，当指定的地址值发生变化时，触发断点</p>
<p><code>(gdb) watch *(int*)0x7effc130</code></p>
<p>继续执行<code>(gdb) c</code>后，程序断点在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hardware watchpoint 3: *(int*)0x7effc130</span><br><span class="line"></span><br><span class="line">Old value = 0</span><br><span class="line">New value = 1996461232</span><br><span class="line">check_match (undef_name=undef_name@entry=0x76df8116 <span class="string">"strcasecmp"</span>, ref=0x76df775c, ref@entry=0x59c2869, version=0x22e80, version@entry=0x76fffabc, flags=1, flags@entry=2, type_class=type_class@entry=1, sym=0x76e6c754, </span><br><span class="line">    sym@entry=0x770037f0, symidx=symidx@entry=1200, strtab=0x76e70804 <span class="string">""</span>, strtab@entry=0x0, map=map@entry=0x76ff94b0, versioned_sym=versioned_sym@entry=0x7effc1ac, num_versions=num_versions@entry=0x7effc1a8) at dl-lookup.c:92</span><br><span class="line">92 dl-lookup.c: No such file or directory.</span><br></pre></td></tr></table></figure>

<p>说明执行到这个<code>check_match</code>函数时，栈深度增加到了最大值。此时需要分析包括这个函数在内的所有函数的栈帧空间大小。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">set</span> height 0</span><br><span class="line">(gdb) stack_walk</span><br><span class="line"><span class="comment">#0  check_match (undef_name=undef_name@entry=0x76df8116 "strcasecmp", ref=0x76df775c, ref@entry=0x59c2869, version=0x22e80, version@entry=0x76fffabc, flags=1, flags@entry=2, type_class=type_class@entry=1, sym=0x76e6c754, </span></span><br><span class="line">    sym@entry=0x770037f0, symidx=symidx@entry=1200, strtab=0x76e70804 <span class="string">""</span>, strtab@entry=0x0, map=map@entry=0x76ff94b0, versioned_sym=versioned_sym@entry=0x7effc1ac, num_versions=num_versions@entry=0x7effc1a8) at dl-lookup.c:92</span><br><span class="line">92 <span class="keyword">in</span> dl-lookup.c</span><br><span class="line">Top stack frame 0x7effc130</span><br><span class="line">.......</span><br><span class="line"><span class="comment">#13 0x76e1e340 in _nss_dns_gethostbyname4_r (name=name@entry=0x10550 "test.example.com", pat=pat@entry=0x7effe998, buffer=0x7effea88 "\177", buflen=1024, errnop=errnop@entry=0x7effe99c, herrnop=herrnop@entry=0x7effe9ac, </span></span><br><span class="line">    ttlp=ttlp@entry=0x0) at nss_dns/dns-host.c:326</span><br><span class="line">326 nss_dns/dns-host.c: No such file or directory.</span><br><span class="line">Last stack frame 0x7effdbe0, current 0x7effe068, size of last 1160 = 0x488, total deeper   7992 = 0x01f38 =   7.8KB</span><br><span class="line"></span><br><span class="line"><span class="comment">#14 0x76f1dee0 in gaih_inet (name=&lt;optimized out&gt;, name@entry=0x10550 "test.example.com", service=&lt;optimized out&gt;, req=0x7effeeb4, pai=pai@entry=0x7effea40, naddrs=&lt;optimized out&gt;, naddrs@entry=0x7effea4c, </span></span><br><span class="line">    tmpbuf=&lt;optimized out&gt;, tmpbuf@entry=0x7effea80) at ../sysdeps/posix/getaddrinfo.c:848</span><br><span class="line">848 ../sysdeps/posix/getaddrinfo.c: No such file or directory.</span><br><span class="line">Last stack frame 0x7effe068, current 0x7effe8e0, size of last 2168 = 0x878, total deeper  10160 = 0x027b0 =   9.9KB</span><br><span class="line"></span><br><span class="line"><span class="comment">#15 0x76f1f010 in __GI_getaddrinfo (name=&lt;optimized out&gt;, service=&lt;optimized out&gt;, hints=&lt;optimized out&gt;, pai=0x7effeeb0) at ../sysdeps/posix/getaddrinfo.c:2391</span></span><br><span class="line">2391 <span class="keyword">in</span> ../sysdeps/posix/getaddrinfo.c</span><br><span class="line">Last stack frame 0x7effe8e0, current 0x7effe9e8, size of last  264 = 0x108, total deeper  10424 = 0x028b8 =  10.2KB</span><br><span class="line"></span><br><span class="line"><span class="comment">#16 0x000104c0 in main () at test-getaddrinfo.c:16</span></span><br><span class="line">16     int result = getaddrinfo(<span class="string">"test.example.com"</span>, <span class="string">"80"</span>, &amp;hints, &amp;address_list);</span><br><span class="line">Last stack frame 0x7effe9e8, current 0x7effeeb0, size of last 1224 = 0x4c8, total deeper  11648 = 0x02d80 =  11.4KB</span><br></pre></td></tr></table></figure>

<p>由于这个<code>stack_walk</code>函数每次输出的是上一个函数的栈帧大小，所以frame 16的size of last 1224说明了frame15的大小为1224字节。切换到frame 15，查看这个函数具体做了什么</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) f 15</span><br><span class="line">#15 0x76f1f010 in __GI_getaddrinfo (name=&lt;optimized out&gt;, service=&lt;optimized out&gt;, hints=&lt;optimized out&gt;, pai=0x7effeec0) at ../sysdeps/posix/getaddrinfo.c:2391</span><br><span class="line">2391 ../sysdeps/posix/getaddrinfo.c: No such file or directory.</span><br><span class="line"></span><br><span class="line">(gdb) disassemble </span><br><span class="line">Dump of assembler code for function __GI_getaddrinfo:</span><br><span class="line">   0x76f1eef0 &lt;+0&gt;: push &#123;r4, r5, r6, r7, r8, r9, r10, r11, lr&#125;</span><br><span class="line">   0x76f1eef4 &lt;+4&gt;: add r11, sp, #32</span><br><span class="line">   0x76f1eef8 &lt;+8&gt;: ldr r6, [pc, #2712] ; 0x76f1f998 &lt;__GI_getaddrinfo+2728&gt;</span><br><span class="line">   0x76f1eefc &lt;+12&gt;: sub sp, sp, #1184 ; 0x4a0</span><br></pre></td></tr></table></figure>

<p>可以看到这个函数在开始时分配了1184字节的栈空间<code>sub sp, sp, #1184</code></p>
<p>从 <a href="https://code.woboq.org/userspace/glibc/sysdeps/posix/getaddrinfo.c.html" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc/sysdeps/posix/getaddrinfo.c.html</a> 找到源代码</p>
<p>感觉frame14知道这个函数接下来调用的是<code>gaih_inet</code>，而这个函数在2265行，说明代码已经有了一些差异了，不过不影响。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2263</span>       <span class="class"><span class="keyword">struct</span> <span class="title">scratch_buffer</span> <span class="title">tmpbuf</span>;</span></span><br><span class="line"><span class="number">2264</span>       scratch_buffer_init (&amp;tmpbuf);</span><br><span class="line"><span class="number">2265</span>       last_i = gaih_inet (name, pservice, hints, end, &amp;naddrs, &amp;tmpbuf);</span><br></pre></td></tr></table></figure>

<p>在这个函数之前有个结构体buffer，从名字上看就是要占用很大空间。转到这个结构体的定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scratch_buffer</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> *data;    <span class="comment">/* Pointer to the beginning of the scratch area.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> length; <span class="comment">/* Allocated space at the data pointer, in bytes.  */</span></span><br><span class="line">  <span class="keyword">union</span> &#123; <span class="keyword">max_align_t</span> __align; <span class="keyword">char</span> __c[<span class="number">1024</span>]; &#125; __space;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>还真有1024字节的数组buffer。</p>
<p>Frame 14的输出记录了Frame 13占用了2168的栈空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) f 13</span><br><span class="line">#13 0x76e1e340 in _nss_dns_gethostbyname4_r (name=name@entry=0x10550 &quot;test.example.com&quot;, pat=pat@entry=0x7effe9a8, buffer=0x7effea98 &quot;\177&quot;, buflen=1024, </span><br><span class="line">    errnop=errnop@entry=0x7effe9ac, herrnop=herrnop@entry=0x7effe9bc, ttlp=ttlp@entry=0x0) at nss_dns/dns-host.c:326</span><br><span class="line">326 nss_dns/dns-host.c: No such file or directory.</span><br><span class="line"></span><br><span class="line">(gdb) disassemble </span><br><span class="line">Dump of assembler code for function _nss_dns_gethostbyname4_r:</span><br><span class="line">   0x76e1e268 &lt;+0&gt;: push &#123;r4, r5, r6, r7, r8, r9, r10, r11, lr&#125;</span><br><span class="line">   0x76e1e26c &lt;+4&gt;: add r11, sp, #32</span><br><span class="line">   0x76e1e270 &lt;+8&gt;: ldr r4, [pc, #812] ; 0x76e1e5a4 &lt;_nss_dns_gethostbyname4_r+828&gt;</span><br><span class="line">   0x76e1e274 &lt;+12&gt;: sub sp, sp, #76 ; 0x4c</span><br></pre></td></tr></table></figure>

<p>但是看函数栈初始化只是增加了76字节，没有2000多啊 ，通过查看<code>_nss_dns_gethostbyname4_r</code>的函数实现，其中有一句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">host_buffer.buf = orig_host_buffer = (querybuf *) alloca (<span class="number">2048</span>);</span><br></pre></td></tr></table></figure>

<p>根据Linux手册描述<code>alloca</code>函数分配栈上的空间 <a href="https://linux.die.net/man/3/alloca" target="_blank" rel="noopener">https://linux.die.net/man/3/alloca</a></p>
<blockquote>
<p>The <strong>alloca</strong>() function allocates <em>size</em> bytes of space in the stack frame of the caller. This temporary space is automatically freed when the function that called <strong>alloca</strong>() returns to its caller.</p>
</blockquote>
<p>剩下的几个函数中都使用了<code>char tname[MAXDNAME+1]</code>这样的buffer来存储最大域名，但是每一个函数都有一份这个buffer，导致累加起来中共就有11K了。</p>
<p> 所以，对于嵌入式的平台，一般有特定的库，而不是通用的Linux库，不然栈都不够用的。</p>
<h4 id="GDB工具脚本"><a href="#GDB工具脚本" class="headerlink" title="GDB工具脚本"></a>GDB工具脚本</h4><p>作者写了几个函数用来查看函数的栈帧大小，以及栈空间的深度，即运行过程中栈顶的最大值</p>
<p><a href="https://sourceware.org/gdb/onlinedocs/gdb/Define.html#index-user_002ddefined-command" target="_blank" rel="noopener">https://sourceware.org/gdb/onlinedocs/gdb/Define.html#index-user_002ddefined-command</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functions for examining and manipulating the stack in gdb.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Script constants.</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$one_kb</span>        = 1024.0</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$safety_margin</span> = 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># Raspbian Linux stack parameters.</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$stack_start</span>   = 0x7efdf000</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$stack_end</span>     = 0x7f000000</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$stack_size</span>    = <span class="variable">$stack_end</span> - <span class="variable">$stack_start</span></span><br><span class="line"></span><br><span class="line">define stack_args</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$argc</span> &lt; 2</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Usage: stack_args &lt;offset|start&gt; &lt;length|end&gt;\n"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable">$arg0</span> &lt; <span class="variable">$stack_start</span></span><br><span class="line">            <span class="comment"># Assume arg0 is a relative offset from start of stack.</span></span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$offset</span> = (int)<span class="variable">$arg0</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment"># Assume arg0 is an absolute address, so compute its offset.</span></span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$offset</span> = (int)<span class="variable">$arg0</span> - <span class="variable">$stack_start</span></span><br><span class="line">        end</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable">$arg1</span> &lt; <span class="variable">$stack_start</span></span><br><span class="line">            <span class="comment"># Assume arg1 is a relative length.</span></span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$length</span> = (int)<span class="variable">$arg1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment"># Assume arg1 is an absolute address, so compute its length.</span></span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$length</span> = (int)<span class="variable">$arg1</span> - <span class="variable">$stack_start</span> - <span class="variable">$offset</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document stack_args</span><br><span class="line">Usage: stack_args &lt;offset|start&gt; &lt;length|end&gt;</span><br><span class="line"></span><br><span class="line">Set stack region offset and length from arguments.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define dump_stack</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$argc</span> &lt; 2</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Usage: dump_stack &lt;offset|start&gt; &lt;length|end&gt;\n"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        stack_args <span class="variable">$arg0</span> <span class="variable">$arg1</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$i</span> = 0</span><br><span class="line">        <span class="keyword">while</span> <span class="variable">$i</span> &lt; <span class="variable">$length</span></span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$addr</span> = <span class="variable">$stack_start</span> + <span class="variable">$offset</span> + <span class="variable">$i</span></span><br><span class="line">            x/4wx <span class="variable">$addr</span></span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$i</span> = <span class="variable">$i</span> + 16</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document dump_stack</span><br><span class="line">Usage: dump_stack &lt;offset|start&gt; &lt;length|end&gt;</span><br><span class="line"></span><br><span class="line">Dumps stack starting at &lt;offset|start&gt; bytes, 4 longwords at a time,</span><br><span class="line"><span class="keyword">for</span> &lt;length|end&gt; bytes.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define clear_stack</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$argc</span> &lt; 2</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Usage: clear_stack &lt;offset|start&gt; &lt;length|end&gt;\n"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        stack_args <span class="variable">$arg0</span> <span class="variable">$arg1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable">$stack_start</span> + <span class="variable">$offset</span> + <span class="variable">$safety_margin</span> &gt;= <span class="variable">$sp</span></span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"Error: start is in active stack.\n"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable">$stack_start</span> + <span class="variable">$offset</span> + <span class="variable">$length</span> + safety_margin &gt;= <span class="variable">$sp</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"Error: end is in active stack.\n"</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">set</span> <span class="variable">$i</span> = 0</span><br><span class="line">                <span class="keyword">while</span> <span class="variable">$i</span> &lt; <span class="variable">$length</span></span><br><span class="line">                    <span class="built_in">set</span> <span class="variable">$addr</span> = <span class="variable">$stack_start</span> + <span class="variable">$offset</span> + <span class="variable">$i</span></span><br><span class="line">                    <span class="built_in">set</span> *((int *) <span class="variable">$addr</span>) = 0</span><br><span class="line">                    <span class="built_in">set</span> <span class="variable">$i</span> = <span class="variable">$i</span> + 4</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># Takes a while, so give some feedback.</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="variable">$i</span> % 10000 == 0</span><br><span class="line">                        <span class="built_in">printf</span> <span class="string">"Cleared %d\n"</span>, <span class="variable">$i</span></span><br><span class="line">                    end</span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document clear_stack</span><br><span class="line">Usage: clear_stack &lt;offset|start&gt; &lt;length|end&gt;</span><br><span class="line"></span><br><span class="line">Clears stack starting at &lt;offset|start&gt; bytes, one longword at a time,</span><br><span class="line"><span class="keyword">for</span> &lt;length|end&gt; bytes.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define stack_offset</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$argc</span> &lt; 1</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Usage: stack_offset &lt;address&gt;\n"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># Cast to int is needed to set $depth when $arg0 is $sp.</span></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$addr</span>   = (int)<span class="variable">$arg0</span></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$offset</span> = <span class="variable">$addr</span> - <span class="variable">$stack_start</span></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$depth</span>  = <span class="variable">$stack_end</span> - <span class="variable">$addr</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Address    %10d = 0x%08x\n"</span>, <span class="variable">$addr</span>, <span class="variable">$addr</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable">$addr</span> &lt; <span class="variable">$stack_start</span> || <span class="variable">$addr</span> &gt;= <span class="variable">$stack_end</span></span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"Warning: address is not in stack.\n"</span></span><br><span class="line">        end</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Stack size   %6d = 0x%05x = %5.1fKB, 0x%x-0x%x\n"</span>, <span class="variable">$stack_size</span>, <span class="variable">$stack_size</span>, <span class="variable">$stack_size</span> / <span class="variable">$one_kb</span>, <span class="variable">$stack_start</span>, <span class="variable">$stack_end</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Stack offset %6d = 0x%05x = %5.1fKB\n"</span>, <span class="variable">$offset</span>, <span class="variable">$offset</span>, <span class="variable">$offset</span> / <span class="variable">$one_kb</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Stack depth  %6d = 0x%05x = %5.1fKB\n"</span>, <span class="variable">$depth</span>, <span class="variable">$depth</span>, <span class="variable">$depth</span> / <span class="variable">$one_kb</span></span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document stack_offset</span><br><span class="line">Usage: stack_offset &lt;address&gt;</span><br><span class="line"></span><br><span class="line">Shows stack offset and depth represented by address.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define scan_stack</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$argc</span> &lt; 2</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Usage: scan_stack &lt;offset|start&gt; &lt;length|end&gt;\n"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        stack_args <span class="variable">$arg0</span> <span class="variable">$arg1</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$addr</span> = <span class="variable">$stack_start</span> + <span class="variable">$offset</span></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$i</span>    = 0</span><br><span class="line">        <span class="keyword">while</span> <span class="variable">$i</span> &lt; <span class="variable">$length</span> &amp;&amp; *((int *) <span class="variable">$addr</span>) == 0</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$addr</span> = <span class="variable">$stack_start</span> + <span class="variable">$offset</span> + <span class="variable">$i</span></span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$i</span> = <span class="variable">$i</span> + 4</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Takes a while, so give some feedback.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable">$i</span> % 10000 == 0</span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"Scanned %d\n"</span>, <span class="variable">$i</span></span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> *((int *) <span class="variable">$addr</span>) != 0</span><br><span class="line">            <span class="keyword">if</span> <span class="variable">$addr</span> &lt; <span class="variable">$sp</span></span><br><span class="line">                <span class="built_in">set</span> <span class="variable">$offset</span> = <span class="variable">$sp</span> - <span class="variable">$addr</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"Found data %d bytes deeper than current stack frame (0x%x).\n"</span>, <span class="variable">$offset</span>, <span class="variable">$sp</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"Stack is clear up to current stack frame (0x%x), it is deepest stack usage.\n"</span>, <span class="variable">$sp</span></span><br><span class="line">            end</span><br><span class="line">            </span><br><span class="line">            stack_offset <span class="variable">$addr</span></span><br><span class="line">            dump_stack <span class="variable">$addr</span>-<span class="variable">$stack_start</span> 64</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"Stack is clear in requested range.\n"</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document scan_stack</span><br><span class="line">Usage: scan_stack &lt;offset|start&gt; &lt;length|end&gt;</span><br><span class="line"></span><br><span class="line">Scans stack <span class="keyword">for</span> non-zero contents starting at &lt;offset|start&gt; bytes, one</span><br><span class="line">longword at a time, <span class="keyword">for</span> &lt;length|end&gt; bytes.</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define stack_walk</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$first_sp</span> = <span class="variable">$sp</span></span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$last_sp</span>  = <span class="variable">$sp</span></span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$total</span>    = 0</span><br><span class="line">    frame</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"Top stack frame 0x%08x\n\n"</span>, <span class="variable">$last_sp</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Loop will error out gracefully when there are no more frames.</span></span><br><span class="line">    <span class="keyword">while</span> 1</span><br><span class="line">        up</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$delta</span>   = <span class="variable">$sp</span> - <span class="variable">$last_sp</span></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$total</span>   = <span class="variable">$total</span> + <span class="variable">$delta</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"Last stack frame 0x%08x, current 0x%08x, size of last %4d = 0x%03x, total deeper %6d = 0x%05x = %5.1fKB\n\n"</span>, <span class="variable">$last_sp</span>, <span class="variable">$sp</span>, <span class="variable">$delta</span>, <span class="variable">$delta</span>, <span class="variable">$total</span>, <span class="variable">$total</span>, <span class="variable">$total</span> / <span class="variable">$one_kb</span></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$last_sp</span> = <span class="variable">$sp</span></span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">document stack_walk</span><br><span class="line">Usage: stack_walk</span><br><span class="line"></span><br><span class="line">Walks stack frames upward from currently selected frame and computes</span><br><span class="line">incremental and cumulative size of frames, so that stack consumption</span><br><span class="line">can be attributed to specific <span class="built_in">functions</span>.</span><br><span class="line"></span><br><span class="line">Use <span class="string">"f 0"</span> to select deepest frame of call stack, or <span class="string">"f &lt;n&gt;"</span> to select</span><br><span class="line">frame &lt;n&gt; higher up <span class="keyword">in</span> stack.</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>stack</tag>
        <tag>arm</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2016/03/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitPages+Hexo+CI 自动部署个人主页</title>
    <url>/2019/06/19/hexo-github-ci/</url>
    <content><![CDATA[<p>2022-02-09 update: 增加使用Github Action来自动化编译的方法</p>
<p>现在已经习惯了使用Markdown写日志了，个人blog还是要坚持记录，WordPress平台的服务器资源总是不稳定，所以还是恢复很久之前使用gh-pages搭的主页。原来这里只是放了一篇模板文件 ORz</p>
<h3 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h3><p>之前使用了HEXO作为静态blog的框架，虽然Github官方支持的是Jekyll，但是之前创建仓库时用的Hexo，还想继续用原来的仓库，就不再调整了</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li>安装nvm </li>
</ol>
<p><code>$ sudo apt install curl</code></p>
<p><code>$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</code></p>
<p>提高npm的安装速度可以使用taobao的镜像服务，地址为<a href="http://npm.taobao.org/" target="_blank" rel="noopener">cnpm</a>，先安装<br><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>后续使用<code>cnpm install xxx --save</code>来安装插件</p>
<ol start="2">
<li><p>安装node.js <code>$ nvm install stable</code></p>
</li>
<li><p>使用npm安装Hexo <code>$ npm install -g hexo-cli</code></p>
</li>
<li><p>非空目录下初始化工程 <code>$ hexo init .</code></p>
</li>
<li><p>安装相关插件 <code>$ npm install</code> </p>
</li>
</ol>
<p>最终得到如下结构目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   配置文件</span><br><span class="line">├── package.json  程序信息</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts  源码目录，md文件放在这里</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><ul>
<li>执行命令新建一个文章</li>
</ul>
<p><code>$ hexo new &quot;post title with whitespace&quot;</code></p>
<p>在<code>source/_post/</code>下会自动生成md文件</p>
<p>打开后有文件基本信息，就可以正常写内容了</p>
<ul>
<li>生成文章 </li>
</ul>
<p><code>$ hexo generate</code></p>
<ul>
<li>本地预览</li>
</ul>
<p><code>$ hexo server</code><br>系统提示服务器的地址<code>http://0.0.0.0:4000/memorywalker/</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/memorywalker/. Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>

<ul>
<li><p>执行命令的过程中增加<code>--debug</code>选项可以输出更多的调试信息，方便定位原因例如 <code>hexo s --debug</code> </p>
</li>
<li><p>支持图片显示</p>
<p><code>_config.yml</code>中<code>post_asset_folder: true</code>设置为true，由于github上只有source目录有直接访问权限，放在_posts目录中无法访问图片文件，所以新建一个uploads目录在source中，可以把需要的图片文件放在这个目录，也可以在这里建立子目录，此时目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source--_posts\xx.md</span><br><span class="line">      --uploads\avatar.gif</span><br></pre></td></tr></table></figure>

<p>目前缺点就是本地目录是不正确导致无法查看</p>
<p><img src="/uploads/avatar.gif" alt="icon"></p>
</li>
</ul>
<h4 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h4><ol>
<li>升级全局的hexo<code>npm i hexo-cli -g</code></li>
<li>新建一个目录，<code>$ hexo init .</code>创建一个新的开发环境</li>
<li>删除原来目录中的<code>node_modules</code>和<code>themes</code>目录，把并把新目录的这两个目录复制到原来的目录中</li>
<li>使用比较工具合并<code>_config.yml</code>文件的内容</li>
<li>使用比较工具<code>package.json</code>文件的内容，把新的文件覆盖的旧目录后，把以前需要的插件再补充安装，例如git部署插件就需要重新安装<code>npm install hexo-deployer-git --save</code></li>
</ol>
<h4 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h4><ol>
<li><p>把next主题下载一份到工程的themes目录下<br><code>$ git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
</li>
<li><p>修改工程的<code>_config.yml</code>中的<code>theme: landscape</code> 为 <code>theme: next</code></p>
</li>
<li><p>执行<code>hexo clean</code>清除原来的缓存，<code>hexo s</code>生成新的文件并进行预览</p>
</li>
<li><p>升级主题 <code>$ cd themes/next</code> and then <code>$ git pull</code></p>
</li>
<li><p>安装next主题后，使用<code>Travis-CI</code>自动部署会出现访问页面时主题用到的资源无法加载，需要修改原来项目<code>_config.yml</code>中的url如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://memorywalker.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>安装本地搜索插件 </li>
</ul>
<p><code>cnpm install hexo-generator-searchdb --save</code></p>
<p>修改<code>themes\next\_config.yml</code>找到<code>local_search</code>，设置为true</p>
<p>修改项目的<code>_config.yml</code> 添加如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="Github部署"><a href="#Github部署" class="headerlink" title="Github部署"></a>Github部署</h3><p>GitHub Pages是针对个人提供的页面，一个用户只能有一个这样的仓库。这个仓库的名称必须是<code>用户名.github.io</code>，对应的访问网址也是<code>用户名.github.io</code></p>
<p>新建<code>用户名.github.io</code>的仓库后，在这个仓库的Setting页面有GitHub Pages配置</p>
<blockquote>
<p>GitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.</p>
</blockquote>
<p>这个配置项中说明了发布地址，以及用户page必须放在master分支，master分支最终只会有hexo编译转换出来的静态博客的网页文件，它的文件都来自<code>hexo g</code>产生的<code>public</code></p>
<p>在本地的hexo目录下新建一个Hexo分支，这个分支用来保存博客的源码程序，这个分支中只把上面的Hexo的框架文件和目录添加到分支，对于<code>node_modules</code>node的插件文件,<code>public</code>生成的发布文件,<code>db.json</code>这些文件不需要添加到分支更新到仓库。</p>
<ul>
<li>安装git部署插件 <code>$ npm install hexo-deployer-git --save</code></li>
<li>修改hexo的配置文件<code>_config.yml</code>,其中增加</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>   </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:memorywalker/memorywalker.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">[message]</span>  <span class="comment">#leave this blank</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>$ hexo deploy</code>,hexo会自动把public的文件push到github的master分支</li>
</ul>
<p>以后每次写完markdown文件后，只需要<code>$ hexo generate --deploy</code>，在生成后自动发布</p>
<h3 id="CI-自动发布"><a href="#CI-自动发布" class="headerlink" title="CI 自动发布"></a>CI 自动发布</h3><h4 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h4><p>在项目的根目录中增加以下文件<code>memorywalker.github.io\.github\workflows\pages.yml</code>，把这个文件push到服务器的hexo分支。配置文件最后把发布分支配置为<strong>pages</strong>，因此需要在<code>https://github.com/memorywalker/memorywalker.github.io/settings</code>的左侧Pages配置中将主页的分支更新为pages分支，而不是原来的master分支。</p>
<img src="/uploads/github/pages_setting.png" alt="icon" style="zoom:60%;">

<ul>
<li>pages.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hexo</span>  <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">'12.x'</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">pages</span></span><br></pre></td></tr></table></figure>

<p>在项目的Action页面中可以看每次push后执行的结果</p>
<img src="/uploads/github/github_actions.png" alt="icon" style="zoom:60%;">

<h4 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis-CI"></a>Travis-CI</h4><p>如果本地没有node.js的环境，此时如果需要发布文章，还要搭建完整的开发环境，使用TravisCI可以自动编译github上的工程，并把结果进行发布<br><a href="https://www.travis-ci.org/" target="_blank" rel="noopener">https://www.travis-ci.org/</a> 使用github账号可以直接登陆</p>
<ol>
<li>在自己的所有工程列表中，打开需要自动部署的工程，并点击Settings</li>
<li>Settings–General: 只需要打开<code>Build pushed branches</code>,其他两个保持关闭</li>
<li>Environment Variables中增加一个Name 为GH_TOKEN，值为自己的Github Personal access Token</li>
<li>Github的个人设置中，进入<code>Developer settings</code>，在<code>Personal access tokens</code>中新建一个token，勾选Repo和user两个项，把自动产生的一段token放到刚刚的环境变量value中</li>
<li>在博客的根目录新建<code>.travis.yml</code>文件，内容为</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># assign build branches</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="comment"># this branch will be build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cache this directory</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">themes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="comment"># install hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/hexo-theme-next</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># install by package.json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"memorywalker"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"eddy.wd5@gmail.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/gh_token/$&#123;GH_TOKEN&#125;/g"</span> <span class="string">_config.yml</span> <span class="comment">#使用travisCI中配置的token替换掉_config.yml中对应的占位符</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"><span class="comment"># E: Build LifeCycle</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>修改hexo的配置文件，把原来的自动部署的repo地址更新为https的</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gh_token@github.com/memorywalker/memorywalker.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把更新的文件push到博客源码分支hexo</p>
</li>
<li><p>在<code>https://www.travis-ci.org/memorywalker/memorywalker.github.io</code>可以查看编译运行情况</p>
</li>
</ol>
<p><a href="https://www.jianshu.com/p/7e47840eee26" target="_blank" rel="noopener">基于TravisCI自动化部署Hexo博客到Github</a></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>blog</tag>
        <tag>tech</tag>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title>IBM Cloud Usage</title>
    <url>/2020/06/22/ibmcloud/</url>
    <content><![CDATA[<h2 id="IBM-Cloud-Usage"><a href="#IBM-Cloud-Usage" class="headerlink" title="IBM Cloud Usage"></a>IBM Cloud Usage</h2><p>IBM Cloud 提供了256M的免费运行空间</p>
<p>注册地址: cloud.ibm.com</p>
<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>Cloud Foundry 可以看作是一个docker容器实例，支持多种语言的Linux环境</p>
<ol>
<li>登录<a href="https://cloud.ibm.com/" target="_blank" rel="noopener">https://cloud.ibm.com/</a></li>
<li>点击<code>Create resource</code></li>
<li>选择Cloud Foundry</li>
<li>Application Runtimes中选择自己需要的语言，目前支持Java、JS、Python、Go、Swift、PHP</li>
<li>区域默认的<code>Dallas</code>,配置选择免费的256M；App Name输入自己应用名称，后面要用；域名选择默认的<code>us-south.cf.appdomain.cloud</code></li>
<li>创建完成后，会自动转到帮助页面</li>
</ol>
<h3 id="Python-Demo"><a href="#Python-Demo" class="headerlink" title="Python Demo"></a>Python Demo</h3><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><p>官方提供的Demo例子，用的是Flask</p>
<p><code>git clone https://github.com/IBM-Cloud/get-started-python</code></p>
<p><code>cd get-started-python</code></p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ol>
<li>安装ibmcloud CLI程序 <a href="https://github.com/IBM-Cloud/ibm-cloud-cli-release/releases/" target="_blank" rel="noopener">https://github.com/IBM-Cloud/ibm-cloud-cli-release/releases/</a></li>
<li>安装Python</li>
<li>创建虚拟Python环境 <code>python -m venv pyvenv36</code></li>
<li>激活当前的虚拟环境<code>pyvenv36\Scripts\activate</code>，然后进入到下载的代码目录安装python依赖<code>pip install -r requirements.txt</code></li>
<li>本地执行Demo程序<code>python hello.py</code></li>
<li>浏览器中访问<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 可以看到一个输入框</li>
</ol>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>安装ibmcloud CLI程序后，进入下载代码目录</p>
<ol>
<li><p>修改配置文件<code>manifest.yml</code>的应用名称为自己创建时写的名称如<code>xxxxxx</code></p>
</li>
<li><p>执行<code>ibmcloud login</code>登录服务，中间需要输入邮箱和密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\code\ibm\dev\get-started-python&gt;ibmcloud login</span><br><span class="line">API 端點: https://cloud.ibm.com</span><br><span class="line"></span><br><span class="line"><span class="meta">Email&gt;</span><span class="bash"> xxxx@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">Password&gt;</span></span><br><span class="line">正在鑑別...</span><br><span class="line">确定</span><br><span class="line"></span><br><span class="line">已設定帳戶 xxxxx's Account (xxxxxxx) 的目標</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>提示选择地区直接<code>Enter</code>跳过，此时会显示应用的基本信息，还会问是否给IBM统计信息，当然是no</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">API 端點：      https://cloud.ibm.com</span><br><span class="line">地區：</span><br><span class="line">使用者：        xxxxx@gmail.com</span><br><span class="line">帳戶：          xxxx's Account (xxxxxxxxx)</span><br><span class="line">資源群組：      未設定資源群組的目標，請使用 'ibmcloud target -g RESOURCE_GROUP'</span><br><span class="line"></span><br><span class="line">CF API 端點：</span><br><span class="line">組織:</span><br><span class="line">空間：</span><br><span class="line"></span><br><span class="line">我們想要收集使用情形統計資料以協助改善 IBM Cloud CLI。</span><br><span class="line">此資料絕不會在 IBM 之外共用。</span><br><span class="line">若要進一步瞭解，請參閱 IBM 隱私權條款：https://www.ibm.com/privacy</span><br><span class="line">您可以啟用或停用使用情形資料收集，方法是執行 'ibmcloud config --usage-stats-coll</span><br><span class="line">ect [true | false]'</span><br><span class="line"></span><br><span class="line">您要傳送使用情形統計資料給 IBM 嗎？ [y/n]&gt; n</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>选择要用的cf应用节点<code>ibmcloud target --cf</code>，这个过程需要代理，否则可能会提示网络错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">失败</span><br><span class="line">無法取得 Cloud Foundry 實例：</span><br><span class="line">Get "https://mccp.us-south.cf.cloud.ibm.com/v2/regions": dial tcp: lookup mccp.u</span><br><span class="line">s-south.cf.cloud.ibm.com: no such host</span><br></pre></td></tr></table></figure>

<p><strong>正常的输出</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\code\ibm\dev\get-started-python&gt;ibmcloud target --cf</span><br><span class="line"></span><br><span class="line">選取 Cloud Foundry 實例：</span><br><span class="line">1. public CF us-south (https://api.us-south.cf.cloud.ibm.com)</span><br><span class="line">2. public CF eu-de (https://api.eu-de.cf.cloud.ibm.com)</span><br><span class="line">3. public CF eu-gb (https://api.eu-gb.cf.cloud.ibm.com)</span><br><span class="line">4. public CF au-syd (https://api.au-syd.cf.cloud.ibm.com)</span><br><span class="line">5. public CF us-east (https://api.us-east.cf.cloud.ibm.com)</span><br><span class="line">請輸入數字&gt; 1</span><br><span class="line">目標 Cloud Foundry (https://api.us-south.cf.cloud.ibm.com)</span><br><span class="line"></span><br><span class="line">已設定組織 xxxx 的目標</span><br><span class="line"></span><br><span class="line">已設定空間 dev 的目標</span><br><span class="line"></span><br><span class="line">API 端點：      https://cloud.ibm.com</span><br><span class="line">地區：</span><br><span class="line">使用者：        xxxxx@gmail.com</span><br><span class="line">帳戶：          xxxxxx's Account (xxxxxxxxx)</span><br><span class="line">資源群組：      未設定資源群組的目標，請使用 'ibmcloud target -g RESOURCE_GROUP'</span><br><span class="line"></span><br><span class="line">CF API 端點：   https://api.us-south.cf.cloud.ibm.com（API 版本：2.148.0）</span><br><span class="line">組織:           xxx</span><br><span class="line">空間：          xxx</span><br></pre></td></tr></table></figure>

<p><em>其中的组织和空间都可以通过网站的账户下面更改名称，免费账户只能有一个组织</em></p>
</li>
<li><p>安装Cloud Foundry CLI <code>ibmcloud cf install</code></p>
</li>
<li><p>本地代码push到服务器<code>ibmcloud cf push</code> 会输出一堆日志和部署信息，最终会显示系统的运行信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">正在等待應用程式啟動...</span><br><span class="line"></span><br><span class="line">名稱:            xxxxx</span><br><span class="line">所要求的狀態:    started</span><br><span class="line">路徑:            xxxxxx.us-south.cf.appdomain.cloud</span><br><span class="line">前次上傳:        Mon 22 Jun 22:43:39 CST 2020</span><br><span class="line">堆疊:            cflinuxfs3</span><br><span class="line">建置套件:        python</span><br><span class="line"></span><br><span class="line">類型:         web</span><br><span class="line">實例:         1/1</span><br><span class="line">記憶體用量:   128M</span><br><span class="line">啟動指令:     python hello.py</span><br><span class="line">     state    自從                   cpu    memory       磁碟        詳細資料</span><br><span class="line"><span class="meta">#</span><span class="bash">0   執行中   2020-06-22T14:44:05Z   0.4%   18.8M/128M   198.7M/1G</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li><p>浏览器访问<code>xxxxxx.us-south.cf.appdomain.cloud</code>就可以看到应用</p>
</li>
<li><p>使用<code>ibmcloud cf ssh appname</code>可以以ssh访问应用的容器空间，不过我试了一直提示<code>no such host</code></p>
</li>
</ol>
<p><em>先到这里，休息一下</em></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>cloud</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ipa文件安装</title>
    <url>/2020/02/08/ipa-install-ios/</url>
    <content><![CDATA[<h2 id="ipa文件安装"><a href="#ipa文件安装" class="headerlink" title="ipa文件安装"></a>ipa文件安装</h2><h3 id="越狱设备"><a href="#越狱设备" class="headerlink" title="越狱设备"></a>越狱设备</h3><ol>
<li>安装 <strong>Cydia</strong> 后，安装 <strong>AppSync Unified</strong> </li>
<li>安装Filza文件管理器</li>
<li>把下载的ipa文件copy到Filza中</li>
<li>在Filza中直接点击ipa文件安装</li>
</ol>
<h3 id="非越狱设备"><a href="#非越狱设备" class="headerlink" title="非越狱设备"></a>非越狱设备</h3><ol>
<li>PC安装 <strong>cydiaimpactor</strong>  <a href="http://www.cydiaimpactor.com/" target="_blank" rel="noopener">link</a></li>
<li>连上设备，启动cydiaimpactor，导入ipa文件</li>
<li>输入自己的Apple ID</li>
<li>如果导入失败，勾选SSL选项</li>
</ol>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li><p>shadowrocket/thor即使使用ipa文件安装之后也无法使用</p>
</li>
<li><p>星露谷物语、ftpmanager pro可以使用ipa直接安装 </p>
</li>
<li><p>ipa下载网站  <a href="https://www.iphonecake.com/" target="_blank" rel="noopener">https://www.iphonecake.com/</a>  这个网站提供的下载网盘需要fq</p>
</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>ios</tag>
        <tag>jailbreak</tag>
      </tags>
  </entry>
  <entry>
    <title>kindle books convert</title>
    <url>/2022/06/19/kindle-books-convert/</url>
    <content><![CDATA[<h3 id="Kindle-Books-Convert"><a href="#Kindle-Books-Convert" class="headerlink" title="Kindle Books Convert"></a>Kindle Books Convert</h3><p>最近开通了美区Amazon Prime会员试用一个月，因此有了Prime Reading的福利，同时亚马逊中国也宣布了2024年6月kindle退出中国，以后如果需要同步电子书，只能使用美区的帐号同步美区的服务。</p>
<p>Prime Reading一个用户可以一次租借10本书，主要是小说和杂志</p>
<h3 id="转换官方电子书-Epubor-Ultimate"><a href="#转换官方电子书-Epubor-Ultimate" class="headerlink" title="转换官方电子书 (Epubor Ultimate)"></a>转换官方电子书 (Epubor Ultimate)</h3><ol>
<li>下载<code>EpuborUltimate</code> </li>
<li>下载<code>KindleForPC-installer-1.17.44170.exe</code>，注意<code>EpuborUltimate</code> 会检测Kindle For PC的版本，如果是1.25之后的版本，会提示进行版本降级，并在[帮助文档](<a href="https://www.epubor.com/faq.html?utm_medium=soft&utm_source=right_menu&utm_campaign=kindle&utm_content=EpuborUltimatev3.0.12.529_36498-15#e501" target="_blank" rel="noopener">Welcome to Epubor Knowledge Base (FAQ)</a>)中提供<a href="http://download.epubor.com/KindleForPC-installer-1.17.44170.exe?_ga=2.245238471.374470622.1655634956-1642488113.1655634956" target="_blank" rel="noopener">下载地址</a></li>
<li>在PC版本的Kindle软件登录后，可以看到自己库中的所有电子书，把需要转换的电子书下载下来</li>
<li>在<code>EpuborUltimate</code>中配置好Kindle电子书的目录后，在软件中可以看到当前的书，选择一本书，拖入右侧的工作区后，在下方选择需要转换的格式，就可以进行转换了</li>
<li>如果出现转换失败，可以升级最新版本的<code>EpuborUltimate</code>软件，在设置中可以自动下载升级包。</li>
</ol>
<p>我的百度网盘</p>
<p>Software/kindle/Kindle 正版书转换工具/</p>
<p><code>EpuborUltimate</code></p>
<p><code>KindleForPC-installer-1.17.44170.exe</code></p>
<h3 id="转换官方电子书-Calibre"><a href="#转换官方电子书-Calibre" class="headerlink" title="转换官方电子书 (Calibre)"></a>转换官方电子书 (Calibre)</h3><p>不知道为什么昨天还能使用<code>EpuborUltimate</code>转换电子书，今天就提示软件不支持租借来的电子书，那就换开源的Calibre</p>
<ol>
<li>下载Calibre的3.48版本，之后的版本不支持win7运行 <a href="https://download.calibre-ebook.com/3.48.0/" target="_blank" rel="noopener">calibre release (3.48.0) (calibre-ebook.com)</a></li>
<li>下载插件<a href="https://github.com/apprenticeharper/DeDRM_tools" target="_blank" rel="noopener">DeDRM_tools</a>，对于calibre 4.x and earlier，需要下载<a href="https://github.com/apprenticeharper/DeDRM_tools/releases/tag/v6.8.1" target="_blank" rel="noopener">v6.8.1</a>；下载好后，把压缩包解压，其中有<code>DeDRM_Plugin.zip</code>这个文件</li>
<li>运行Calibre，到Preference中，高级，插件，选择Load Plugin from files，选择刚刚的<code>DeDRM_Plugin.zip</code>，安装后重启Calibre程序</li>
<li>把Kindle库目录的azw格式的电子书拖入Calibre后，解析完成后就已经去掉了DRM，可以右键选择这本书，转换格式为mobi</li>
</ol>
]]></content>
      <categories>
        <category>read</category>
      </categories>
      <tags>
        <tag>kindle</tag>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown学习</title>
    <url>/2016/03/29/markdown-study/</url>
    <content><![CDATA[<h2 id="MarkDown学习"><a href="#MarkDown学习" class="headerlink" title="MarkDown学习"></a>MarkDown学习</h2><p>2013/9/16 23:46:13 </p>
<p>网上总结的几个优点：</p>
<ul>
<li>纯文本，意味着别人可以简单的修改编辑，关键是可以放到github上用版本管理工具管理起来</li>
<li>语法简单，如果只是简单的写作，不写科技论文，你需要知道的就那么几个常用标记</li>
<li>专心写作，这个优点需要因人而异，没有了word里面各种排版格式设置，你只需要把自己想到的用文字写下来</li>
<li>格式转换，可以转换为HTML格式，互联网时代，HTML格式就是个万能格式，大家都能懂，还可以转换到其他格式</li>
</ul>
<p>本文参考主要来自<a href="http://jianshu.io/p/q81RER" title="献给写作者的 Markdown 新手指南" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南</a></p>
<p>段落 直接回车换行，一行或多行一个效果</p>
<p><strong>粗体</strong></p>
<p><em>斜体</em></p>
<p><em>标题用#的个数来表示</em></p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><em>列表</em></p>
<p>无序列表用 “*” 、 “-”</p>
<ul>
<li>中文</li>
<li>英文</li>
<li>日文</li>
</ul>
<p>有序列表用 数字+.  如</p>
<ol>
<li>早晨</li>
<li>中午</li>
<li>下午</li>
<li>傍晚</li>
<li>夜晚</li>
</ol>
<p>引用</p>
<blockquote>
<p>子曾经曰：“学而时习之，不亦乐乎”</p>
</blockquote>
<p>强制换行<br>最后一个问题?<br>爱过</p>
<p>超链接<a href="链接地址">显示文本</a></p>
<p><a href="http://www.google.com" target="_blank" rel="noopener">Google主页</a></p>
<p>图片<br>女汉子<br><img src="http://img4.duitang.com/uploads/item/201306/03/20130603151306_2rRmB.thumb.600_0.jpeg" alt="三笠女汉子"></p>
<p>国内网站<a href="(http://jianshu.io/)">简书</a></p>
<p>我在使用的软件<a href="http://www.markdownpad.com/" title="markdownpad" target="_blank" rel="noopener">markdownpad</a></p>
<p><a href="http://jianshu.io/p/txFRad" target="_blank" rel="noopener">本文预览</a></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2020/03/06/memory-manage/</url>
    <content><![CDATA[<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>虚拟内存管理的最小单位为<strong>页</strong>，一个页可以是4K或8K</p>
<p><strong>段</strong>是一个进程的数据或代码的逻辑分组，段不是连续的</p>
<p>现在的操作系统同时使用段和页，一个进程被分为多个段，每个段又有页</p>
<p>对于内存块的分配算法，不同的应用场景效率是不一样的。</p>
<h4 id="Buddy-memory-allocation"><a href="#Buddy-memory-allocation" class="headerlink" title="Buddy memory allocation"></a>Buddy memory allocation</h4><p><a href="https://en.wikipedia.org/wiki/Buddy_memory_allocation" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Buddy_memory_allocation</a>  </p>
<p>把内存分割为小块，尽可能的满足内存的分配需求。1963年Harry Markowitz发明</p>
<p>buddy分配方案有多种实现策略，最简单的是2分法。每一个内存块都有一个编号(order)，这个编号从0开始到n，编号为n的内存块的大小为<code>2**n</code>。当一个大的块被分割为两个相同的小块时，这两个小块就是buddy。只有两个buddy才能合并为一个大块。</p>
<p>一个块的最小大小值为2的0次方，即order为0的大小。</p>
<p>需要分配的内存大小为s，分配的块的order为x，则需要满足 <code>2**(x-1)&lt;s&lt;2**(x)</code>,即s大于order为x的大小的一半。</p>
<p>oder的最大值由系统可用的内存大小和最小块大小决定。例如最小块大小即order-0的大小为4K，对于一个有2000K内存的系统，order的最大值为8.因为对于order-8这个块，他的大小为2的8次方256*块的最小值4K为1024K，大于2000的一半了，所以如果order为9，就会超过2000的总大小。</p>
<h6 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h6><p>一个系统中的最小块大大小为64K，order的最大值为4，系统一次可以分配的内存大小最大值为<code>(2**4)*64=1024K</code>.假定系统的内存刚好也就1024K大小。</p>
<p><img src="/uploads/memory/buddyexp.png" alt="buddyexp"></p>
<ol>
<li>初始状态</li>
<li>程序A需要34K内存，因此order-0的块分配给A用就足够了，因为最小就是64.但是当前系统没有0的块，只有一个order是4的块，所以这个为4的块就一次一次对半分割，直到得到一个order-0，并把最左侧的给A使用。分割的过程中会产生一些其他块，这些块以free-list进行管理起来</li>
<li>程序B需要66K内存，需要把order-1的块给B用，从当前的链表中发现已经有对应大小的块了，所以把对于的块之间给B用</li>
<li>程序C需要35K内存，需要一个order-0的块给C用，现在刚好还有</li>
<li>程序D需要67K内存，需要一个order-1的块，而此时没有order-1的块了，那就把order-2的块分解为两个order-1的块，把其中一个给D</li>
<li>程序B释放了资源，此时order-1就多了一块出来，但是他不能和另一个order-1进行合并，因为他们不是来自同一个块，不是buddy</li>
<li>程序D释放了资源，此时又一个order-1空出来了，发现他有buddy，所以他们可以合并为order-2</li>
</ol>
<p>Buddy方案会导致内存浪费internal fragmentation，例如66K的内存需要order-1，其中近一半都被浪费了。</p>
<p>Linux内核使用buddy时进行了改进，同时结合了其他分配方案来管理内存块。</p>
<h4 id="Slab-Allocation"><a href="#Slab-Allocation" class="headerlink" title="Slab Allocation"></a>Slab Allocation</h4><h3 id="进程内存分段"><a href="#进程内存分段" class="headerlink" title="进程内存分段"></a>进程内存分段</h3><p>一个进程使用的内存分为以下几个段</p>
<p>代码段(Text) ：存放可执行文件的指令即代码，只读避免程序被修改</p>
<p>数据段：存储可执行文件中已经初始化好的全局变量，静态分配的变量和全局变量</p>
<p>BSS：程序中未初始化的全局变量，值全部为0，内存位置连续</p>
<p>堆：动态分配的内存段，连续的内存，malloc使用，地址向大扩展</p>
<p>栈：程序执行中的局部变量，函数参数，返回值，地址向小扩展</p>
<p>brk, sbrk可以修改<strong>program break</strong>的位置，即heap的大小。</p>
<p><strong>sbrk()</strong> increments the program’s data space by <em>increment</em> bytes. 成功返回上一次的<strong>program break</strong>的位置。因此<code>sbrk((ptrdiff_t)0)</code>就可以返回当前的<strong>program break</strong>.</p>
<p><strong>brk()</strong> sets the end of the data segment to the value specified by <em>addr</em>。成功返回0，这里的data segment并不是数据段。</p>
<p><a href="http://man7.org/linux/man-pages/man2/sbrk.2.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man2/sbrk.2.html</a></p>
<p><img src="/uploads/memory/linuxmemory.png" alt="linuxmemory"></p>
<p>进程地址空间分为用户空间和内核空间。用户空间从0到0xC0000000，内核空间使用剩下的高地址部分。用户进程只有进行系统调用才可以访问内核空间。每个进程使用自己的用户空间，而内核空间是内核负责，不会随着进程改变而变化。内核空间地址有自己对应的页表。用户进程各自有不同的页表。</p>
<p>逻辑地址经过段机制转化为线性地址，线性地址经过页机制转化为物理地址</p>
<p>使用<code>cat /proc/&lt;pid&gt;/maps</code>查看进程的内存区域</p>
<p>内核使用<code>vm_area_struct</code>描述进程地址空间的基本管理单元，使用链表进行链接这些块，以红黑树的形式组织。遍历时使用链表，定位内存位置时使用红黑树</p>
<p>内核使用<code>do_mmap()</code>函数创建一个新的线性地址空间</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>xxx</li>
</ul>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>memory</tag>
        <tag>malloc</tag>
      </tags>
  </entry>
  <entry>
    <title>Network Proxy</title>
    <url>/2022/09/25/network-proxy/</url>
    <content><![CDATA[<h2 id="Network-Proxy"><a href="#Network-Proxy" class="headerlink" title="Network Proxy"></a>Network Proxy</h2><h3 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h3><p>参考 [Clash for Windows 优雅地使用 TUN 模式接管系统流量 | Dejavu’s Blog](<a href="https://www.dejavu.moe/posts/cfw-tun/#:~:text=Clash" target="_blank" rel="noopener">https://www.dejavu.moe/posts/cfw-tun/#:~:text=Clash</a> for Windows 优雅地使用 TUN 模式接管系统流量 1 前言,，安装完成后 CFW 会自动重启 5 开启Mixin Mixin 开启 )</p>
<p>Clash目前是Windows上非常好用的代理软件，Android手机也有客户端，可以设置哪些应用走代理，规则设置自由。在Android TV上使用手机版本的Clash也很流畅，可以使用导入文件的方式导入代理，避免输入订阅地址。</p>
<p><img src="..%5Cuploads%5Cproxy%5Cclash_setting.png" alt="clash_setting"></p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li><p>导入订阅</p>
<p>在Profiles界面输入框中输入订阅地址，点击下载后，就可以下载一个订阅到本地</p>
</li>
<li><p>代理服务</p>
<p>代理服务的端口默认为7890端口</p>
</li>
<li><p>局域网共享代理</p>
<p>如果需要给局域网中的其他网络设备，需要把<strong>Allow LAN</strong>选项打开，界面会提示当前共享服务的ip</p>
</li>
<li><p>全局HTTP代理</p>
<p>如果需要代理整个系统的HTTP连接，需要把<strong>System Proxy</strong>选项打开，这样浏览器不用<strong>Proxy SwitchyOmega</strong>代理插件也可以使用代理</p>
</li>
</ul>
<h4 id="Tap代理"><a href="#Tap代理" class="headerlink" title="Tap代理"></a>Tap代理</h4><p>如果要给某个应用程序设置代理，而不只是浏览器的HTTP服务，可以使用Tap Service。</p>
<ol>
<li><p>点击Tap Service后面的管理安装Tap虚拟网卡</p>
</li>
<li><p>安装成功后，在网络管理中可以看到一个<code>cfw-tap</code>的网络设备，此时是断开状态</p>
</li>
<li><p>在Setting中，找到Mixin选项，选择YAML后，点击编辑输入以下代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixin:</span> <span class="comment"># object</span></span><br><span class="line">  <span class="attr">dns:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>    </span><br><span class="line">    <span class="attr">enhanced-mode:</span> <span class="string">redir-host</span></span><br><span class="line">    <span class="attr">listen:</span> <span class="string">:53</span></span><br><span class="line">    <span class="attr">nameserver:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://doh.dns.sb/dns-query</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://dns.adguard.com/dns-query</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://cdn-doh.ssnm.xyz/dns-query</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span> <span class="comment">#腾讯</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span> <span class="comment">#阿里</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开主界面的Mixin开关，此时cfw-tap网络就正常工作了</p>
</li>
<li><p>打开<strong>System Proxy</strong>选项</p>
</li>
<li><p>第三方的应用程序默认都会使用cfw-tap网络通信</p>
</li>
</ol>
<h4 id="TUN代理"><a href="#TUN代理" class="headerlink" title="TUN代理"></a>TUN代理</h4><ol>
<li><p>如果使用过tap模式，需要先把tap模式的网卡卸载</p>
</li>
<li><p>点击Service Mode后的管理，安装服务模式，这个安装比较慢，等待安装成功后，小地球会变为绿色</p>
</li>
<li><p>在Setting中找到Mixin，用YAML编辑以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixin:</span> <span class="comment"># Mixin 配置文件</span></span><br><span class="line">  <span class="attr">dns:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="attr">ipv6:</span> <span class="literal">true</span> <span class="comment"># true/false 是否启用 ipv6 支持 </span></span><br><span class="line">    <span class="comment"># 从 v0.18.8 版本开始，TUN 模式建议使用 fake-ip 模式，redir-host 将无法进行远端 DNS 解析</span></span><br><span class="line">    <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span> <span class="comment"># redir-host/fake-ip</span></span><br><span class="line">    <span class="comment"># use-hosts: true # 查询 hosts 并返回 IP 记录</span></span><br><span class="line">    <span class="attr">default-nameserver:</span> <span class="comment"># 用于 DoH/DoT 的 Bootstrap Server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>  <span class="comment"># 阿里公共 DNS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">223.6</span><span class="number">.6</span><span class="number">.6</span>  <span class="comment"># 阿里公共 DNS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span> <span class="comment"># DNSPOD 公共 DNS</span></span><br><span class="line">    <span class="attr">fake-ip-range:</span> <span class="number">198.18</span><span class="number">.0</span><span class="number">.1</span><span class="string">/16</span> <span class="comment"># Fake IP 地址池 (CIDR 形式)</span></span><br><span class="line">    <span class="attr">fake-ip-filter:</span> <span class="comment"># 微软系 APP 无法登陆使用等问题，通过添加 fake-ip-filter 解决</span></span><br><span class="line">      <span class="comment"># === Local ===</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"*.lan"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"*.local"</span></span><br><span class="line">      <span class="comment"># === Microsoft Windows Serivice ===</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"*.msftncsi.com"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"*.msftconnecttest.com"</span></span><br><span class="line">    <span class="attr">nameserver:</span> <span class="comment"># GeoIP 为 CN 时使用的 DNS NameServer（使用DoH/DoT）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://doh.pub/dns-query</span>   <span class="comment"># DNSPod DoH</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://dns.alidns.com/dns-query</span>  <span class="comment"># 阿里 DoH</span></span><br><span class="line">      <span class="comment">#- https://[2400:3200::1]/dns-query  # 阿里 DoH</span></span><br><span class="line">      <span class="comment">#- https://[2400:3200:baba::1]/dns-query # 阿里 DoH</span></span><br><span class="line">    <span class="attr">fallback:</span> <span class="comment"># GeoIP 不是 CN 时使用的 DNS NameServer（使用DoH/DoT）</span></span><br><span class="line">      <span class="comment">#- https://doh.dns.sb/dns-query    # DNS.SB DoH</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://dns.google/dns-query</span>    <span class="comment"># Google DoH</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://1.1.1.1/dns-query</span>   <span class="comment"># Cloudflare DoH</span></span><br><span class="line">      <span class="comment">#- https://1.0.0.1/dns-query   # Cloudflare DoH</span></span><br><span class="line">    <span class="attr">fallback-filter:</span></span><br><span class="line">      <span class="attr">geoip:</span> <span class="literal">true</span> <span class="comment"># 启用 GeoIP</span></span><br><span class="line">      <span class="attr">ip-cidr:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">240.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/4</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">/8</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/32</span></span><br><span class="line">      <span class="attr">domain:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.google.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.facebook.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.twitter.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.youtube.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.xn--ngstr-lra8j.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.google.cn</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.googleapis.cn</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.googleapis.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">+.gvt1.com</span></span><br><span class="line"><span class="comment"># interface-name: Ethernet  # 出口网卡名称（已注释），建议使用自动检测出口网卡模式👇</span></span><br><span class="line">  <span class="attr">tun:</span>  <span class="comment"># Tun 配置</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 启用 Tun 模式</span></span><br><span class="line"><span class="comment"># 使用 system statck 需要 Clash Premium 2021.05.08 及更高版本</span></span><br><span class="line">    <span class="attr">stack:</span> <span class="string">system</span>  <span class="comment"># gvisor/system 使用 system stack 请按照本文后面防火墙放行程序</span></span><br><span class="line">    <span class="attr">dns-hijack:</span>   </span><br><span class="line">      <span class="bullet">-</span> <span class="number">198.18</span><span class="number">.0</span><span class="number">.2</span><span class="string">:53</span>  <span class="comment"># 本地劫持 DNS 地址，无需修改</span></span><br><span class="line">    <span class="attr">auto-route:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">auto-detect-interface:</span> <span class="literal">true</span>  <span class="comment"># 自动检测出口网卡</span></span><br><span class="line"><span class="attr">rules:</span> <span class="comment"># 规则覆盖</span></span><br><span class="line">  <span class="comment"># 直连 IP 范围</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,0.0.0.0/8,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,10.0.0.0/8,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,100.64.0.0/10,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,127.0.0.0/8,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,169.254.0.0/16,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,172.16.0.0/12,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,192.0.0.0/24,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,192.0.2.0/24,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,192.88.99.0/24,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,192.168.0.0/16,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,198.18.0.0/15,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,198.51.100.0/24,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,203.0.113.0/24,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,223.255.255.0/24,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,224.0.0.0/4,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,240.0.0.0/4,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,255.255.255.255/32,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,::/128,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,::1/128,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,100::/64,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,64:ff9b::/96,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2001::/32,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2001:10::/28,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2001:20::/28,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2001:db8::/32,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2002::/16,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,fc00::/7,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,fe80::/10,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,ff00::/8,DIRECT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Adguard 本地 DNS 请求直连</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN,injections.adguard.org,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN,local.adguard.org,DIRECT</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># CN 网站全直连</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,-cn,DIRECT</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,126.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,126.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,127.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,163.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,kugou.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,kuwo.cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,migu.cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,360buyimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,36kr.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,acfun.tv,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,air-matters.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,aixifan.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,alicdn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,alipay,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,taobao,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,amap.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,autonavi.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,baidu,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bdimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bdstatic.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bilibili.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bilivideo.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,caiyunapp.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,clouddn.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cnbeta.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cnbetacdn.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cootekservice.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,csdn.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ctrip.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dgtle.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dianping.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,douban.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,doubanio.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,duokan.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,easou.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ele.me,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,feng.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,fir.im,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,frdic.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,g-cores.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,godic.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gtimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN,cdn.hockeyapp.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,hongxiu.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,hxcdn.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,iciba.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ifeng.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ifengimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ipip.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,iqiyi.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,jd.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,jianshu.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,knewone.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,le.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,lecloud.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,lemicp.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,licdn.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,linkedin.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,luoo.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,meituan.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,meituan.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mi.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,miaopai.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,microsoft.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,microsoftonline.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,miui.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,miwifi.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mob.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,netease.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,office.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,office365.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,officecdn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,oschina.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ppsimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,pstatp.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qcloud.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qdaily.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qdmm.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qhimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qhres.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qidian.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qihucdn.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qiniu.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qiniucdn.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qiyipic.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qq.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,qqurl.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,rarbg.to,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ruguoapp.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,segmentfault.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sinaapp.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,smzdm.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,snapdrop.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sogou.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sogoucdn.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sohu.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,soku.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,speedtest.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sspai.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,suning.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,taobao.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tencent.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tenpay.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tianyancha.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tmall.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tudou.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,umetrip.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,upaiyun.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,upyun.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,veryzhun.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,weather.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,weibo.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xiami.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xiami.net,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xiaomicp.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ximalaya.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xmcdn.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xunlei.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,yhd.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,yihaodianimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,yinxiang.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ykimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,youdao.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,youku.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,zealer.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,zhihu.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,zhimg.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,zimuzu.tv,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,zoho.com,DIRECT</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Telegram 相关全代理</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,telegra.ph,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,telegram.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,91.108.4.0/22,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,91.108.8.0/21,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,91.108.16.0/22,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,91.108.56.0/22,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,149.154.160.0/20,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2001:67c:4e8::/48,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2001:b28:f23d::/48,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR6,2001:b28:f23f::/48,Proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 海外网站</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,9to5mac.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,abpchina.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,adblockplus.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,adobe.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,akamaized.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,alfredapp.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,amplitude.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ampproject.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,android.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,angularjs.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,aolcdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,apkpure.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,appledaily.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,appshopper.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,appspot.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,arcgis.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,archive.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,armorgames.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,aspnetcdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,att.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,awsstatic.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,azureedge.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,azurewebsites.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bing.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bintray.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bit.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bit.ly,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bitbucket.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bjango.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bkrtx.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,blog.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,blogcdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,blogger.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,blogsmithmedia.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,blogspot.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,blogspot.hk,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bloomberg.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,box.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,box.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cachefly.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,chromium.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cl.ly,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cloudflare.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cloudfront.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cloudmagic.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cmail19.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cnet.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,cocoapods.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,comodoca.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,crashlytics.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,culturedcode.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,d.pr,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,danilo.to,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dayone.me,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,db.tt,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,deskconnect.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,disq.us,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,disqus.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,disquscdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dnsimple.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,docker.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dribbble.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,droplr.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,duckduckgo.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dueapp.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dytt8.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,edgecastcdn.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,edgekey.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,edgesuite.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,engadget.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,entrust.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,eurekavpt.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,evernote.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,fabric.io,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,fast.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,fastly.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,fc2.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,feedburner.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,feedly.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,feedsportal.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,fiftythree.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,firebaseio.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,flexibits.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,flickr.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,flipboard.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,g.co,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gabia.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,geni.us,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gfx.ms,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ggpht.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ghostnoteapp.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,git.io,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,github,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,globalsign.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gmodules.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,godaddy.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,golang.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gongm.in,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,goo.gl,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,goodreaders.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,goodreads.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gravatar.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gstatic.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gvt0.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,hockeyapp.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,hotmail.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,icons8.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ifixit.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ift.tt,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ifttt.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,iherb.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,imageshack.us,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,img.ly,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,imgur.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,imore.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,instapaper.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ipn.li,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,is.gd,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,issuu.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,itgonglun.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,itun.es,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ixquick.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,j.mp,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,js.revsci.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,jshint.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,jtvnw.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,justgetflux.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,kat.cr,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,klip.me,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,libsyn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,linode.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,lithium.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,littlehj.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,live.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,live.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,livefilestore.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,llnwd.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,macid.co,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,macromedia.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,macrumors.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mashable.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mathjax.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,medium.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mega.co.nz,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mega.nz,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,megaupload.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,microsofttranslator.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mindnode.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,mobile01.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,modmyi.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,msedge.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,myfontastic.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,name.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,nextmedia.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,nsstatic.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,nssurge.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,nyt.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,nytimes.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,omnigroup.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,onedrive.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,onenote.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ooyala.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,openvpn.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,openwrt.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,orkut.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,osxdaily.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,outlook.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ow.ly,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,paddleapi.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,parallels.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,parse.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,pdfexpert.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,periscope.tv,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,pinboard.in,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,pinterest.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,pixelmator.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,pixiv.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,playpcesor.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,playstation.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,playstation.com.hk,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,playstation.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,playstationnetwork.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,pushwoosh.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,rime.im,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,servebom.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sfx.ms,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,shadowsocks.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sharethis.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,shazam.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,skype.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,smartdnsProxy.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,smartmailcloud.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sndcdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sony.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,soundcloud.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sourceforge.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,spotify.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,squarespace.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,sstatic.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,st.luluku.pw,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,stackoverflow.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,startpage.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,staticflickr.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,steamcommunity.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,symauth.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,symcb.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,symcd.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tapbots.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tapbots.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tdesktop.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,techcrunch.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,techsmith.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,thepiratebay.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,theverge.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,time.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,timeinc.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tiny.cc,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tinypic.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tmblr.co,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,todoist.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,trello.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,trustasiassl.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tumblr.co,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tumblr.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tweetdeck.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tweetmarker.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,twitch.tv,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,txmblr.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,typekit.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ubertags.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ublock.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ubnt.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ulyssesapp.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,urchin.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,usertrust.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,v.gd,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,v2ex.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,vimeo.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,vimeocdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,vine.co,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,vivaldi.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,vox-cdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,vsco.co,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,vultr.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,w.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,w3schools.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,webtype.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wikiwand.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wikileaks.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wikimedia.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wikipedia.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wikipedia.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,windows.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,windows.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wire.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wordpress.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,workflowy.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wp.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wsj.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wsj.net,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xda-developers.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xeeno.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xiti.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,yahoo.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,yimg.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ying.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,yoyo.org,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ytimg.com,Proxy</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 最终规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,CN,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">MATCH,PROXY</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开Mixin选项</p>
</li>
<li><p>关闭System Proxy选项</p>
</li>
<li><p>系统中会多一个名称为Clash的虚拟网卡，网络流量走这个网卡</p>
</li>
</ol>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>clash</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 基础笔记</title>
    <url>/2021/08/08/python-basic/</url>
    <content><![CDATA[<h3 id="Python-Crash-Course-2nd"><a href="#Python-Crash-Course-2nd" class="headerlink" title="Python Crash Course 2nd"></a>Python Crash Course 2nd</h3><p>基于Python 3.7</p>
<p>python之禅 <code>import this</code></p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以使用<code>&quot;&quot;</code>或<code>&#39;&#39;</code>，所以在子串中可以嵌套子串例如</p>
<p>‘Messi is the “VIP” winner’。对于字符串还是统一使用<code>&quot;&quot;</code>来表示，因为有些句子中有<code>&#39;s</code>会导致字串匹配错误。</p>
<h5 id="格式化子串"><a href="#格式化子串" class="headerlink" title="格式化子串"></a>格式化子串</h5><p>python 3.6支持<strong>f</strong>开始的字串格式化语法，与以前的<code>full_name = &quot;{} {}&quot;.format(first_name, last_name)</code>等价</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = <span class="string">"ada"</span></span><br><span class="line">last_name = <span class="string">"lovelace"</span></span><br><span class="line">full_name = <span class="string">f"<span class="subst">&#123;first_name.title()&#125;</span> <span class="subst">&#123;last_name.title()&#125;</span>"</span></span><br></pre></td></tr></table></figure>

<h5 id="空白符操作"><a href="#空白符操作" class="headerlink" title="空白符操作"></a>空白符操作</h5><p><code>&quot;Languages:\n\tPython\n\tC\n\tJavaScript&quot;</code>在一句字串中增加换行或tab</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_language.rstrip() <span class="comment"># 去掉右侧空白</span></span><br><span class="line">favorite_language.lstrip()</span><br><span class="line">favorite_language.strip()  <span class="comment"># 去掉两侧空白</span></span><br></pre></td></tr></table></figure>

<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>指数运算 <code>3**2</code> 的值为9</p>
<p>Python在所有需要用到float的地方都会自动转换为float，例如两个整数相除得到的是float</p>
<p>可以在数字间以下划线连接，例如<code>1_000</code>，和1000是等价的。(3.6+)</p>
<p>多个变量同时赋值 <code>x, y, z = 0, 0, 0</code></p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>动态数组，使用[]表示</p>
<p>可以使用负数索引倒序获取列表中的值，例如mylist[-1]，表示获取倒数第一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = []</span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">'ducati'</span> <span class="comment"># 修改一个元素</span></span><br><span class="line">motorcycles.append(<span class="string">'ducati'</span>) <span class="comment">#添加一个元素</span></span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">'ducati'</span>) <span class="comment">#插入一个元素</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]  <span class="comment">#删除一个元素</span></span><br><span class="line">popped_motorcycle = motorcycles.pop() <span class="comment">#弹出最后一个元素，并将这个元素赋值给变量</span></span><br><span class="line">first_owned = motorcycles.pop(<span class="number">0</span>)  <span class="comment"># 弹出指定位置的一个元素</span></span><br><span class="line">motorcycles.remove(<span class="string">'ducati'</span>)  <span class="comment"># 按值删除第一个元素</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort() <span class="comment"># 对一个列表升序排序</span></span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>) <span class="comment"># 逆序排序</span></span><br><span class="line">sorted(cars) <span class="comment">#对于一个排序，并不改变原来列表的顺序，而是返回一个临时列表</span></span><br><span class="line">cars.reverse() <span class="comment"># 反转列表中所有元素的顺序</span></span><br><span class="line">len(cars) <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历一个列表</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_of_items:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 数字序列</span></span><br><span class="line">range(<span class="number">5</span>)  <span class="comment"># 0-4  </span></span><br><span class="line">range(<span class="number">1</span>, <span class="number">5</span>) <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">range(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>) <span class="comment"># 从2开始，步长为2，到11结束，不包括11</span></span><br><span class="line">even_numbers = list(range(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>)) <span class="comment"># 序列转列表</span></span><br><span class="line"></span><br><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">min(digits) <span class="comment"># 最小元素</span></span><br><span class="line">max(digits) <span class="comment"># 最大元素</span></span><br><span class="line">sum(digits) <span class="comment"># 元素求和 45</span></span><br></pre></td></tr></table></figure>

<h5 id="list-comprehension"><a href="#list-comprehension" class="headerlink" title="list comprehension"></a>list comprehension</h5><p>通过一个列表表达式生成一个列表</p>
<p><code>squares = [value**2 for value in range(1, 11)]</code>得到</p>
<p><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code></p>
<h5 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players[<span class="number">1</span>:<span class="number">4</span>] <span class="comment"># 获取player列表的1，2，3这3个元素的子集</span></span><br><span class="line">players[:<span class="number">4</span>] <span class="comment"># 从0开始的元素子集</span></span><br><span class="line">players[<span class="number">2</span>:] <span class="comment"># 从2开始到结束的元素子集</span></span><br><span class="line">players[<span class="number">-3</span>:] <span class="comment"># 最后3个元素的子集</span></span><br><span class="line">mylist = list(range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">print(mylist[<span class="number">1</span>:<span class="number">8</span>:<span class="number">3</span>]) <span class="comment"># 第三个参数为步长，[2, 5, 8]</span></span><br><span class="line">friend_foods = my_foods[:] <span class="comment"># 拷贝一个新列表，不能用friend_foods = my_foods，这样只是指向同一个列表的另一个别名</span></span><br></pre></td></tr></table></figure>

<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>不可变<strong>immutable</strong> 的列表，<code>dimensions = (200, 50)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_t = (<span class="number">3</span>,)  <span class="comment"># 定义只有一个元素的元组需要多加一个，号</span></span><br></pre></td></tr></table></figure>

<h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><h5 id="boolean表达式"><a href="#boolean表达式" class="headerlink" title="boolean表达式"></a>boolean表达式</h5><p>关键字 <strong>True</strong>   <strong>False</strong></p>
<p>逻辑与 <code>and</code>  <code>(age_0 &gt;= 21) and (age_1 &gt;= 21)</code></p>
<p>逻辑或 <code>or</code> <code>age_0 &gt;= 21 or age_1 &gt;= 21</code></p>
<p>列表中有某一个元素 <code>&#39;mushrooms&#39; in requested_toppings</code></p>
<p>列表中没有某一个元素 <code>&#39;mushrooms&#39; not in requested_toppings</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">elif</span> b <span class="keyword">in</span> words:</span><br><span class="line">    print(b)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"xxx"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用if可以直接判断一个list是否为空</span></span><br><span class="line">requested_toppings = []</span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    print(requested_toppings[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Empty list"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h4><p>Python Enhancement Proposal (PEP)  </p>
<p>PEP 8  说明了编码规范 <a href="https://python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">https://python.org/dev/peps/pep-0008/</a>  </p>
<p>变量一般小写和下划线组成</p>
<p>常量全大写</p>
<p>indent使用空格，不用tab</p>
<p>不要写多余的indent，否则可能出现非预期的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">	print(<span class="string">f"<span class="subst">&#123;magician.title()&#125;</span>, that was a great trick!"</span>)</span><br><span class="line">	</span><br><span class="line">	print(<span class="string">"Thank you everyone!"</span>) <span class="comment"># 这一行也会被每次循环输出</span></span><br></pre></td></tr></table></figure>

<p>操作符前后各加一个空格<code>a == b</code></p>
<h4 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h4><p><a href="https://djangoproject.com/" target="_blank" rel="noopener">https://djangoproject.com/</a>  </p>
<p><strong>开始一个项目之前，一定要写一个项目描述书，包括项目的具体目标，功能，用户交互流程和界面。这样可以保障项目不会偏离，从而正常完成。</strong></p>
<p>本书中的例子是建立一个学习日志的管理系统</p>
<h5 id="设置开发环境"><a href="#设置开发环境" class="headerlink" title="设置开发环境"></a>设置开发环境</h5><ul>
<li>配置一个独立的Python虚拟环境</li>
</ul>
<p><code>python -m venv py38</code> 会在当前目录下创建一个名为py38的目录，其中是独立的一个python运行环境</p>
<ul>
<li><p>激活一个虚拟环境</p>
<ul>
<li>windows <code>py38\Scripts\Activate</code>  </li>
<li>Linux <code>source py38/bin/activate</code></li>
</ul>
</li>
<li><p>安装Django程序库<code>pip install Django</code></p>
</li>
</ul>
<h5 id="Django工程"><a href="#Django工程" class="headerlink" title="Django工程"></a>Django工程</h5><ol>
<li>新建一个目录djangoweb，在虚拟环境的终端中，进入这个用来放置工程的目录</li>
<li><code>(py38) E:\djangoweb&gt;django-admin startproject demo .</code>在当前目录下新建一个名为demo的工程，注意当前目录的<code>.</code>一定要有。</li>
<li>此时会有一个demo工程目录和一个<code>manage.py</code>文件在当前目录下</li>
<li>创建数据库 在当前目录下执行<code>(py38) E:\djangoweb&gt;python manage.py migrate</code></li>
<li>测试服务<code>python manage.py runserver 8000</code></li>
</ol>
<p>manager.py：用来处理管理工程的各种命令，例如迁移数据库，运行服务等</p>
<p>settings.py：django如何与系统交互和管理工程</p>
<p>urls.py：处理URL请求的转发</p>
<p>wsgi.py：web server gateway interfae 用来服务Django创建的文件</p>
<ul>
<li>修改数据库这里都称作migrating the database. 第一次执行migrate命令让django确保数据库和当前工程的状态是匹配的，同时django还会创建一个SQLite数据库文件。</li>
</ul>
<h5 id="app应用"><a href="#app应用" class="headerlink" title="app应用"></a>app应用</h5><p>一个Django工程由多个独立的app组成。</p>
<p>重新打开一个虚拟环境终端，切换到工程目录下即manage.py所在的目录，执行</p>
<p><code>python manage.py startapp demoapp</code> 创建一个名称为demoapp的应用。系统会创建这个应用使用的model/view/admin.py文件。</p>
<p>在demo工程目录下settings.py中管理了当前所有应用，在其中可以启用我们自定义的应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'demoapp'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>自己的app要写在系统默认app之前，可以让自己的app的功能覆盖默认的app的功能。</p>
<h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><p>模型表示数据抽象，和数据库中的一个表对应，例如一本书，它有书名和作者。</p>
<p>一个应用目录中的models.py定义了这个应用的模型。</p>
<h6 id="增加模型"><a href="#增加模型" class="headerlink" title="增加模型"></a>增加模型</h6><p>需要在models.py中定义模型的类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""A topic"""</span></span><br><span class="line">    <span class="comment"># 少量文字的字段使用CharField，长度限制为200个字符</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 使用当前时间作为添加一个Topic的添加时间</span></span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">	<span class="comment"># 这个模型显示时的文字描述信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return a string representation of the mdoel."""</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""Something specific learned about a topic"""</span></span><br><span class="line">    <span class="comment"># 定义一个外键和Topic关联，删除一个Topic时，关联的所有Entry也级联删除</span></span><br><span class="line">    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 额外的一些信息用来管理一个模型</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment">#告诉Django使用entries来表示多个Entry，如果没有定义这个Django会默认使用Entrys</span></span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="string">"""Return a string representation of the model"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.text[:<span class="number">50</span>]&#125;</span>..."</span></span><br></pre></td></tr></table></figure>

<p>这里Topic和Entry作为模型，分别对应了两个数据库表，其中一个Topic和多个Entry关联</p>
<h6 id="更新模型"><a href="#更新模型" class="headerlink" title="更新模型"></a>更新模型</h6><p>只要对模型有所修改，即数据表有更改，都需要让Django更新数据表，并进行同步数据库文件。依次执行以下两步：</p>
<ol>
<li><code>python manage.py makemigrations demoapp</code> 会生成类似<code>demoapp\migrations\0001_initial.py</code>文件，其中是数据表创建的实现代码</li>
<li><code>python manage.py migrate</code>按照数据表的创建代码，更新工程实际的数据库，创建模型对应的数据表</li>
</ol>
<h5 id="Django-管理站点"><a href="#Django-管理站点" class="headerlink" title="Django  管理站点"></a>Django  管理站点</h5><p>自动生成的管理员站点，可以管理工程的数据表。需要先创建一个管理员帐号</p>
<p><code>python manage.py createsuperuser</code>执行后，会提示输入用户名和密码，而且密码还有长度要求，但是我输入了123虽然不安全，还是可以继续执行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(py38) E:\code\python\djangoweb&gt;python manage.py createsuperuser</span><br><span class="line">Username (leave blank to use 'edison'):</span><br><span class="line">Email address:</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Error: Blank passwords aren't allowed.</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">This password is too short. It must contain at least 8 characters.</span><br><span class="line">This password is too common.</span><br><span class="line">This password is entirely numeric.</span><br><span class="line">Bypass password validation and create user anyway? [y/N]: y</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure>

<p>打开 <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a> 使用用户名和密码登录后，就可以看到管理页面，默认会有users和groups两个表. 在这个界面可以直接修改数据表的数据</p>
<h6 id="添加模型到管理站点"><a href="#添加模型到管理站点" class="headerlink" title="添加模型到管理站点"></a>添加模型到管理站点</h6><p>在应用的admin.py中增加自己定义的模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前目录下model模块的Topic和Entry模型</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic, Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure>

<h5 id="URL映射"><a href="#URL映射" class="headerlink" title="URL映射"></a>URL映射</h5><p>用户访问的url地址通过映射表转给对应的view处理。可以给每个app单独设置一个url映射表。</p>
<p>如果出现<code>ModuleNotFoundError: No module named</code>的错误提示，需要把服务器重新启动一下。</p>
<p>在主工程目录的urls.py中增加app的urls的映射</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.urls.conf <span class="keyword">import</span> include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">	<span class="comment"># demoapp应用的urls映射，第一个为空，说明从根路径转换</span></span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'demoapp.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在demoapp的目录中新增一个urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""Defines URL patterns for demoapp."""</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path <span class="comment"># 映射url到views需要用到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'demoapp'</span>  <span class="comment"># Django用来区分同一个工程不同应用的urls.py的文件</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># Home page，第一个参数匹配url相对路径，第二个参数指定调用views.py中的函数，第三个参数给这个url地址起了名字，以便其他地方的代码可以转到这个地址，这样不用写完整的url地址</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h5 id="view视图"><a href="#view视图" class="headerlink" title="view视图"></a>view视图</h5><p>一个视图函数获取request中的参数信息，处理数据后，将产生的数据发送回浏览器。通常结合模板，将一个页面发送给浏览器。</p>
<p>实现views.py中的index函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""The home page for Demo App."""</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'demoapp/index.html'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="Template模板"><a href="#Template模板" class="headerlink" title="Template模板"></a>Template模板</h5><p>模板定义了页面的显示方式，Django把数据填入模板对应的代码片段中。</p>
<p>在demoapp中创建以下目录并创建<code>index.html</code>文件<code>template/demoapp/index.html</code>这样和view中函数的相对路径保持一致。</p>
<h6 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h6><p>对于每个页面都有的元素，可以通过定义一个父模板，其中实现通用的界面显示部分，在子模板中继承父模板即可。</p>
<ul>
<li>定义一个父模板<code>base.html</code> 其中<code>xxx</code>是为了解决Hexo的nunjunks erro，实际代码不需要</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123; % url 'demoapp:index' % &#125;"</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">// 定义了一个名为content的block，用来给子模板占位</span><br><span class="line">&#123; % block content % &#125; &#123; % endblock content % &#125;</span><br></pre></td></tr></table></figure>

<p>``{% %}<code>定义了一个</code>Template tag`.这个代码片段用来生成显示在页面上的信息。</p>
<p><code> {% url 'demoapp:index' %} </code>生成一个URL与<code>demoapp/urls.py</code>中的名称为index的url映射匹配，其中的demoapp就是urls.py中定义的<strong>app_name</strong></p>
<ul>
<li>定义子模板index.html</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123; % extends "demoapp/base.html" % &#125;</span><br><span class="line"></span><br><span class="line">&#123; % block content % &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you're</span><br><span class="line">    learning about.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123; % endblock content % &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Qemu下模拟ARM64搭建GDB Server调试环境</title>
    <url>/2019/06/22/qemu-aarch64-gdbserver/</url>
    <content><![CDATA[<p>OS： ubuntu 18.04 LTS x64</p>
<h3 id="Qemu"><a href="#Qemu" class="headerlink" title="Qemu"></a>Qemu</h3><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p>需要模拟arm64平台，所以要安装aarch64版本<br><code>sudo apt-get install qemu-system-aarch64</code></p>
<h3 id="Cross-compile"><a href="#Cross-compile" class="headerlink" title="Cross-compile"></a>Cross-compile</h3><p>安装交叉编译工具链，需要把一些依赖的其他库安装好</p>
<p><code>sudo apt-get install flex bison build-essential pkg-config libglib2.0-dev libpixman-1-dev libssl-dev</code></p>
<p>这里不使用系统仓库自带的<code>gcc-aarch64-linux-gnu</code>，仓库里面的gcc版本不好调整为自己需要的，所以直接下载<a href="http://releases.linaro.org/components/toolchain/binaries/7.4-2019.02/" target="_blank" rel="noopener">Linaro网站</a>的.</p>
<p>Linaro网站提供了多个平台的交叉编译工具，也一直有更新，ubuntu 64位的系统选择<code>x86_64_aarch64-linux-gnu</code>版本，我用的是<br><code>gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu</code></p>
<p>下载到开发目录arm下后，解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> arm</span><br><span class="line">$ tar -xvf gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="Busy-Box"><a href="#Busy-Box" class="headerlink" title="Busy Box"></a>Busy Box</h3><p>下载busybox代码也到arm目录下，解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> arm</span><br><span class="line">$ tar -xvf busybox-1.23.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>进入busybox根目录，先配置当前的环境变量为arm64</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> ARCH=arm64</span><br><span class="line">$ <span class="built_in">export</span> CROSS_COMPILE=/home/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-</span><br></pre></td></tr></table></figure>

<p>执行<code>make menuconfig</code>打开编译配置菜单，其中做以下配置</p>
<ul>
<li>勾选静态编译 <code>Settings-&gt;Build static binary (no shared lib)</code></li>
<li>指定交叉编译器为：<code>/home/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-</code></li>
<li>General Configuration –&gt; Dont use /usr</li>
<li>Busybox Libary Tuning–&gt; 勾选：[*]Username completion、[*]Fancy shell prompts 、[*]Query  cursor  position  from  terminal </li>
</ul>
<p>保存配置后，会更新<code>.config</code>编译配置文件，可以打开确认编译信息的正确性</p>
<p>开始编译<code>make -j4</code></p>
<p>最后执行<code>make install</code>在busybox根目录生成<code>_install</code>目录</p>
<h3 id="Linux-kernel"><a href="#Linux-kernel" class="headerlink" title="Linux kernel"></a>Linux kernel</h3><h4 id="Linux-Kernel下载"><a href="#Linux-Kernel下载" class="headerlink" title="Linux Kernel下载"></a>Linux Kernel下载</h4><p><a href="https://www.kernel.org/" target="_blank" rel="noopener">Kernel官网</a>下载4.9.11版本的内核，不能下载太旧的版本，例如3.19和最新的gcc7.4不兼容，编译总是失败，提示COMPILE版本的错误信息。最好选择长期支持的版本，这样功能更稳定一些。</p>
<p>解压内核后配置环境变量后，可以对内核进行配置</p>
<p>在执行<code>make menuconfig</code>时会遇到</p>
<blockquote>
<p>In file included from scripts/kconfig/mconf.c:23:0:<br>scripts/kconfig/lxdialog/dialog.h:38:20: fatal error: curses.h: No such file or directory<br> include CURSES_LOC<br>compilation terminated.<br>make[1]: <strong>* [scripts/kconfig/mconf.o] Error 1<br>make: *</strong> [menuconfig] Error 2</p>
</blockquote>
<p>此时需要安装<strong>ncurses devel</strong> <code>sudo apt-get install libncurses5-dev</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf linux-4.19.11.tar</span><br><span class="line"><span class="built_in">cd</span> linux-4.19.11</span><br><span class="line"><span class="comment"># 配置环境变量为arm64</span></span><br><span class="line"><span class="built_in">export</span> ARCH=arm64</span><br><span class="line"><span class="comment"># 配置交叉工具链</span></span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=/home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-</span><br><span class="line"><span class="comment"># 根据当前的环境变量的arch类型，到内核的arch目录中把arch/arm64/configs/中的配置作为模板</span></span><br><span class="line">make defconfig</span><br><span class="line"><span class="comment"># 打开配置菜单界面，此时配置菜单中可以看到当前的目标类型和工具链类型</span></span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<h4 id="配置Kernel"><a href="#配置Kernel" class="headerlink" title="配置Kernel"></a>配置Kernel</h4><p>根据需要把支持的设备勾选，不想支持的就不要勾选，否则编译时间太长.可以第一次多裁减一些，如果需要，后面在配置增加功能，把每一次修改的<code>.config</code>文件版本管理起来</p>
<p>Platform Selection只选择<code>ARMv8 based Freescale Layerscape SoC family</code>和<code>ARMv8 software model (Versatile Express)</code></p>
<p>Device Driver中普通程序不要支持的也可删除</p>
<p>因为要通过内存镜像启动内核，还需要配置使用内存文件系统</p>
<p><code>General setup-&gt;Initial RAM filesystem and RAM disk (initramfs/initrd) support</code></p>
<p><code>Device Drivers-&gt;Block devices-&gt;&lt;*&gt; RAM block device support</code>，其中配置1个block<code>(1)     Default number of RAM disks</code>内存大小为128M<code>(131072) Default RAM disk size (kbytes)</code></p>
<p>如果需要调试内核，需要打开调试信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kernel hacking--&gt;</span><br><span class="line">    [*]compile the kernel with debug info</span><br></pre></td></tr></table></figure>

<p>配置完成后，执行<code>make -j12</code> 开始编译内核，时间需要1个多小时</p>
<h3 id="Run-kernel"><a href="#Run-kernel" class="headerlink" title="Run kernel"></a>Run kernel</h3><h4 id="创建根文件系统"><a href="#创建根文件系统" class="headerlink" title="创建根文件系统"></a>创建根文件系统</h4><p>在编译内核的过程中，可以准备内核启动的根文件系统，这里参考了<a href="https://www.cnblogs.com/pengdonglin137/p/6431234.html" target="_blank" rel="noopener">摩斯电码</a>的脚本文件，做了简单修改</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sudo rm -rf rootfs</span><br><span class="line">sudo rm -rf tmpfs</span><br><span class="line">sudo rm -rf ramdisk*</span><br><span class="line"><span class="comment"># 创建根文件系统目录</span></span><br><span class="line">sudo mkdir rootfs</span><br><span class="line"><span class="comment"># 把busybox拷贝到这里 _install 里面就2个目录和1个文件`bin\  linuxrc  sbin\`</span></span><br><span class="line">sudo cp ../busybox-1.23.1/_install/*  rootfs/ -raf</span><br><span class="line"><span class="comment"># 初始化根目录结构</span></span><br><span class="line">sudo mkdir -p rootfs/proc/</span><br><span class="line">sudo mkdir -p rootfs/sys/</span><br><span class="line">sudo mkdir -p rootfs/tmp/</span><br><span class="line">sudo mkdir -p rootfs/root/</span><br><span class="line">sudo mkdir -p rootfs/var/</span><br><span class="line">sudo mkdir -p rootfs/mnt/</span><br><span class="line"><span class="comment"># 系统配置目录</span></span><br><span class="line">sudo cp etc rootfs/ -arf</span><br><span class="line"><span class="comment"># 公共库目录</span></span><br><span class="line">sudo mkdir -p rootfs/lib</span><br><span class="line"><span class="comment"># 后续编译程序也要依赖同样的库文件</span></span><br><span class="line">sudo cp -arf ../gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/lib/* rootfs/lib/</span><br><span class="line"><span class="comment"># 删除静态库，文件太大</span></span><br><span class="line">sudo rm rootfs/lib/*.a</span><br><span class="line"><span class="comment"># strip减小so体积</span></span><br><span class="line">sudo ../gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-strip rootfs/lib/*</span><br><span class="line"><span class="comment"># 初始化的设备</span></span><br><span class="line">sudo mkdir -p rootfs/dev/</span><br><span class="line">sudo mknod rootfs/dev/tty1 c 4 1</span><br><span class="line">sudo mknod rootfs/dev/tty2 c 4 2</span><br><span class="line">sudo mknod rootfs/dev/tty3 c 4 3</span><br><span class="line">sudo mknod rootfs/dev/tty4 c 4 4</span><br><span class="line">sudo mknod rootfs/dev/console c 5 1</span><br><span class="line">sudo mknod rootfs/dev/null c 1 3</span><br><span class="line"><span class="comment"># dd Copy a file, converting and formatting according to the operands.</span></span><br><span class="line"><span class="comment"># if 输入文件 /dev/zero 表示一个尽量满足需要的无限大的文件，且文件内容都初始化为0</span></span><br><span class="line"><span class="comment"># of 输出文件 bs : block size  count : num of blocks</span></span><br><span class="line"><span class="comment"># 这里的块数量需要根据rootfs目录文件大小调整，目前我的是57M</span></span><br><span class="line">sudo dd <span class="keyword">if</span>=/dev/zero of=ramdisk bs=1M count=64</span><br><span class="line"><span class="comment"># mkfs.ext4 will create a file system for use with ext4</span></span><br><span class="line">sudo mkfs.ext4 -F ramdisk</span><br><span class="line"></span><br><span class="line">sudo mkdir -p tmpfs</span><br><span class="line"><span class="comment"># -t : fs type -o : option loop : loop device</span></span><br><span class="line"><span class="comment"># 把文件系统镜像文件挂载到一个loop device上，从而可以把roofs的文件拷贝进去</span></span><br><span class="line">sudo mount -t ext4 ramdisk ./tmpfs/ -o loop</span><br><span class="line"></span><br><span class="line">sudo cp -raf rootfs/*  tmpfs/</span><br><span class="line">sudo umount tmpfs</span><br><span class="line"></span><br><span class="line">sudo gzip --best -c ramdisk &gt; ramdisk.gz</span><br><span class="line"><span class="comment"># 创建镜像文件</span></span><br><span class="line">sudo mkimage -n <span class="string">"ramdisk"</span> -A arm64 -O linux -T ramdisk -C gzip -d ramdisk.gz ramdisk.img</span><br></pre></td></tr></table></figure>

<p>The <strong>loop  device</strong> is a block device that maps its data blocks not to a<br>physical device such as a hard disk or optical disk drive, but  to  the<br>blocks  of  a  regular file in a filesystem or to another block device. This can be useful for example to provide a block device for a filesystem image stored in a file, so that it can be mounted with the mount(8)<br>command</p>
<p>其中etc目录结构如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">etc</span><br><span class="line">├── init.d   <span class="comment">#初始脚本目录</span></span><br><span class="line">|   └── rcS  <span class="comment">#启动时默认执行脚本</span></span><br><span class="line">├── sysconfig  </span><br><span class="line">|   └── HOSTNAME  <span class="comment">#登陆后的主机名保存在这里</span></span><br><span class="line">├── fstab      <span class="comment"># fs mount</span></span><br><span class="line">├── inittab    <span class="comment"># init</span></span><br><span class="line">└── profile    <span class="comment"># shell环境变量</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>/etc/init.d/rcS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">runlevel=S</span><br><span class="line">prevlevel=N</span><br><span class="line"><span class="built_in">umask</span> 022</span><br><span class="line"><span class="built_in">export</span> PATH runlevel prevlevel</span><br><span class="line"></span><br><span class="line">mount -a</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line"><span class="comment">#mount -n -t usbfs none /proc/bus/usb</span></span><br><span class="line"><span class="built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">mdev -s</span><br><span class="line">mkdir -p /var/lock</span><br><span class="line"></span><br><span class="line">ifconfig lo 127.0.0.1</span><br><span class="line">ifconfig eth0 192.168.43.202 netmask 255.255.255.0 broadcast 192.168.43.255</span><br><span class="line"></span><br><span class="line">/bin/hostname -F /etc/sysconfig/HOSTNAME</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/sysconfig/HOSTNAME</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aarch64</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/fstab</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#device		mount-point	type	options		dump	fsck order</span></span><br><span class="line">proc		/proc		proc	defaults		0	0</span><br><span class="line">tmpfs		/tmp		tmpfs	defaults		0	0</span><br><span class="line">sysfs		/sys		sysfs	defaults		0	0</span><br><span class="line">tmpfs		/dev		tmpfs	defaults		0	0</span><br><span class="line">var		    /dev		tmpfs	defaults		0	0</span><br><span class="line">ramfs		/dev		ramfs	defaults		0	0</span><br><span class="line">debugfs		/sys/kernel/debug	debugfs		defaults	0	0</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/inittab</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/inittab</span></span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">console::askfirst:-/bin/sh</span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br><span class="line">::restart:/sbin/init</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/profile</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">USER=<span class="string">"root"</span></span><br><span class="line">LOGNAME=<span class="variable">$USER</span></span><br><span class="line"><span class="built_in">export</span> HOSTNAME=`/bin/hostname`</span><br><span class="line"><span class="built_in">export</span> USER=root</span><br><span class="line"><span class="built_in">export</span> HOME=/root</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">"[<span class="variable">$USER</span>@<span class="variable">$HOSTNAME</span> \W]\# "</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line">LD_LIBRARY_PATH=/lib:/usr/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>对于生成的image文件可以通过<code>mkimage -l ramdisk.img</code>查看文件信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Image Name:   ramdisk</span><br><span class="line">Created:      Sun Jun 23 21:18:57 2019</span><br><span class="line">Image Type:   AArch64 Linux RAMDisk Image (gzip compressed)</span><br><span class="line">Data Size:    15885428 Bytes = 15513.11 kB = 15.15 MB</span><br><span class="line">Load Address: 00000000</span><br><span class="line">Entry Point:  00000000</span><br></pre></td></tr></table></figure>

<h4 id="使用Qemu运行"><a href="#使用Qemu运行" class="headerlink" title="使用Qemu运行"></a>使用Qemu运行</h4><ul>
<li>run.sh<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 \</span><br><span class="line">    -M  virt \</span><br><span class="line">    -cpu cortex-a53 \</span><br><span class="line">    -smp 2 \</span><br><span class="line">    -m 1024M \</span><br><span class="line">    -kernel ./linux-4.19.11/arch/arm64/boot/Image \</span><br><span class="line">    -nographic \</span><br><span class="line">    -append <span class="string">"root=/dev/ram0 rw rootfstype=ext4 console=ttyAMA0 init=/linuxrc ignore_loglevel"</span> \</span><br><span class="line">    -initrd ./rootfs/ramdisk.img \</span><br><span class="line">    -netdev tap,helper=/usr/lib/qemu/qemu-bridge-helper,id=hn0 -device virtio-net-pci,netdev=hn0,id=nic1 \</span><br><span class="line">    -fsdev <span class="built_in">local</span>,security_model=passthrough,id=fsdev0,path=/home/edison/develop/arm/nfsroot \</span><br><span class="line">    -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="共享目录"><a href="#共享目录" class="headerlink" title="共享目录"></a>共享目录</h3><p>使用9p共享目录，内核在编译时默认是支持的<br>新建目录<br><code>mkdir nfsroot</code></p>
<p>启动时这两个选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-fsdev local,security_model=passthrough,id=fsdev0,path=/home/edison/arm/nfsroot \</span><br><span class="line">-device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare</span><br></pre></td></tr></table></figure>

<p>指明了共享目录的位置</p>
<p>在内核启动起来之后，把共享目录挂载上来，就可以看到文件了<br>也可以把这个mount添加到内核启动程序中，不用每次都执行一遍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@aarch64 ]# mount -t 9p -o trans=virtio,version=9p2000.L hostshare /mnt</span><br><span class="line">[root@aarch64 ]# ls /mnt/</span><br><span class="line">code</span><br></pre></td></tr></table></figure>

<h3 id="Network-with-Qemu"><a href="#Network-with-Qemu" class="headerlink" title="Network with Qemu"></a>Network with Qemu</h3><p>使用网桥方式，可以让qemu和host主机之间直接进行网络通信</p>
<ol>
<li>安装网桥工具<br><code>sudo apt install bridge-utils</code> 和 <code>sudo apt install uml-utilities</code></li>
<li>新建一个网桥 <code>sudo brctl addbr br0</code> 网桥会在重启后消失</li>
<li>启用此网桥 <code>sudo ip link set br0 up</code> </li>
<li>确认<code>/etc/qemu/bridge.conf</code>中<code>allow br0</code></li>
<li>给帮助程序权限<code>sudo chmod u+s /usr/lib/qemu/qemu-bridge-helper</code></li>
<li>qemu 启动时增加<code>-netdev tap,helper=/usr/lib/qemu/qemu-bridge-helper,id=hn0 -device virtio-net-pci,netdev=hn0,id=nic1</code></li>
<li>qemu 启动后会自动在host主机上新建一个tap0的网卡</li>
<li>使用<code>brctl show</code>查看br0和tap0已经关联上了</li>
<li>把host主机的一个网卡也和br0关联起来，主机wifi的网卡由于是dhcp获取的ip，无法与br0绑定，需要使用有线网卡绑定<code>sudo brctl addif br0 enp5s0</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bridge name	bridge id		STP enabled	interfaces</span><br><span class="line">br0		8000.3860773ac46e	no		enp5s0</span><br><span class="line">							tap0</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>host设置各个网卡和网桥的ip，<strong>此处需要注意先设置br0的ip和tap0的ip，再设置host网卡的ip，否则guest里面无法ping外部主机的ip，最终使br0的mac和tap0的mac地址相同</strong>，具体原因还没来及查<br><code>sudo ifconfig br0 192.168.43.210 netmask 255.255.255.0</code><br><code>sudo ifconfig tap0 192.168.43.51 netmask 255.255.255.0</code><br><code>sudo ifconfig enp5s0 192.168.43.50 netmask 255.255.255.0</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.43.210  netmask 255.255.255.0  broadcast 192.168.43.255</span><br><span class="line">        inet6 fe80::1429:b3ff:fe07:5f92  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether fe:16:30:37:22:4f  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.43.51  netmask 255.255.255.0  broadcast 192.168.43.255</span><br><span class="line">        inet6 fe80::fc16:30ff:fe37:224f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether fe:16:30:37:22:4f  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">enp5s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.43.50  netmask 255.255.255.0  broadcast 192.168.43.255</span><br><span class="line">        ether 38:xx:xx:xx:xx:xx  txqueuelen 1000  (Ethernet)</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>guest设置eth0的ip 与br0的ip在一个网段内 例如 192.168.43.202</li>
</ol>
<p><code>qemu-bridge-helper</code>使用<code>/etc/qemu-ifup</code>和<code>/etc/qemu-ifdown</code>来控制虚拟虚拟机网卡tap0启动</p>
<ul>
<li>如果想使用其他定义的网桥, <code>/etc/qemu/bridge.conf</code>中添加<code>allow qemubr0</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qemu linux.img </span><br><span class="line">-netdev tap,helper=&quot;/usr/local/libexec/qemu-bridge-helper --br=qemubr0&quot;,id=hn0 -device virtio-net-pci,netdev=hn0,id=nic1</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Gdbserver"><a href="#Gdbserver" class="headerlink" title="Gdbserver"></a>Gdbserver</h3><p>到GDB网站下载gdb的源码，其中gdbserver在里面的子目录gdbserver中，进入gdbserver的源码目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/develop/arm/gdb-8.3/gdb/gdbserver</span><br><span class="line">$ <span class="built_in">export</span> CC=/home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc</span><br><span class="line">$ <span class="built_in">export</span> CXX=/home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-g++</span><br><span class="line"></span><br><span class="line">$ ./configure --target=aarch64-linux-gnu --host=aarch64-linux-gnu</span><br></pre></td></tr></table></figure>

<p>把编译出来的gdbserver放到共享目录</p>
<p>qemu 作为客户机执行</p>
<p><code>#./gdbserver 192.168.43.202:10000 all</code> </p>
<p>192.168.43.202 is guest ip address<br>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Process /mnt/code/all created; pid = 1066</span><br><span class="line">Listening on port 10000</span><br><span class="line">Remote debugging from host 192.168.43.210, port 51730</span><br></pre></td></tr></table></figure>

<p>主机host run:</p>
<p><code>/home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gdb all</code></p>
<p>in gdb console, connect to the guest gdbserver:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) target remote 192.168.43.202:10000</span><br><span class="line">Reading /lib/ld-linux-aarch64.so.1 from remote target...</span><br><span class="line">warning: File transfers from remote targets can be slow. Use <span class="string">"set sysroot"</span> to access files locally instead.</span><br><span class="line">Reading /lib/ld-linux-aarch64.so.1 from remote target...</span><br><span class="line">Reading symbols from target:/lib/ld-linux-aarch64.so.1...(no debugging symbols found)...<span class="keyword">done</span>.</span><br><span class="line">0x0000ffffbf6d3d00 <span class="keyword">in</span> ?? () from target:/lib/ld-linux-aarch64.so.1</span><br><span class="line"><span class="comment"># 设置一个目录，否则看不到库函数</span></span><br><span class="line">(gdb) <span class="built_in">set</span> sysroot /home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/</span><br><span class="line">warning: .dynamic section <span class="keyword">for</span> <span class="string">"/home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/lib/ld-linux-aarch64.so.1"</span> is not at the expected address (wrong library or version mismatch?)</span><br><span class="line">Reading symbols from /home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/lib/ld-linux-aarch64.so.1...done.</span><br><span class="line">Reading symbols from /home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/lib/ld-linux-aarch64.so.1...done.</span><br><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x4005f4: file main.cpp, line 7.</span><br><span class="line">(gdb) b func(int) </span><br><span class="line">Breakpoint 2 at 0x400630: file main.cpp, line 16.</span><br><span class="line">(gdb) r</span><br><span class="line">The <span class="string">"remote"</span> target does not support <span class="string">"run"</span>.  Try <span class="string">"help target"</span> or <span class="string">"continue"</span>.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at main.cpp:7</span><br><span class="line">7	  int i = 25;</span><br><span class="line">(gdb) list</span><br><span class="line">2	 </span><br><span class="line">3	int func(int i);</span><br><span class="line">4	 </span><br><span class="line">5	int main(void)</span><br><span class="line">6	&#123;</span><br><span class="line">7	  int i = 25;</span><br><span class="line">8	  int v = func(i);</span><br><span class="line">9	  <span class="built_in">printf</span>(<span class="string">"value is %d\n"</span>, v);</span><br><span class="line">10	  getchar();</span><br><span class="line">11	  <span class="built_in">return</span> 0;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, func (i=25) at main.cpp:16</span><br><span class="line">16	  int a = 2;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">[Inferior 1 (process 1066) exited normally]</span><br></pre></td></tr></table></figure>

<h4 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">25</span>;</span><br><span class="line">  <span class="keyword">int</span> v = func(i);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"value is %d\n"</span>, v);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> a * i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>简单的makefile<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># marcros</span></span><br><span class="line">CROSS_COMPILE := /home/edison/develop/arm/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-</span><br><span class="line"></span><br><span class="line">CC		:= <span class="variable">$(CROSS_COMPILE)</span>gcc</span><br><span class="line">LD		:= <span class="variable">$(CC)</span> -nostdlib</span><br><span class="line">CPP		:= <span class="variable">$(CC)</span> -E</span><br><span class="line"></span><br><span class="line">CCFLAGS := -Wall</span><br><span class="line">DBGFLAG := -g</span><br><span class="line">CCOBJFLAG := <span class="variable">$(CCFLAG)</span> -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path</span></span><br><span class="line"></span><br><span class="line">BIN_PATH := bin</span><br><span class="line">OBJ_PATH := obj</span><br><span class="line">SRC_PATH := src</span><br><span class="line">DBG_PATH := debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile </span></span><br><span class="line">TARGET_NAME := main</span><br><span class="line"></span><br><span class="line">TARGET := <span class="variable">$(BIN_PATH)</span>/<span class="variable">$(TARGET_NAME)</span></span><br><span class="line">TARGET_DEBUG := <span class="variable">$(DBG_PATH)</span>/<span class="variable">$(TARGET_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: main.o</span></span><br><span class="line">	<span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.cpp</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CCOBJFLAG)</span> <span class="variable">$(DBGFLAG)</span> <span class="variable">$^</span></span><br><span class="line">    </span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf *.o all</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="启动运行信息"><a href="#启动运行信息" class="headerlink" title="启动运行信息"></a>启动运行信息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034]</span><br><span class="line">[    0.000000] Linux version 4.19.11 (edison@aquarius) (gcc version 7.4.1 20181213 [linaro-7.4-2019.02 revision 56ec6f6b99cc167ff0c2f8e1a2eed33b1edc85d4] (Linaro GCC 7.4-2019.02)) <span class="comment">#3 SMP PREEMPT Sat Jun 15 12:02:57 CST 2019</span></span><br><span class="line">[    0.000000] Machine model: linux,dummy-virt</span><br><span class="line">[    0.000000] debug: ignoring loglevel setting.</span><br><span class="line">[    0.000000] efi: Getting EFI parameters from FDT:</span><br><span class="line">[    0.000000] efi: UEFI not found.</span><br><span class="line">[    0.000000] cma: Reserved 32 MiB at 0x000000007e000000</span><br><span class="line">[    0.000000] NUMA: No NUMA configuration found</span><br><span class="line">[    0.000000] NUMA: Faking a node at [mem 0x0000000000000000-0x000000007fffffff]</span><br><span class="line">[    0.000000] NUMA: NODE_DATA [mem 0x7dfea700-0x7dfebebf]</span><br><span class="line">[    0.000000] Zone ranges:</span><br><span class="line">[    0.000000]   DMA32    [mem 0x0000000040000000-0x000000007fffffff]</span><br><span class="line">[    0.000000]   Normal   empty</span><br><span class="line">[    0.000000] Movable zone start <span class="keyword">for</span> each node</span><br><span class="line">[    0.000000] Early memory node ranges</span><br><span class="line">[    0.000000]   node   0: [mem 0x0000000040000000-0x000000007fffffff]</span><br><span class="line">[    0.000000] Initmem setup node 0 [mem 0x0000000040000000-0x000000007fffffff]</span><br><span class="line">[    0.000000] On node 0 totalpages: 262144</span><br><span class="line">[    0.000000]   DMA32 zone: 4096 pages used <span class="keyword">for</span> memmap</span><br><span class="line">[    0.000000]   DMA32 zone: 0 pages reserved</span><br><span class="line">[    0.000000]   DMA32 zone: 262144 pages, LIFO batch:63</span><br><span class="line">[    0.000000] psci: probing <span class="keyword">for</span> conduit method from DT.</span><br><span class="line">[    0.000000] psci: PSCIv0.2 detected <span class="keyword">in</span> firmware.</span><br><span class="line">[    0.000000] psci: Using standard PSCI v0.2 <span class="keyword">function</span> IDs</span><br><span class="line">[    0.000000] psci: Trusted OS migration not required</span><br><span class="line">[    0.000000] random: get_random_bytes called from start_kernel+0xa8/0x418 with crng_init=0</span><br><span class="line">[    0.000000] percpu: Embedded 23 pages/cpu @(____ptrval____) s56984 r8192 d29032 u94208</span><br><span class="line">[    0.000000] pcpu-alloc: s56984 r8192 d29032 u94208 alloc=23*4096</span><br><span class="line">[    0.000000] pcpu-alloc: [0] 0 [0] 1 </span><br><span class="line">[    0.000000] Detected VIPT I-cache on CPU0</span><br><span class="line">[    0.000000] CPU features: enabling workaround <span class="keyword">for</span> ARM erratum 843419</span><br><span class="line">[    0.000000] CPU features: enabling workaround <span class="keyword">for</span> ARM erratum 845719</span><br><span class="line">[    0.000000] CPU features: detected: Kernel page table isolation (KPTI)</span><br><span class="line">[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 258048</span><br><span class="line">[    0.000000] Policy zone: DMA32</span><br><span class="line">[    0.000000] Kernel <span class="built_in">command</span> line: root=/dev/ram0 rw rootfstype=ext4 console=ttyAMA0 init=/linuxrc ignore_loglevel</span><br><span class="line">[    0.000000] Memory: 969596K/1048576K available (9020K kernel code, 610K rwdata, 3008K rodata, 768K init, 359K bss, 46212K reserved, 32768K cma-reserved)</span><br><span class="line">[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=2, Nodes=1</span><br><span class="line">[    0.000000] rcu: Preemptible hierarchical RCU implementation.</span><br><span class="line">[    0.000000] rcu: 	RCU restricting CPUs from NR_CPUS=64 to nr_cpu_ids=2.</span><br><span class="line">[    0.000000] 	Tasks RCU enabled.</span><br><span class="line">[    0.000000] rcu: Adjusting geometry <span class="keyword">for</span> rcu_fanout_leaf=16, nr_cpu_ids=2</span><br><span class="line">[    0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0</span><br><span class="line">[    0.000000] GICv2m: range[mem 0x08020000-0x08020fff], SPI[80:143]</span><br><span class="line">[    0.000000] arch_timer: cp15 timer(s) running at 62.50MHz (virt).</span><br><span class="line">[    0.000000] clocksource: arch_sys_counter: mask: 0xffffffffffffff max_cycles: 0x1cd42e208c, max_idle_ns: 881590405314 ns</span><br><span class="line">[    0.000185] sched_clock: 56 bits at 62MHz, resolution 16ns, wraps every 4398046511096ns</span><br><span class="line">[    0.007286] Console: colour dummy device 80x25</span><br><span class="line">[    0.009634] Calibrating delay loop (skipped), value calculated using timer frequency.. 125.00 BogoMIPS (lpj=250000)</span><br><span class="line">[    0.009828] pid_max: default: 32768 minimum: 301</span><br><span class="line">[    0.011320] Security Framework initialized</span><br><span class="line">[    0.013353] Dentry cache <span class="built_in">hash</span> table entries: 131072 (order: 8, 1048576 bytes)</span><br><span class="line">[    0.014631] Inode-cache <span class="built_in">hash</span> table entries: 65536 (order: 7, 524288 bytes)</span><br><span class="line">[    0.014987] Mount-cache <span class="built_in">hash</span> table entries: 2048 (order: 2, 16384 bytes)</span><br><span class="line">[    0.015139] Mountpoint-cache <span class="built_in">hash</span> table entries: 2048 (order: 2, 16384 bytes)</span><br><span class="line">[    0.072332] ASID allocator initialised with 32768 entries</span><br><span class="line">[    0.079862] rcu: Hierarchical SRCU implementation.</span><br><span class="line">[    0.102195] EFI services will not be available.</span><br><span class="line">[    0.111945] smp: Bringing up secondary CPUs ...</span><br><span class="line">[    0.150710] Detected VIPT I-cache on CPU1</span><br><span class="line">[    0.152735] CPU1: Booted secondary processor 0x0000000001 [0x410fd034]</span><br><span class="line">[    0.158057] smp: Brought up 1 node, 2 CPUs</span><br><span class="line">[    0.158170] SMP: Total of 2 processors activated.</span><br><span class="line">[    0.158288] CPU features: detected: 32-bit EL0 Support</span><br><span class="line">[    0.185724] CPU: All CPU(s) started at EL1</span><br><span class="line">[    0.186917] alternatives: patching kernel code</span><br><span class="line">[    0.205598] devtmpfs: initialized</span><br><span class="line">[    0.234248] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns</span><br><span class="line">[    0.234617] futex <span class="built_in">hash</span> table entries: 512 (order: 3, 32768 bytes)</span><br><span class="line">[    0.245880] pinctrl core: initialized pinctrl subsystem</span><br><span class="line">[    0.275845] DMI not present or invalid.</span><br><span class="line">[    0.285543] NET: Registered protocol family 16</span><br><span class="line">[    0.289290] audit: initializing netlink subsys (disabled)</span><br><span class="line">[    0.292277] audit: <span class="built_in">type</span>=2000 audit(0.252:1): state=initialized audit_enabled=0 res=1</span><br><span class="line">[    0.311872] cpuidle: using governor menu</span><br><span class="line">[    0.314254] vdso: 2 pages (1 code @ (____ptrval____), 1 data @ (____ptrval____))</span><br><span class="line">[    0.314476] hw-breakpoint: found 6 breakpoint and 4 watchpoint registers.</span><br><span class="line">[    0.325699] DMA: preallocated 256 KiB pool <span class="keyword">for</span> atomic allocations</span><br><span class="line">[    0.328282] Serial: AMBA PL011 UART driver</span><br><span class="line">[    0.401940] 9000000.pl011: ttyAMA0 at MMIO 0x9000000 (irq = 39, base_baud = 0) is a PL011 rev1</span><br><span class="line">[    0.433798] console [ttyAMA0] enabled</span><br><span class="line">[    0.727257] HugeTLB registered 2.00 MiB page size, pre-allocated 0 pages</span><br><span class="line">[    0.733955] cryptd: max_cpu_qlen <span class="built_in">set</span> to 1000</span><br><span class="line">[    0.744142] ACPI: Interpreter disabled.</span><br><span class="line">[    0.760164] vgaarb: loaded</span><br><span class="line">[    0.765256] SCSI subsystem initialized</span><br><span class="line">[    0.773399] libata version 3.00 loaded.</span><br><span class="line">[    0.785663] usbcore: registered new interface driver usbfs</span><br><span class="line">[    0.787906] usbcore: registered new interface driver hub</span><br><span class="line">[    0.789752] usbcore: registered new device driver usb</span><br><span class="line">[    0.794877] pps_core: LinuxPPS API ver. 1 registered</span><br><span class="line">[    0.795307] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;</span><br><span class="line">[    0.796439] PTP clock support registered</span><br><span class="line">[    0.806539] EDAC MC: Ver: 3.0.0</span><br><span class="line">[    0.828166] Advanced Linux Sound Architecture Driver Initialized.</span><br><span class="line">[    0.849084] clocksource: Switched to clocksource arch_sys_counter</span><br><span class="line">[    0.851823] VFS: Disk quotas dquot_6.6.0</span><br><span class="line">[    0.854846] VFS: Dquot-cache <span class="built_in">hash</span> table entries: 512 (order 0, 4096 bytes)</span><br><span class="line">[    0.858595] pnp: PnP ACPI: disabled</span><br><span class="line">[    1.017342] NET: Registered protocol family 2</span><br><span class="line">[    1.031887] tcp_listen_portaddr_hash <span class="built_in">hash</span> table entries: 512 (order: 1, 8192 bytes)</span><br><span class="line">[    1.033022] TCP established <span class="built_in">hash</span> table entries: 8192 (order: 4, 65536 bytes)</span><br><span class="line">[    1.034055] TCP <span class="built_in">bind</span> <span class="built_in">hash</span> table entries: 8192 (order: 5, 131072 bytes)</span><br><span class="line">[    1.034752] TCP: Hash tables configured (established 8192 <span class="built_in">bind</span> 8192)</span><br><span class="line">[    1.038780] UDP <span class="built_in">hash</span> table entries: 512 (order: 2, 16384 bytes)</span><br><span class="line">[    1.039445] UDP-Lite <span class="built_in">hash</span> table entries: 512 (order: 2, 16384 bytes)</span><br><span class="line">[    1.042094] NET: Registered protocol family 1</span><br><span class="line">[    1.050677] RPC: Registered named UNIX socket transport module.</span><br><span class="line">[    1.051236] RPC: Registered udp transport module.</span><br><span class="line">[    1.051576] RPC: Registered tcp transport module.</span><br><span class="line">[    1.051922] RPC: Registered tcp NFSv4.1 backchannel transport module.</span><br><span class="line">[    1.053121] PCI: CLS 0 bytes, default 64</span><br><span class="line">[    1.058331] Trying to unpack rootfs image as initramfs...</span><br><span class="line">[    1.071951] rootfs image is not initramfs (no cpio magic); looks like an initrd</span><br><span class="line">[    1.219963] Freeing initrd memory: 15512K</span><br><span class="line">[    1.225178] hw perfevents: enabled with armv8_pmuv3 PMU driver, 1 counters available</span><br><span class="line">[    1.227220] kvm [1]: HYP mode not available</span><br><span class="line">[    1.290935] Initialise system trusted keyrings</span><br><span class="line">[    1.295592] workingset: timestamp_bits=44 max_order=18 bucket_order=0</span><br><span class="line">[    1.563944] squashfs: version 4.0 (2009/01/31) Phillip Lougher</span><br><span class="line">[    1.620068] NFS: Registering the id_resolver key <span class="built_in">type</span></span><br><span class="line">[    1.626786] Key <span class="built_in">type</span> id_resolver registered</span><br><span class="line">[    1.627912] Key <span class="built_in">type</span> id_legacy registered</span><br><span class="line">[    1.630868] nfs4filelayout_init: NFSv4 File Layout Driver Registering...</span><br><span class="line">[    1.652401] 9p: Installing v9fs 9p2000 file system support</span><br><span class="line">[    1.664508] pstore: using deflate compression</span><br><span class="line">[    1.817988] Key <span class="built_in">type</span> asymmetric registered</span><br><span class="line">[    1.819643] Asymmetric key parser <span class="string">'x509'</span> registered</span><br><span class="line">[    1.823133] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)</span><br><span class="line">[    1.827632] io scheduler noop registered</span><br><span class="line">[    1.828884] io scheduler deadline registered</span><br><span class="line">[    1.834561] io scheduler cfq registered (default)</span><br><span class="line">[    1.836114] io scheduler mq-deadline registered</span><br><span class="line">[    1.837955] io scheduler kyber registered</span><br><span class="line">[    1.926575] pl061_gpio 9030000.pl061: PL061 GPIO chip @0x0000000009030000 registered</span><br><span class="line">[    1.944322] pci-host-generic 3f000000.pcie: host bridge /pcie@10000000 ranges:</span><br><span class="line">[    1.950902] pci-host-generic 3f000000.pcie:    IO 0x3eff0000..0x3effffff -&gt; 0x00000000</span><br><span class="line">[    1.957916] pci-host-generic 3f000000.pcie:   MEM 0x10000000..0x3efeffff -&gt; 0x10000000</span><br><span class="line">[    1.962099] pci-host-generic 3f000000.pcie:   MEM 0x8000000000..0xffffffffff -&gt; 0x8000000000</span><br><span class="line">[    1.969611] pci-host-generic 3f000000.pcie: ECAM at [mem 0x3f000000-0x3fffffff] <span class="keyword">for</span> [bus 00-0f]</span><br><span class="line">[    1.983121] pci-host-generic 3f000000.pcie: PCI host bridge to bus 0000:00</span><br><span class="line">[    1.987641] pci_bus 0000:00: root bus resource [bus 00-0f]</span><br><span class="line">[    1.992250] pci_bus 0000:00: root bus resource [io  0x0000-0xffff]</span><br><span class="line">[    1.995159] pci_bus 0000:00: root bus resource [mem 0x10000000-0x3efeffff]</span><br><span class="line">[    1.998891] pci_bus 0000:00: root bus resource [mem 0x8000000000-0xffffffffff]</span><br><span class="line">[    2.010065] pci 0000:00:00.0: [1b36:0008] <span class="built_in">type</span> 00 class 0x060000</span><br><span class="line">[    2.038555] pci 0000:00:01.0: [1af4:1000] <span class="built_in">type</span> 00 class 0x020000</span><br><span class="line">[    2.042423] pci 0000:00:01.0: reg 0x10: [io  0x0000-0x001f]</span><br><span class="line">[    2.044329] pci 0000:00:01.0: reg 0x14: [mem 0x00000000-0x00000fff]</span><br><span class="line">[    2.047344] pci 0000:00:01.0: reg 0x20: [mem 0x00000000-0x00003fff 64bit pref]</span><br><span class="line">[    2.050395] pci 0000:00:01.0: reg 0x30: [mem 0x00000000-0x0007ffff pref]</span><br><span class="line">[    2.066248] pci 0000:00:02.0: [1af4:1009] <span class="built_in">type</span> 00 class 0x000200</span><br><span class="line">[    2.069640] pci 0000:00:02.0: reg 0x10: [io  0x0000-0x003f]</span><br><span class="line">[    2.072306] pci 0000:00:02.0: reg 0x14: [mem 0x00000000-0x00000fff]</span><br><span class="line">[    2.075211] pci 0000:00:02.0: reg 0x20: [mem 0x00000000-0x00003fff 64bit pref]</span><br><span class="line">[    2.103755] pci 0000:00:01.0: BAR 6: assigned [mem 0x10000000-0x1007ffff pref]</span><br><span class="line">[    2.109717] pci 0000:00:01.0: BAR 4: assigned [mem 0x8000000000-0x8000003fff 64bit pref]</span><br><span class="line">[    2.113851] pci 0000:00:02.0: BAR 4: assigned [mem 0x8000004000-0x8000007fff 64bit pref]</span><br><span class="line">[    2.115820] pci 0000:00:01.0: BAR 1: assigned [mem 0x10080000-0x10080fff]</span><br><span class="line">[    2.118111] pci 0000:00:02.0: BAR 1: assigned [mem 0x10081000-0x10081fff]</span><br><span class="line">[    2.119817] pci 0000:00:02.0: BAR 0: assigned [io  0x1000-0x103f]</span><br><span class="line">[    2.122333] pci 0000:00:01.0: BAR 0: assigned [io  0x1040-0x105f]</span><br><span class="line">[    2.211197] EINJ: ACPI disabled.</span><br><span class="line">[    2.330390] virtio-pci 0000:00:01.0: enabling device (0000 -&gt; 0003)</span><br><span class="line">[    2.354839] virtio-pci 0000:00:02.0: enabling device (0000 -&gt; 0003)</span><br><span class="line">[    2.512241] Serial: 8250/16550 driver, 4 ports, IRQ sharing enabled</span><br><span class="line">[    2.593580] cacheinfo: Unable to detect cache hierarchy <span class="keyword">for</span> CPU 0</span><br><span class="line">[    2.638856] brd: module loaded</span><br><span class="line">[    2.756131] loop: module loaded</span><br><span class="line">[    2.834762] libphy: Fixed MDIO Bus: probed</span><br><span class="line">[    2.844183] tun: Universal TUN/TAP device driver, 1.6</span><br><span class="line">[    2.909715] thunder_xcv, ver 1.0</span><br><span class="line">[    2.911181] thunder_bgx, ver 1.0</span><br><span class="line">[    2.912558] nicpf, ver 1.0</span><br><span class="line">[    2.921499] e1000e: Intel(R) PRO/1000 Network Driver - 3.2.6-k</span><br><span class="line">[    2.922236] e1000e: Copyright(c) 1999 - 2015 Intel Corporation.</span><br><span class="line">[    2.925385] igb: Intel(R) Gigabit Ethernet Network Driver - version 5.4.0-k</span><br><span class="line">[    2.926237] igb: Copyright (c) 2007-2014 Intel Corporation.</span><br><span class="line">[    2.928072] igbvf: Intel(R) Gigabit Virtual Function Network Driver - version 2.4.0-k</span><br><span class="line">[    2.929604] igbvf: Copyright (c) 2009 - 2012 Intel Corporation.</span><br><span class="line">[    2.932820] sky2: driver version 1.30</span><br><span class="line">[    2.948916] VFIO - User Level meta-driver version: 0.3</span><br><span class="line">[    2.954444] ehci_hcd: USB 2.0 <span class="string">'Enhanced'</span> Host Controller (EHCI) Driver</span><br><span class="line">[    2.955462] ehci-pci: EHCI PCI platform driver</span><br><span class="line">[    2.957773] ehci-platform: EHCI generic platform driver</span><br><span class="line">[    2.961430] usbcore: registered new interface driver usb-storage</span><br><span class="line">[    2.991082] rtc-pl031 9010000.pl031: rtc core: registered pl031 as rtc0</span><br><span class="line">[    2.997556] i2c /dev entries driver</span><br><span class="line">[    3.024361] sdhci: Secure Digital Host Controller Interface driver</span><br><span class="line">[    3.030621] sdhci: Copyright(c) Pierre Ossman</span><br><span class="line">[    3.035477] Synopsys Designware Multimedia Card Interface Driver</span><br><span class="line">[    3.043428] sdhci-pltfm: SDHCI platform and OF driver helper</span><br><span class="line">[    3.056220] ledtrig-cpu: registered to indicate activity on CPUs</span><br><span class="line">[    3.086735] usbcore: registered new interface driver usbhid</span><br><span class="line">[    3.087646] usbhid: USB HID core driver</span><br><span class="line">[    3.115425] NET: Registered protocol family 17</span><br><span class="line">[    3.121396] 9pnet: Installing 9P2000 support</span><br><span class="line">[    3.127838] Key <span class="built_in">type</span> dns_resolver registered</span><br><span class="line">[    3.140496] registered taskstats version 1</span><br><span class="line">[    3.141477] Loading compiled-in X.509 certificates</span><br><span class="line">[    3.165868] input: gpio-keys as /devices/platform/gpio-keys/input/input0</span><br><span class="line">[    3.174798] rtc-pl031 9010000.pl031: setting system clock to 2019-06-23 13:50:18 UTC (1561297818)</span><br><span class="line">[    3.179007] ALSA device list:</span><br><span class="line">[    3.179612]   No soundcards found.</span><br><span class="line">[    3.190059] uart-pl011 9000000.pl011: no DMA platform data</span><br><span class="line">[    3.197681] RAMDISK: gzip image found at block 0</span><br><span class="line">[    8.860079] EXT4-fs (ram0): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">[    8.861974] VFS: Mounted root (ext4 filesystem) on device 1:0.</span><br><span class="line">[    8.870895] devtmpfs: mounted</span><br><span class="line">[    8.997547] Freeing unused kernel memory: 768K</span><br><span class="line">[    9.031224] Run /linuxrc as init process</span><br><span class="line"></span><br><span class="line">Please press Enter to activate this console. </span><br><span class="line">[root@aarch64 ]<span class="comment"># ls</span></span><br><span class="line">bin         etc         linuxrc     mnt         root        sys         var</span><br><span class="line">dev         lib         lost+found  proc        sbin        tmp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>arm</tag>
        <tag>linux</tag>
        <tag>qemu</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Learning 1</title>
    <url>/2023/03/05/rust-learning-1/</url>
    <content><![CDATA[<h2 id="RUST-Learning-1"><a href="#RUST-Learning-1" class="headerlink" title="RUST Learning 1"></a>RUST Learning 1</h2><p><a href="https://kaisery.github.io/trpl-zh-cn/title-page.html" target="_blank" rel="noopener">Rust 程序设计语言 - Rust 程序设计语言 简体中文版 (kaisery.github.io)</a></p>
<h3 id="所有权-Ownership"><a href="#所有权-Ownership" class="headerlink" title="所有权(Ownership)"></a>所有权(Ownership)</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ol>
<li>每一个值都有一个所有者(owner)</li>
<li>值在任何时刻只能有一个所有者</li>
<li>当所有者(变量)离开作用域，这个值就被释放</li>
</ol>
<p>rust中的作用域和C的一样。</p>
<h4 id="资源释放"><a href="#资源释放" class="headerlink" title="资源释放"></a>资源释放</h4><p>以String类型为例，一个String类型变量值存储在栈上，但是它实际指向的字符串数据内存在堆上。</p>
<p><img src="../uploads/rust/string_pointer.png" alt="string_pointer"></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>);</span><br><span class="line">&#125; <span class="comment">// s drop</span></span><br></pre></td></tr></table></figure>

<p>当变量s离开作用域，rust会调用drop函数来释放内存。这个机制类似C++中的Resource Acquisition Is Initialization(RAII)，一个对象在生命周期结束时，自己释放拥有的资源。</p>
<h5 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h5><p>变量的所有权规则：将值赋给另一个变量时移动它，当持有堆中的数据的变量离开作用域时，其值通过drop被清理掉，除非数据被移动为另一个变量所有。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = x;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x is &#123;x&#125; y is &#123;y&#125;"</span>);</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>);</span><br><span class="line">    <span class="keyword">let</span> s2 = s1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"s2 is &#123;s2&#125; s1 is &#123;s1&#125;"</span>); <span class="comment">// error: borrow of moved value: `s1`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于复杂的数据类型，变量之间在赋值时，相当于把前一个变量s1<strong>移动</strong>到了s2，这样避免了s1和s2都还指向子串的实际内容，退出作用域时，s1和s2都会对内存资源进行释放导致double free。对于普通的数据类型，rust给x和y在栈上各提供了一个5作为值。</p>
<h5 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h5><p>rust永远不会自动创建数据的深拷贝。</p>
<p>如果需要深度复制String在堆上的数据，可以使用clone函数。clone出现的地方说明有额外的代码执行可能会很耗资源。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.clone();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"s2 is &#123;s2&#125; s1 is &#123;s1&#125;"</span>);</span><br></pre></td></tr></table></figure>

<p>Rust有个Copy trait的特殊注解，如果一个类型实现了Copy trait，那么一个旧的变量将其赋给其他变量后仍然可用。基本的整数类型，bool类型，浮点类型，字符类型，以及只包含实现了Copy元素的元组类型都是Copy类型。</p>
<p>Rust禁止自身或其任何部分实现了Drop trait的类型使用Copy trait。</p>
<h5 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h5><p>对于不支持Copy的类型作为参数，会把传入参数的变量移动到函数内，除非把这个变量通过函数返回出来，否则之前的变量由于被移动走，无法使用。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">take_owner</span></span>(<span class="built_in">str</span>: <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"func string: &#123;&#125;"</span>, <span class="built_in">str</span>);</span><br><span class="line">&#125; <span class="comment">// str 退出作用域调用drop，把字串占用的内存资源释放</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">make_copy</span></span>(value: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"func integer: &#123;&#125;"</span>, value);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>);</span><br><span class="line">    take_owner(s1); <span class="comment">// s1 moved into function</span></span><br><span class="line">    <span class="comment">// s1 is not valid here</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>; </span><br><span class="line">    make_copy(x);  <span class="comment">// copy for i32 type</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"integer: &#123;&#125;"</span>, x);  <span class="comment">// x is still valid</span></span><br></pre></td></tr></table></figure>

<h5 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h5><p>函数的返回值可以把函数内的变量的所有权移动给函数外的变量。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">give_owner</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> game = <span class="built_in">String</span>::from(<span class="string">"call of duty"</span>);</span><br><span class="line">    game  <span class="comment">// 注意这里没有语句结束；所以作为一个表达式返回变量game</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fps = give_owner(); <span class="comment">// 变量的所有权现在归fps</span></span><br></pre></td></tr></table></figure>

<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>如果一个变量作为参数把值的所有权移动到了函数体内，函数执行后还需要使用这个变量的地方就不能使用这个变量了，如果每次把参数再作为返回值把所有权移动出来也会很麻烦。此时可以使用引用作为函数的参数。</p>
<p>引用像一个指针，它是一个地址，我们可以由此访问存储于该地址属于其他变量的数据。引用需要确保它指向了某个特定类型的有效值。</p>
<p>创建一个引用的行为称为借用(borrowing)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">cal_str_len</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    s.len(); <span class="comment">// 引用使用值，但不获取所有全，但是默认不能修改值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>);</span><br><span class="line"><span class="keyword">let</span> len = cal_str_len(&amp;s1); <span class="comment">//使用引用作为参数</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"string &#123;&#125; len is &#123;&#125;"</span>, s1, len);  <span class="comment">// s1还有所有权</span></span><br></pre></td></tr></table></figure>

<h6 id="可变引用"><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h6><p>通过使用mut关键字可以声明一个引用是可修改的。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change_ref</span></span>(<span class="built_in">str</span>: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">str</span>.push_str(<span class="string">" is beautiful"</span>); <span class="comment">// 修改一个引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s1 = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>); <span class="comment">// 定一个可变字符串</span></span><br><span class="line">change_ref(&amp;<span class="keyword">mut</span> s1);  <span class="comment">// 可变引用参数</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"string &#123;&#125;"</span>, s1);</span><br></pre></td></tr></table></figure>

<p>一个引用的生命周期从这个引用定义开始，到这个引用的最后一次使用终止。</p>
<p>如果已经有一个对变量的可变引用，在这个引用的生命周期内，不能对被引用的变量再次引用，这样会导致多个引用修改或访问同一个变量，引发多线程的数据竞争问题。同样，不可变引用和可变引用也不能同时存在。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s1 = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>);</span><br><span class="line"><span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s1;</span><br><span class="line"><span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s1; <span class="comment">// 编译器会提示 ^^^^^^^ second mutable borrow occurs here</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125; &#123;&#125; "</span>, r1, r2); <span class="comment">// -- first borrow later used here</span></span><br></pre></td></tr></table></figure>

<p>如果对一个变量的引用都是不可变的，那么不存在数据竞争访问问题，是可以使用的。</p>
<p>Rust的编译器会保证一个引用不会变成<strong>悬垂引用(Dangling Reference)</strong>.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dangle_ref</span></span>() -&gt; &amp;<span class="built_in">String</span> &#123; <span class="comment">// 返回一个字符串引用</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"Flower"</span>);</span><br><span class="line">    &amp;s <span class="comment">// 返回引用</span></span><br><span class="line">&#125; <span class="comment">// s 退出作用域，内存资源被释放</span></span><br><span class="line">编译器提示：</span><br><span class="line">this function<span class="symbol">'s</span> <span class="keyword">return</span> <span class="class"><span class="keyword">type</span> <span class="title">contains</span></span> a borrowed value, but there is no value <span class="keyword">for</span> it to be borrowed from</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>要么只能有一个可变引用，要么只有多个不可变引用</li>
<li>引用必须总是有效的</li>
</ul>
<h5 id="Slice类型"><a href="#Slice类型" class="headerlink" title="Slice类型"></a>Slice类型</h5><p>slice是一种引用，所以它没有所有权。可以引用集合中一段连续的元素序列，是一个部分不可变引用。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> poem = <span class="built_in">String</span>::from(<span class="string">"best way to find a secret"</span>);</span><br><span class="line"><span class="keyword">let</span> key = &amp;poem[<span class="number">0</span>..<span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<p><code>[start..end]</code>表示从start开始，end-start长度的子集。当start为0时，可以不写，end为最后一个字符时也可以省略。</p>
<p>字符串slice的类型声明为<code>&amp;str</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">fisrt_word</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; &amp;<span class="built_in">str</span> &#123; <span class="comment">// 返回一个String的slice</span></span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes(); <span class="comment">// 转换为字符数组</span></span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate() &#123; <span class="comment">// 数组迭代器</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b' '</span> &#123; <span class="comment">// 找到第一个空格的位置</span></span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i]; <span class="comment">// 截取第一个空格之前的字符为第一个字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]  <span class="comment">// 没有空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>let s = &quot;book a ticket&quot;;</code>中s的类型是<code>&amp;str</code>，他是指向一个二进制程序特定位置的slice，由于他是一个不可变引用，所以值不可改变。</p>
<p>对于一个整型数的数组他的slice数据类型为<code>&amp;[i32]</code></p>
<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>结构体和C++中的类似，包含不同类型的字段。</p>
<p>声明一个结构体</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Game</span></span> &#123;</span><br><span class="line">    game_name: <span class="built_in">String</span>,</span><br><span class="line">    game_type: <span class="built_in">i32</span>,</span><br><span class="line">    rate: <span class="built_in">f32</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化一个结构体变量</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> cod = Game &#123;</span><br><span class="line">    game_name: <span class="built_in">String</span>::from(<span class="string">"Call of duty"</span>),</span><br><span class="line">    game_type:<span class="number">1</span>,</span><br><span class="line">    rate:<span class="number">8.2</span>,</span><br><span class="line">&#125;;</span><br><span class="line">cod.rate = <span class="number">7.5</span>;</span><br></pre></td></tr></table></figure>

<p>结构体作为返回值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_game</span></span>(name: <span class="built_in">String</span>) -&gt; Game &#123;</span><br><span class="line">    Game &#123;</span><br><span class="line">        game_name:name,</span><br><span class="line">        rate:<span class="number">0.0</span>,</span><br><span class="line">        game_type:<span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> bf5 = build_game(<span class="built_in">String</span>::from(<span class="string">"Battle Field 5"</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>字段初始化简写语法，函数的参数名称和结构体字段名称相同</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_game</span></span>(game_name: <span class="built_in">String</span>) -&gt; Game &#123;</span><br><span class="line">    Game &#123;</span><br><span class="line">        game_name,</span><br><span class="line">        rate:<span class="number">0.0</span>,</span><br><span class="line">        game_type:<span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结构体更新语法 <code>..</code>语法指定结构体中剩余没有设置的字段使用给定实例对应字段相同的值，相当于逐个=，这个语法必须放在<strong>最后</strong>。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> halo = Game &#123;</span><br><span class="line">    game_name: <span class="built_in">String</span>::from(<span class="string">"HALO"</span>),</span><br><span class="line">    ..cod</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The value is &#123;&#125;, &#123;&#125;"</span>, halo.game_name, halo.rate);</span><br></pre></td></tr></table></figure>

<p>这里需要<strong>注意</strong>当自动赋值的字段中有不可Copy的数据类型时，前一个变量不能被使用了，因为他已经被移动了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> halo = Game &#123;</span><br><span class="line">    game_type: <span class="number">2</span>,</span><br><span class="line">    ..cod</span><br><span class="line">&#125;; <span class="comment">//编译会提示 borrow of moved value: `cod.game_name`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> my_name = cod.game_name;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"info of struct value &#123;:?&#125;"</span>, cod); <span class="comment">// borrow of partially moved value: `cod`</span></span><br></pre></td></tr></table></figure>

<h5 id="元组结构体"><a href="#元组结构体" class="headerlink" title="元组结构体"></a>元组结构体</h5><p>使用元组的方式定义结构体，可以不用给每个字段定一个名字。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Color</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"><span class="keyword">let</span> black = Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h5 id="单元结构体"><a href="#单元结构体" class="headerlink" title="单元结构体"></a>单元结构体</h5><p>没有任何字段的结构体，在某个类型上实现trait但又不需要存储数据。</p>
<h5 id="派生trait增加功能"><a href="#派生trait增加功能" class="headerlink" title="派生trait增加功能"></a>派生trait增加功能</h5><p>通过给结构体增加外部属性<code>#[derive(Debug)]</code>，结构体就可以输出调试信息</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Game</span></span> &#123;</span><br><span class="line">    game_name: <span class="built_in">String</span>,</span><br><span class="line">    game_type: <span class="built_in">i32</span>,</span><br><span class="line">    rate: <span class="built_in">f32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"info of struct value &#123;:?&#125;"</span>, cod);</span><br><span class="line"><span class="comment">// info of struct value Game &#123; game_name: "Call of duty", game_type: 1, rate: 7.5 &#125;</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"info of struct value &#123;:#?&#125;"</span>, cod);  <span class="comment">// 格式化打印</span></span><br><span class="line"><span class="comment">//info of struct value Game &#123;</span></span><br><span class="line"><span class="comment">//    game_name: "Call of duty",</span></span><br><span class="line"><span class="comment">//    game_type: 1,</span></span><br><span class="line"><span class="comment">//    rate: 7.5,</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="dbg-宏"><a href="#dbg-宏" class="headerlink" title="dbg!宏"></a>dbg!宏</h6><p>println!宏接受变量的引用，dbg!宏接收变量的所有权，可以打印执行宏所在的文件和行号，表达式计算结果并把结果的所有权返回。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> halo_rate = <span class="number">8.0</span>;</span><br><span class="line"><span class="keyword">let</span> halo = Game &#123;</span><br><span class="line">    game_name:<span class="built_in">String</span>::from(<span class="string">"HALO"</span>),</span><br><span class="line">    game_type:<span class="number">1</span>,</span><br><span class="line">    rate: dbg!(halo_rate*<span class="number">0.9</span>)  <span class="comment">// [src\main.rs:195] halo_rate * 0.9 = 7.2</span></span><br><span class="line">&#125;;</span><br><span class="line">dbg!(&amp;halo);</span><br></pre></td></tr></table></figure>

<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>方法是定义在结构体，枚举上下文中的，他的第一个参数一定是self，表示调用该方法结构体实例。使用impl关键字开始的一个代码块来定义结构体关联的方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Game &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">description</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Game &#123;&#125; rate is &#123;&#125;"</span>, <span class="keyword">self</span>.game_name, <span class="keyword">self</span>.rate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个参数<code>&amp;self</code>是<code>self: &amp;Self</code>的缩写，在impl中，Self是块的类型的别名。self的传递参数时可以选择获取<code>self</code>的所有权也可以选择借用(引用)<code>&amp;self</code>，或者可变的借用<code>&amp;mut self</code>。</p>
<p>如果想要在方法中改变调用方法的实例，需要将第一个参数改为 &amp;mut self。通过仅仅使用 self 作为第一个参数来使方法获取实例的所有权是很少见的；这种技术通常用在当方法将 self 转换成别的实例的时，我们想要防止调用者在转换之后使用原始的实例。</p>
<p>方法名称可以和字段名称相同，编译器根据方法名称后有<code>()</code>就知道是调用方法，而不是获取字段。这样可以实现getter方法。</p>
<h5 id="关联函数"><a href="#关联函数" class="headerlink" title="关联函数"></a>关联函数</h5><p>定义在impl块中的不以self作为第一个参数函数称为结构的关联函数，因为它不作用于一个结构的实例，所以不是方法。例如<code>String::from</code>，一般这样的关联函数用来返回一个结构的实例的构造函数，类似new的作用，但是new不是rust的关键字。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Game &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new_game</span></span>(name: <span class="built_in">String</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123; <span class="comment">//Self关键字在关联函数的返回值中表示impl中的类型Game。</span></span><br><span class="line">            game_name:name,</span><br><span class="line">            game_type:<span class="number">0</span>,</span><br><span class="line">            rate:<span class="number">0.0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> halo = Game::new_game(<span class="built_in">String</span>::from(<span class="string">"HALO"</span>));</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"info of struct value &#123;:?&#125;"</span>, halo);</span><br></pre></td></tr></table></figure>

<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>枚举定一个了一种数据类型，可以让你列举出其中的每一个成员(variants)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">GameType</span></span> &#123;</span><br><span class="line">    FPS,</span><br><span class="line">    RPG,</span><br><span class="line">    Sport,</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Game</span></span> &#123;</span><br><span class="line">    game_name: <span class="built_in">String</span>,</span><br><span class="line">    game_type: GameType,</span><br><span class="line">    rate: <span class="built_in">f32</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以将数据直接附加到枚举成员上，并且每个枚举成员可以处理不同类型和数量的数据。</p>
<p>枚举也可以定义方法，self的作用和结构的相同，也表示调用方法的值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Message</span></span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>&#125;,</span><br><span class="line">    Write(<span class="built_in">String</span>),</span><br><span class="line">    ChangeColor(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WriteMessage</span></span>(<span class="built_in">String</span>); <span class="comment">//元组结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MoveMessage</span></span> &#123;</span><br><span class="line">    x:<span class="built_in">i32</span>,</span><br><span class="line">    y:<span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Message &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">call</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, <span class="keyword">self</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> m = Message::Write(<span class="built_in">String</span>::from(<span class="string">"best game is"</span>));</span><br><span class="line">m.call(); <span class="comment">// Write("best game is")</span></span><br><span class="line"><span class="keyword">let</span> move_msg = Message::Move &#123; x: <span class="number">15</span>, y: <span class="number">20</span> &#125;;</span><br><span class="line">move_msg.call(); <span class="comment">// Move &#123; x: 15, y: 20 &#125;</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用不同的结构体来定义上面Message枚举选项中的各个数据类型，但是对于struct由于他们是不同的类型，无法定义一个函数就可以处理所有这些结构体类型，但是枚举是同一个数据类型。</p>
<h5 id="Option枚举"><a href="#Option枚举" class="headerlink" title="Option枚举"></a>Option枚举</h5><p>对于rust没有null关键字，因为程序中会出现因为没有判断null导致的bug。rust使用Option表示是否有值。<code>Option&lt;T&gt;</code>和<code>T</code>是不同的数据类型，所以他们之间不能直接运算，这样就能避免对没有值时的异常调用。所有的计算都需要先将<code>Option&lt;T&gt;</code>转换为<code>T</code>类型后才能执行。所以只要一个值类型不是Option类型，就可认为他的值不会为空，增加代码安全性。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x : <span class="built_in">i8</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">Option</span>&lt;<span class="built_in">i8</span>&gt; = <span class="literal">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> null_num: <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = x + y; <span class="comment">// error no implementation for `i8 + Option&lt;i8&gt;`</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>rust</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Learning - Crates and Modules</title>
    <url>/2023/03/18/rust-learning-2-project/</url>
    <content><![CDATA[<h2 id="RUST"><a href="#RUST" class="headerlink" title="RUST"></a>RUST</h2><p><a href="https://kaisery.github.io/trpl-zh-cn/title-page.html" target="_blank" rel="noopener">Rust 程序设计语言 - Rust 程序设计语言 简体中文版 (kaisery.github.io)</a></p>
<h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><p>Cargo的一个功能，可以构建、测试和分享crate。包是提供一系列功能的一个或多个crate。一个包会包含一个Cargo.toml文件。Cargo本身也是一个包含构建代码的二进制项目的包。包中可以包含至多一个库crate，和任意多个二进制crate，但是必须至少有一个crate。</p>
<p>一个包目录中</p>
<ul>
<li><code>src/main.rs</code>是与包名相同的二进制crate的根crate</li>
<li><code>src/lib.rs</code>是与包名相同的库crate的根crate</li>
<li><code>src/bin</code>目录下是这个包中的其他的二进制crate</li>
</ul>
<p>crate根文件由Cargo传递给rustc来实际构建库或二进制项目。</p>
<h3 id="Crates"><a href="#Crates" class="headerlink" title="Crates"></a>Crates</h3><p>crate是rust在编译时的最小代码单位，可以是一个文件。Crate有两类：库或二进制项目。一般crate都是指的库。</p>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>多个模块构成了一个crate，用来对一个crate中的代码进行分组，提高可读性和重复使用。模块使用<strong>mod</strong>声明，和python的module类似，也可以看作和c++中的namespace类似。</p>
<p>模块以树结构进行组织，一个模块中的代码默认是私有的，子模块可以访问父模块的成员，但父模块默认不能访问子模块的成员，除非在子模块中将成员声明为<strong>pub</strong>的。同一级的模块之间是可以访问的。</p>
<p>使用super可以访问父一级的内容（方法，结构体，枚举等）。</p>
<p>如果一个模块声明了pub，他的内容对外部来说，还是私有不能访问的，要访问一个模块的内容，必须给具体的内容，例如函数，结构体加上pub。</p>
<p>结构体内的字段默认都是私有，而枚举中的字段都是公开的，不需要给枚举的每个值都增加pub。</p>
<p><code>src/lib.rs</code>文件中</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">deliver_order</span></span>() &#123;&#125;</span><br><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Order</span></span> &#123; <span class="comment">// 结构体中的成员默认都是私有的，加上pub外部才能访问</span></span><br><span class="line">        order_type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">pub</span> order_count: <span class="built_in">i32</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> Order &#123; <span class="comment">// 由于Order中有私有成员，所以需要在模块内部提供一个create函数创建Order对象</span></span><br><span class="line">        <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">create_order</span></span>(order_type:&amp;<span class="built_in">str</span>) -&gt;Order &#123;</span><br><span class="line">            Order &#123; order_type: <span class="built_in">String</span>::from(order_type), order_count: <span class="number">1</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mod</span> serving &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">take_order</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">finish_work</span></span>() &#123;</span><br><span class="line">        super::deliver_order(); <span class="comment">// 访问上一级，即根的接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 绝对路径，crate说明是根</span></span><br><span class="line">    crate::front_of_house::hosting::add_to_waitlist();</span><br><span class="line">	<span class="comment">// 相对路径，这个eat_at_restaurant函数和front_of_house是同一级的。</span></span><br><span class="line">    front_of_house::hosting::add_to_waitlist();</span><br><span class="line">    <span class="comment">// field `order_type` of struct `Order` is private</span></span><br><span class="line">    <span class="comment">//let mut myorder1 = front_of_house::Order &#123;order_count:1, order_type:String::from("food"),&#125;; </span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> myorder = front_of_house::Order::create_order(<span class="string">"noodles"</span>);</span><br><span class="line">    myorder.order_count = <span class="number">10</span>; <span class="comment">// 只能访问pub的成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="use"><a href="#use" class="headerlink" title="use"></a>use</h4><p>可以使用use简化模块使用时很长的前缀，和c++的using或python的import类似的作用。use的短路径只能在use所在的特定作用域内使用，如果和use的作用域不同，就不能使用。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eat_at</span></span>() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> customer &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">eat_at</span></span>() &#123;</span><br><span class="line">        <span class="comment">//failed to resolve: use of undeclared crate or module `hosting`use of undeclared crate or module `hosting`</span></span><br><span class="line">        hosting::add_to_waitlist();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>use其实也可以直接指定到最后的接口，但是那样以来，使用的地方直接调用接口名字，可能存在不同模块内用相同接口名的情况。所以，一般只是把use指定到模块，类，结构体或枚举。类似python的import，use也有as的语法别名，这样也可以避免冲突。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::<span class="built_in">Result</span>;</span><br><span class="line"><span class="keyword">use</span> std::io::<span class="built_in">Result</span> <span class="keyword">as</span> IoResult;</span><br></pre></td></tr></table></figure>

<p>使用<code>pub use</code>可以把一个名称重导出，相同于这个名字就定义在当前作用域一样。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在外部使用的地方可以</span></span><br><span class="line">restarant::hosting::add_to_waitlist(); <span class="comment">//跳过了中间的内部的front_of_house</span></span><br></pre></td></tr></table></figure>

<p>use语句可以把多个语句合并简化</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;cmp::Ordering, mem&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, Write&#125;; <span class="comment">// 等价于use std::io和use std::io::Write</span></span><br><span class="line"><span class="keyword">use</span> std::collections::*;   <span class="comment">// 引用collections下的所有内容</span></span><br></pre></td></tr></table></figure>

<h4 id="模块文件管理"><a href="#模块文件管理" class="headerlink" title="模块文件管理"></a>模块文件管理</h4><p>不同的模块可以按文件放在其父模块的目录中，编译器根据mod语句定位模块的代码文件的位置。</p>
<p>例如crate的根文件<code>src/lib.rs</code>中</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house;  <span class="comment">// 声明front_of_house模块</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译器看到了根文件中的front_of_house模块声明，就会在根目录中找这个<code>src/front_of_house.rs</code>文件。在<code>src/front_of_house.rs</code>中，</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting;</span><br></pre></td></tr></table></figure>

<p><code>hosting</code>是<code>front_of_house</code>的子模块，所以它的模块文件放在他父模块<code>front_of_house</code>同名的目录下<code>src/front_of_house/hosting.rs</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>rust</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Learning</title>
    <url>/2023/02/19/rust-learning/</url>
    <content><![CDATA[<h2 id="RUST"><a href="#RUST" class="headerlink" title="RUST"></a>RUST</h2><p><a href="https://kaisery.github.io/trpl-zh-cn/title-page.html" target="_blank" rel="noopener">Rust 程序设计语言 - Rust 程序设计语言 简体中文版 (kaisery.github.io)</a></p>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>rustup 是一个管理 Rust 版本和相关工具的命令行工具</p>
<p><img src="../uploads/rust/rust_install.png" alt="rust_install"></p>
<p>环境变量</p>
<p><img src="../uploads/rust/rust_env.png" alt="rust_env"></p>
<p>更新 <code>$rustup update</code></p>
<p>安装状态 <code>$rustc --version</code>  输出 <code>rustc 1.67.1 (d5a82bbd2 2023-02-07)</code></p>
<p>查看文档 <code>rustup doc</code>会自动使用默认浏览器打开安装的离线文档页面</p>
<h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><ul>
<li>缩进使用4个空格，而不是一个tab</li>
<li>调用的宏时，名字后有<code>!</code>，例如<code>println!(&quot;hi human&quot;);</code></li>
<li>rust中的模块被称为crates</li>
<li>使用snake case编程风格，所有字母小写并使用下划线分隔单词</li>
</ul>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>rust和c++一样是预编译静态类型语言</p>
<p><code>rustc .\main.rs</code></p>
<h4 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h4><p>Cargo是rust的构建系统和包管理器，可以自动下载依赖库，在使用rustup安装时一并安装到系统中。</p>
<p>创建一个项目执行</p>
<p>​     <code>$cargo new cargo_demo</code></p>
<p>会自动创建一个src目录，一个.gitignore文件和Cargo.toml文件</p>
<p>Cargo使用TOML (Tom’s Obvious, Minimal Language) 格式作为项目配置文件</p>
<p><code>[package]</code>以[]开始的是一个片段</p>
<ul>
<li>编译工程 在工程目录下执行<code>cargo build</code>,编译时间很长，生成的文件在target的debug目录下</li>
<li><code>cargo run</code>编译并直接运行</li>
<li><code>cargo check</code>代码检查</li>
<li><code>cargo build --release</code>编译release版本</li>
</ul>
<h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p>在Cargo.toml的[dependencies]添加依赖库<strong>crate</strong>，添加一个生成随机数的rand库，版本为0.8.5</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"cargo_demo"</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.1.0"</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">"2021"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">rand</span> = <span class="string">"0.8.5"</span></span><br></pre></td></tr></table></figure>

<p>再次执行build后，会下载所有依赖的库，包括rand依赖的库</p>
<h5 id="Cargo-lock"><a href="#Cargo-lock" class="headerlink" title="Cargo.lock"></a>Cargo.lock</h5><p>工程中的<code>Cargo.lock</code>文件记录了第一次构建时，所有符合要求的依赖库版本，以后再次构建不会再去找依赖库的版本，方便今后“可重复构建”</p>
<p>如果没有修改工程配置，使用<code>cargo update</code>可以强制更新当前配置文件设置的最新库版本，例如更新到配置文件中指定的最新版本</p>
<p>如果修改了toml的配置文件，执行build时，就会下载最新的库文件。</p>
<h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><p>执行<code>cargo doc --open</code>可以构建本地依赖库的文档，并在浏览器中打开</p>
<p><img src="..%5Cuploads%5Crust%5Ccargo_doc.png" alt="image-20230219110744359"></p>
<h5 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Guess my age!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> my_age = rand::thread_rng().gen_range(<span class="number">1</span>..=<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Input your guess: &#123;my_age&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();  <span class="comment">// mut 可变变量</span></span><br><span class="line">        io::stdin()</span><br><span class="line">            .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">            .expect(<span class="string">"Failed to read line"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> guess: <span class="built_in">u32</span> = <span class="keyword">match</span> guess.trim().parse() &#123;</span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="keyword">continue</span>, <span class="comment">// -是一个通配符，匹配所有Err值，如果不能转换为数字，进入下次循环</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"You guessed: &#123;guess&#125;"</span>); <span class="comment">// &#123;&#125;占位符，可以打印变量或表达式结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> guess.cmp(&amp;my_age) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">"Small"</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">"Big"</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"Right"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量默认是不可改变的immutable，一旦一个值绑定到了一个变量上，就不能改变这个变量的值。</p>
<p>如果修改一个不可变变量的值，会有这个错误：error[E0384]: cannot assign twice to immutable variable <code>game</code><br> 不可变变量的好处：</p>
<ul>
<li>并发程序在编译时避免多线程问题？</li>
</ul>
<p>定义可变变量需要使用<code>mut</code>关键字，虽然可以修改变量的值，但是不能更改变量的数据类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> game = <span class="string">"cod"</span>;</span><br></pre></td></tr></table></figure>

<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量是固定不可变的，使用<code>const</code>关键字，常量可以在任何作用域声明，必须是表达式，不能在运行时计算出值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SECONDS_OF_DAY: <span class="built_in">u32</span> = <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br></pre></td></tr></table></figure>

<h4 id="隐藏（shadowing）"><a href="#隐藏（shadowing）" class="headerlink" title="隐藏（shadowing）"></a>隐藏（shadowing）</h4><p>可以定义一个和之前变量同名的新变量，前一个变量会被隐藏，当第二个变量退出自己的作用域后，变量会恢复第一个变量的值。隐藏是新建了一个变量，并不是改变原来变量的值，和mut完全不同。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> game = <span class="string">"cod"</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> game = <span class="string">"halo"</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The best FPS is &#123;game&#125;"</span>); <span class="comment">//halo</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The best FPS is &#123;game&#125;"</span>); <span class="comment">// cod</span></span><br></pre></td></tr></table></figure>

<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="标量-scalar"><a href="#标量-scalar" class="headerlink" title="标量(scalar)"></a><strong>标量(scalar)</strong></h5><p>表示单独的一个数值</p>
<ul>
<li>整型：u8, i8(-128~127), u16, i16, u128, i128, usize, isize和程序架构绑定。变量赋值时，可以使用数据类型来指定类型，例如<code>56u8</code>指定数据类型为<code>u8</code>，数字之间可以使用下划线<code>_</code>分隔方便读数，如<code>5_600</code>表示5600. </li>
<li>数字类型表示：十六进制(hex) 0xFF; 八进制(Octal) 0o77; 二进制(binary) 0b1111_0000; 字节(仅能用于u8) b’A’</li>
<li>整数溢出：例如给一个u8类型变量赋值256时，debug版本会出现panic错误，release版本会给变量赋值为 0，257赋值为1进行回绕。标准库提供了检查溢出的方法例如<code>overflowing_*</code></li>
<li>浮点型：f32, f64，默认为f64。使用<code>IEEE-754标准</code></li>
<li>布尔型：bool 两个值<code>true</code>，<code>false</code></li>
<li>字符类型：char <strong>占4个字节，代表一个Unicode标量值</strong>。范围U+0000<del>U+7DFF和U+E000</del>U+10FFFF在内的值。</li>
</ul>
<h5 id="复合类型-Compound-types"><a href="#复合类型-Compound-types" class="headerlink" title="复合类型(Compound types)"></a><strong>复合类型(Compound types)</strong></h5><p>将多个值组合成一个类型</p>
<h6 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h6><p>元组长度固定，一旦声明，长度不能改变。元组中的每一个位置的数据类型可以是不同的。可以使用模式匹配来解构(destructure)元组值。也可以使用元组变量名加<code>.索引</code>的方式获取值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">3.6</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup; <span class="comment">// destructuring</span></span><br><span class="line"><span class="keyword">let</span> x = tup.<span class="number">0</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The value of x is : &#123;x&#125;"</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The value of y is : &#123;y&#125;"</span>);</span><br></pre></td></tr></table></figure>

<p>没有任何值的元组称作<strong>单元(unit)</strong>，表示空值或空的返回类型。</p>
<h6 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h6><p>数组中每个元素的数据类型相同，且长度固定。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> food = [<span class="string">"breakfast"</span>, <span class="string">"lunch"</span>, <span class="string">"supper"</span>];</span><br><span class="line"><span class="keyword">let</span> data:[<span class="built_in">i32</span>; <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">6</span>, <span class="number">3</span>]; <span class="comment">// [6, 6, 6]</span></span><br><span class="line"><span class="keyword">let</span> num = data[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数声明使用<code>fn</code>关键字开始，每个参数必须声明类型，在函数参数列表后使用<code>-&gt;</code>指明函数的返回类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">cal_price</span></span>(val: <span class="built_in">f64</span>, fac: <span class="built_in">f64</span>) -&gt; <span class="built_in">f64</span>  &#123;</span><br><span class="line">    <span class="keyword">let</span> price = val*fac;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The deal price is &#123;price&#125;"</span>);</span><br><span class="line">    price   <span class="comment">// return a expression as return value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> price = cal_price(<span class="number">21.5</span>, <span class="number">1.25</span>);</span><br></pre></td></tr></table></figure>

<p><strong>语句(statements)</strong>是执行一些操作但不返回值的指令</p>
<p><strong>表达式(Expressions)</strong>计算并产生一个值，<strong>表达式结尾没有分号</strong>。</p>
<h4 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h4><h5 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h5><p>if后跟一个条件，和其他语言类似，这个条件必须返回bool类型的值。if表达式可以给let赋值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">let</span> number = <span class="number">255</span>;</span><br><span class="line">   <span class="keyword">if</span> number &gt; <span class="number">255</span> &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">"greater than 255"</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> number == <span class="number">0</span> &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">"nonsense"</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">"less than 255 except 0"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 这种情况下的所有分支返回的数据类型必须相同，否则编译器无法确定num的类型</span></span><br><span class="line"><span class="comment">// 每一个分支中都是一个表达式，数字后面没有分号结束。</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">if</span> number &gt; <span class="number">50</span> &#123; <span class="number">100</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br></pre></td></tr></table></figure>

<h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><h6 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h6><p>无条件的循环执行，除非执行了break或程序中断。可以在loop循环的break语句中返回值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> counter &gt;= <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> counter * <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The last counter is &#123;result&#125;"</span>);</span><br></pre></td></tr></table></figure>

<h6 id="循环标签"><a href="#循环标签" class="headerlink" title="循环标签"></a>循环标签</h6><p>循环标签可以给一个循环指定一个名字，默认情况下break和continue作用于此时最内层的循环，使用标签可以让他们作用于指定的循环。标签使用<strong>‘</strong>单引号作为开始.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="symbol">'count_up</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"counter = &#123;counter&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> remain = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"remain = &#123;remain&#125;"</span>);</span><br><span class="line">        <span class="keyword">if</span> remain &lt; <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 只跳出remain的循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">'count_up</span>; <span class="comment">// 跳出外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        remain -= <span class="number">1</span>;</span><br><span class="line">    &#125;         </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The last counter is &#123;counter&#125;"</span>);</span><br></pre></td></tr></table></figure>

<h6 id="while"><a href="#while" class="headerlink" title="while"></a>while</h6><p>while和其他语言相同，条件为true执行循环</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> counter &lt; <span class="number">10</span> &#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"counter = &#123;counter&#125;"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="for"><a href="#for" class="headerlink" title="for"></a>for</h6><p>使用<code>for x in seq</code>的方式遍历数组</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> food = [<span class="string">"breakfast"</span>, <span class="string">"lunch"</span>, <span class="string">"supper"</span>];</span><br><span class="line"><span class="keyword">for</span> meal <span class="keyword">in</span> food &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Eat at &#123;meal&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">3</span>).rev() &#123; <span class="comment">// 左闭右开，rev()反转序列</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Eat time &#123;number&#125;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h5><h6 id="match表达式"><a href="#match表达式" class="headerlink" title="match表达式"></a>match表达式</h6><p>由多个分支组成，类似switch语句。每个分支包含一个模式和表达式，表达式以<code>,</code>结尾。</p>
<p>match的每个分支的表达式就是match的返回值，所以分支表达式的数据类型需要相兼容。</p>
<p>match必须用分支覆盖所有的情况，否则会编译错误，可以使用通配符匹配所有其他情况，这个通配符可以看作一个变量名，它匹配所有的其他相同类型的值，我们可以在这个分支的表达式中使用这个匹配变量，也可以使用<code>_</code>匹配任意值，但是我们不会引用它的值，可以看作是default。</p>
<p>模式的匹配是按编写顺序执行，所以不能把通配符分支放在前面，这样后面的分支无法被匹配。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> value &#123;</span><br><span class="line">	patten1 =&gt; expression1,</span><br><span class="line">	patten2 =&gt; expression2,</span><br><span class="line">	patten3 =&gt; expression3,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在匹配的分支中可以使用模式的部分值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Message</span></span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>&#125;,</span><br><span class="line">    Write(<span class="built_in">String</span>),</span><br><span class="line">    ChangeColor(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">handle_message</span></span>(msg: Message) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"match start"</span>);</span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">        Message::Quit =&gt; <span class="built_in">println!</span>(<span class="string">"Quit"</span>),</span><br><span class="line">        Message::Write(val) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"write &#123;&#125;"</span>, val);            </span><br><span class="line">        &#125;</span><br><span class="line">        Message::Move &#123; x, y &#125; =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"move pos &#123;&#125;,&#123;&#125;"</span>, x, y);            </span><br><span class="line">        &#125;</span><br><span class="line">        Message::ChangeColor(r, g, b) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"change color &#123;&#125;,&#123;&#125;,&#123;&#125;"</span>, r,g,b);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"match end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> move_msg = Message::Move &#123; x: <span class="number">15</span>, y: <span class="number">20</span> &#125;;</span><br><span class="line">handle_message(move_msg);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x: <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">        <span class="literal">Some</span>(i) =&gt; <span class="literal">Some</span>(i+<span class="number">1</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> roll = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">match</span> roll &#123;</span><br><span class="line">    <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">"luck num:&#123;roll&#125;"</span>),</span><br><span class="line">    <span class="number">10</span> =&gt; <span class="built_in">println!</span>(<span class="string">"bad num:&#123;roll&#125;"</span>),</span><br><span class="line">    left =&gt; <span class="built_in">println!</span>(<span class="string">"norm num:&#123;left&#125;"</span>),<span class="comment">// left是通配符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config_max = <span class="literal">Some</span>(<span class="number">3u8</span>);</span><br><span class="line"><span class="keyword">match</span> config_max &#123;</span><br><span class="line">    <span class="literal">Some</span>(max) =&gt; <span class="built_in">println!</span>(<span class="string">"The max is &#123;max&#125;"</span>),</span><br><span class="line">    _ =&gt; (), <span class="comment">// 匹配所有其他值，但是不需要引用，这样没有编译警告，写法简单</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="if-let表达式"><a href="#if-let表达式" class="headerlink" title="if let表达式"></a>if let表达式</h6><p>如果只关系一种匹配的情况，而忽略其他match的分支时，可以使用<code>if let</code>简化match的写法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> config_max = <span class="literal">Some</span>(<span class="number">3u8</span>);</span><br><span class="line"><span class="keyword">let</span> config_none: <span class="built_in">Option</span>&lt;<span class="built_in">u8</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(max) = config_max &#123; <span class="comment">// Some(max)等同于match中的模式</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The max is &#123;max&#125;"</span>); <span class="comment">// The max is 3</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"None is input"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>rust</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava for Android</title>
    <url>/2022/02/11/rxjava-android/</url>
    <content><![CDATA[<blockquote>
<p>RxJava for Android Developers – Timo Tuominen</p>
</blockquote>
<p>Rx是Reactive Extensions的缩写，即响应式编程Reactive Programming，是一种编程范式，通过使用数据流的方式来构建应用。RxJava是对Java的响应式编程的实现。</p>
<p>React是Facebook的一个UI库，与这里的响应式编程不是一个东西。</p>
<h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><p>函数式编程</p>
<p>数据流</p>
<p>Observable</p>
<p>Subscribe</p>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>RxJava</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark网络分析</title>
    <url>/2020/02/22/wireshark-basic/</url>
    <content><![CDATA[<h3 id="Wireshark基本使用"><a href="#Wireshark基本使用" class="headerlink" title="Wireshark基本使用"></a>Wireshark基本使用</h3><p>一个包称为帧更准确</p>
<p>主界面分为4个区域：Display Filter, Packet List, Packet Detail, Packet bytes</p>
<p><img src="/uploads/wireshark/wireshark.png" alt="wireshark"></p>
<h4 id="减小包的大小"><a href="#减小包的大小" class="headerlink" title="减小包的大小"></a>减小包的大小</h4><p>为了减小抓包的数据大小，可以对抓包进行设置</p>
<ol>
<li><p>只抓包头。一般能抓到包的大小为1514字节，启用了Jumbo Frame之后可达9000字节以上。大多数情况只需要IP或TCP的头就足够了，具体应用数据都是加密的，一般不需要。<code>Capture--&gt;Options</code>中设置<code>Limit each packet to</code>为80字节，这样TCP、网络层、数据链路层的信息都有了。如果还要看应用层的信息，可以适当调大到200字节</p>
<p>新版本的wireshark中可以在<code>Capture--&gt;Input</code>中的对应网络接口上设置Snaplen(B)的大小</p>
<p>使用Tcpdump抓eth0上的每个包的前80个字节，并把结果保存到tcpdump.cap文件中<code>tcpdump -i eth0 -s 80 -w /tmp/tcpdump.cap</code> </p>
</li>
<li><p>只抓必要的包。让wireshark在<strong>抓包时过滤</strong>掉不需要的包。在<code>Capture--&gt;Options--&gt;Input</code>的Capture Filter中输入过滤条件。例如只查看ip为192.168.43.101的包可以输入<code>host 192.168.43.1</code></p>
<p><code>tcpdump -i eth0 host 192.168.43.1 -w /tmp/tcpdump.cap</code></p>
<p>需要注意如果自己关注的包可能被过滤掉，例如NAT设备把关注的ip地址改掉了</p>
</li>
</ol>
<h4 id="显示过滤-Display-Filter"><a href="#显示过滤-Display-Filter" class="headerlink" title="显示过滤 Display Filter"></a>显示过滤 Display Filter</h4><p>显示过滤可以在主界面上直接输入过滤条件</p>
<ol>
<li><p>协议过滤 </p>
<p>已经定义好的协议直接输入协议名称即可。对与nfs挂载失败可以使用<code>portmap || mount</code>进行过滤</p>
</li>
<li><p>地址过滤</p>
<p><code>ip.addr == 192.168.1.104 &amp;&amp; tcp.port == 443</code></p>
<p>选择一个包后，可以右键选择follow，再选择一个这个包的协议，可以自动过滤出相关的包。</p>
</li>
<li><p>使用系统右键功能 </p>
<p>选择一个关注的数据包后，可以右键后，选择<code>Prepare as filter</code>,系统会自动提示当前提取的过滤条件，选择select之后，就会填入过滤条件输入框中。<code>Apply as filter</code>则是直接应用这个过滤</p>
<p>右键列表中还有其他的filter可以使用</p>
</li>
<li><p>对过滤后的包保存</p>
<p><code>File -&gt; Export Specified Packets</code>，在对话框中可以选择勾选当前显示的包</p>
</li>
</ol>
<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><ol>
<li><p>标记数据包，在每个关注的操作之前发一个指定数据长度的ping命令，这样知道这个操作的数据包的范围，只需要找到这些ping的特殊的ip地址和对应的数据段的大小，就把所有的数据包分割开了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.43.1 -n 1 -l 1</span><br><span class="line">操作1执行</span><br><span class="line">ping 192.168.43.1 -n 1 -l 2</span><br><span class="line">操作2执行</span><br><span class="line">ping 192.168.43.1 -n 1 -l 3</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol>
<li><p>设置时间格式</p>
<p>可以通过<code>View--&gt;Time display format-&gt;Date time of Day</code>把时间显示为当前系统的时间，而不出相对的时间</p>
<p>如果分析其他时区的包文件，需要把本机的时区改为和当地的时区一致，这样不用再去进行时区换算 </p>
</li>
<li><p>设置某种类型包的颜色</p>
<p>可以通过<code>View--&gt;Coloring Rules</code>设置每一种包的颜色，方便一下找到，例如默认的icmp的颜色为粉色</p>
</li>
<li><p>自动分析</p>
<p><code>Analyze-&gt;Expert Information</code>可以看连接建立、重传、reset的统计信息，分析网络性能和连接问题时有用</p>
<p><code>Statistics-&gt;Service Response Time</code>可以查看某种协议的响应时间，检测服务器性能时有用</p>
<p><code>Statistics-&gt;TCP Stream Graphs</code>可以查看TCP数据传输统计，在<code>Time Sequence</code>中可以查看哪段时间sequence没有变化(水平直线)，说明没有数据传输</p>
</li>
<li><p>查找</p>
<p> <code>Ctrl+F</code>后可以在搜索条件中选项查找的范围，数据类型，关键字。例如要查找baidu相关的，数据类型选择string，输入baidu查找</p>
</li>
<li><p>其他</p>
</li>
</ol>
<h3 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h3><p>应用层：应用协议</p>
<p>传输层：TCP</p>
<p>网络层：IP</p>
<p>数据链路层：MAC</p>
<p>跨子网通信需要默认网关转发，因此需要先ARP查询默认网关的mac地址，如果一个ARP请求来自另一个子网，也会应答。</p>
<p>MTU：最大传输单元，大多数的网络MTU是1500字节，除非启用了巨帧(Jumbo Frame)达到9000字节。因此TCP不能一次把5000字节的数据之间给网络层传输，否则因为切分导致只能发送1500字节，会认为发送失败要求重传。</p>
<p>TCP建立连接进行三次握手时，双方会把自己的MSS(Max Segment Size)告诉对方，MSS加上TCP头和IP头的长度，就得到MTU的值。</p>
<p>TCP和IP头的长度都是20字节，客户端给服务端发送的MSS为1460，服务端应答的MSS为1400，因此通信的最小MTU为1400+20+20为1440</p>
<p><img src="/uploads/wireshark/mss.png" alt="mss"></p>
<p>实际数据传输中网络层的数据大小为1440字节</p>
<p><img src="/uploads/wireshark/mtulen.png" alt="mss"></p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP提供可靠有序的数据传输，因此每个数据都有序号，这样接收端可以对数据排序。</p>
<p><img src="/uploads/wireshark/tcpseq.png" alt="mss"></p>
<p>TCP中连接的双方各自维护自己的Seq和Ack编号，数据包中的Len的值不包括Tcp包头的长度</p>
<p>seq的规则：对于一个连接，<code>seq(n) = seq(n-1)+Len(n-1)</code>，即上次的seq+上次的Len。例如102发出的17号，seq为102发出的上一个包16号的seq 1 加上 Len 224 所以为225，而102发出的下一个20号包的seq为 17号的seq 225 + Len 1448 = 1673。这样可以知道102一共发送了多少数据，只需要看最后一次的seq+len</p>
<p>ack规则：收到对端的seq+Len。这样可以告诉对端自己一共收到了多少数据。例如18号包应答为16号的seq+16号的Len，即225，19号包应答为17号的seq+17号的Len，即1673，当收到19号包的时候已经<strong>累积</strong>收了1673字节的数据</p>
<ul>
<li>对收到的数据包按照seq进行排序，并比较相邻的seq和len就知道少了哪些包</li>
</ul>
<p>例如接收端抓包获取的seq 和len 分别为 </p>
<table>
<thead>
<tr>
<th>包号</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody><tr>
<td>seq</td>
<td>101</td>
<td>301</td>
<td>401</td>
</tr>
<tr>
<td>len</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
</tbody></table>
<p>对于第二个包的seq为301，而它的上一个包的seq+len为101+100=201，说明201这个包没有收到，需要回复ack:201通知对端把seq为201的包再发送一次</p>
<h4 id="TCP的标志"><a href="#TCP的标志" class="headerlink" title="TCP的标志"></a>TCP的标志</h4><p>SYN：发起连接请求，由于是双向连接，需要双方都发一次SYN</p>
<p>FIN：请求终止连接，也需要双方都发一次FIN</p>
<p>RST：重置一个连接，或拒绝一个无效请求，一般有这个标志都是有问题</p>
<p>ACK：确认是否有效</p>
<p>PSH： 接收端应用程序需要从TCP缓冲区把数据读走 </p>
<h4 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h4><p><img src="/uploads/wireshark/tcpall.png" alt="tcpall"></p>
<p>上面的抓包中，</p>
<ol>
<li><p>330号包客户端102发起连接<strong>SYN</strong>( Synchronize Sequence Numbers )，seq为0 (X)，客户端进入<strong>SYN_SEND</strong>状态</p>
</li>
<li><p>331号包服务器1向客户端发<strong>SYN</strong>，并对客户端应答<strong>ACK</strong>，应答ack=1 (X+1),自己的序号seq为0 (Y)，服务端进入<strong>SYN_RECV</strong>状态</p>
</li>
<li><p>332号包客户端102向服务端确认ACK，seq为1(X+1)，ack为1(Y+1)，客户端和服务端进入<strong>ESTABLISHED</strong>状态</p>
</li>
</ol>
<p>实际的seq并不是从0开始的，只是wireshark为了方便查看包序号，默认设置了一次连接的相对序号功能。这个功能默认是打开的，可以在<code>Edit-&gt;Preference-&gt;Protocol-&gt;TCP</code>勾选<code>Relative Sequence Number</code></p>
<p><img src="/uploads/wireshark/tcphandseq.png" alt="mss"></p>
<h5 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h5><ol>
<li>确认双方准备好，如果只有两次握手，服务端收到SYN之后，并给客户端发送SYN就认为连接建立了，但如果这次服务端发送的SYN失败了，它还是认为成功的，直接发送数据D给客户端，而客户端收到数据后，发现seq不匹配,认为连接没有建立，认为数据无效而丢掉数据D，服务端则会认为发送数据一直失败，不断重发数据D</li>
<li>明确对端的seq号，才能有序传输</li>
</ol>
<p>如果客户端发送了一次SYN服务端一直没有应答SYN，此时客户端又发了一次SYN给服务端，而现在服务给第二次应答后，客户端可以依据第二次的服务的应答给服务端应答，从而建立一次正确的连接。如果此时收到服务端应答的第一次SYN，客户端此时的X已经是第二次的X值了，所以判断是一个无效的SYN就可以拒绝服务端对第一次SYN的回复，从而避免错误的连接。</p>
<h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="/uploads/wireshark/tcpclose.png" alt="tcpclose"></p>
<p> <a href="http://www.tcpipguide.com/free/t_TCPConnectionTermination-2.htm" target="_blank" rel="noopener">http://www.tcpipguide.com/free/t_TCPConnectionTermination-2.htm</a> </p>
<p>抓包的例子中，是服务端主动发起端口连接，与上图不同</p>
<p><img src="/uploads/wireshark/tcpall.png" alt="tcpall"></p>
<ol>
<li><p>338号包服务端1发起终止连接<strong>FIN</strong>，seq为162+369=531 (X)，ack为对端的seq+len = 621服务端进入<strong>FIN_WAIT1</strong>状态</p>
</li>
<li><p>339号包客户端102向服务端应答<strong>ACK</strong>，告诉对端收到了结束连接的请求，应答ack=532 (X+1),自己的序号seq为334号包的Seq+Len= 621(Y)，其实也等于服务端应答的ack的值，客户端进入<strong>CLOSE WAIT</strong>状态，之所以这里没有发<strong>FIN</strong>是因为此时102可能还有数据给1要发，要等数据发完之后，才能发<strong>FIN</strong>给1。而服务端收到<strong>ACK</strong>后进入<strong>FIN_WAIT2</strong>状态</p>
</li>
<li><p>340号包客户端现在没有要发的数据了，此时给服务端1发送FIN和ACK，这里由于没有数据交互了seq和ack的值没有变化(如果中间102还有给1发过数据，那么这次的seq根据上一个包的seq按照seq的计算规则计算)，客户端进入<strong>LAST ACK</strong>状态</p>
</li>
<li><p>341号包服务端1收到客户端102的<strong>FIN</strong>之后，说明数据发送完了，可以断开了进入<strong>TIME WAIT</strong>状态，并给对端应答ACK，seq=X+1 = 532, ack = 对端FIN的seq+1 = 621+1 = 622</p>
</li>
<li><p>客户端102收到<strong>ACK</strong>后，最终进入<strong>CLOSED</strong>状态</p>
</li>
<li><p>服务端1在等待2倍<strong>MSL</strong>( 一个片段在网络中最大的存活时间 )时间后，才进入<strong>CLOSED</strong>状态</p>
</li>
</ol>
<h5 id="计算规则"><a href="#计算规则" class="headerlink" title="计算规则"></a>计算规则</h5><ul>
<li><p>对<strong>FIN</strong>的应答<strong>ACK</strong>的ack的值为对端的<strong>FIN</strong>请求的seq+1，即339和341的ack为发送FIN的338和340的seq+1</p>
</li>
<li><p>一次FIN占用1个seq号，因此发送了一次FIN之后，下一包的seq为X+1，即341的seq为338的seq+1</p>
</li>
</ul>
<h5 id="为什么断开连接要四次"><a href="#为什么断开连接要四次" class="headerlink" title="为什么断开连接要四次"></a>为什么断开连接要四次</h5><p>在断开连接的发起端发送FIN后，接收端可能还有数据要发送，因此接收端需要先把FIN应答一下，等自己的数据发送完，再给对端发送一个FIN，标识现在可以断开了。因此当一端发送断开连接请求后，没有接收完的数据还是会接收完才会真正断开</p>
<h5 id="为什么要等2MSL"><a href="#为什么要等2MSL" class="headerlink" title="为什么要等2MSL"></a>为什么要等2MSL</h5><p>最后一个ACK发出后，对端可能没有收到，从而可能还会发FIN过来，如果直接断开，就不会应答，导致对端一直重复发FIN过来。而2MSL是一个发送和应答的时间，如果等了这么久没有消息，说明对端收到了ACK，就可以断开了。</p>
<h4 id="TCP窗口"><a href="#TCP窗口" class="headerlink" title="TCP窗口"></a>TCP窗口</h4><p>一发一答的机制保障数据的可靠性，但是每次一个包的发送，等待应答效率就很低。发送数据时，如果有1000字节的数据，而每个包只能发100个字节，如果1s发送一次数据，每次发送完等待收到应答后，再发送下一个数据，需要发送10s才能发送完所有数据。这样效率太低了，可以不用等上次的应答，直接发送下一个包的数据，例如接收端告诉发送端1s可以处理200个字节，这样发送端1s就发送两个包，这样5s就发完所有数据。而那个200就是接收窗口大小。</p>
<p>一个数据包中的<code>win=8192</code>标识的发送方的接收窗口的大小，这样对端发送数据的时候知道当前可以一次发送多少数据。如果接收时的处理速度跟不上接收数据的速度，缓存就会被占满，最终导致接收窗口的大小为0.</p>
<p>发送窗口由接收窗口和网络因素共同决定大小。发送窗口决定一下子可以最多发送多少字节，MSS是每个包的最大长度</p>
<p>在一个窗口中发出的n个包，不一定就必须对应n个确认包。TCP可以累积起来确认，收到多个包时，可以只确认最后一个。</p>
<p>TCP Window Scale:是为了解决最大窗口数的扩展，TCP头中只有16bit作为窗口大小，因此窗口的大小为65535字节，而技术进步后，这个值太小了，因此又在option中增加了Window Scale，它是2的指数倍。例如窗口大小为128，而window scale是3，则最终的窗口大小为<code>128*(2**3)=128*8=1024</code></p>
<h4 id="网络拥塞"><a href="#网络拥塞" class="headerlink" title="网络拥塞"></a>网络拥塞</h4><p>一次性发送太多数据，就会导致接收端处理不过来，拥塞导致丢包，能导致网络拥塞的数据量称为拥塞点。拥塞情况和数据通过的节点、当时的网络状态相关，因此是动态变化的。</p>
<p>为什么一般很少出现拥塞点？</p>
<ul>
<li>windows默认的TCP窗口为64KB，而网络已经进步了这么多，所以不会在窗口范围拥塞</li>
<li>大多场景都是小数据传输如网络聊天</li>
<li>数据同步传输，就会发一次等一次</li>
<li>网络性能提升，出现后很快恢复不易发现</li>
</ul>
<h6 id="拥塞窗口"><a href="#拥塞窗口" class="headerlink" title="拥塞窗口"></a>拥塞窗口</h6><p>由于无法准确定位拥塞点的大小，发送方只能维护一个虚拟的拥塞窗口，并尽量让它接近真实的拥塞点。网络对发送窗口的限制，通过拥塞窗口实现。</p>
<ol>
<li>连接刚建立时，初始拥塞窗口设置为2、3或4个MSS大小</li>
<li>如果发出去的包都收到确认，说明可以增大窗口，每收到n个确认，就把窗口增加n个MSS。比如发了2个后收到两个确认，窗口就增大到2+2个，当发了4个都收到时，就增加到4+4个，以2的指数增加。这个过程为<strong>慢启动</strong></li>
<li>增加到一定值后，增加的量要小点，不能翻倍的增加了，每个往返时间增加了1个MSS，例如发了16个包，全部被确认了，拥塞窗口就增加到17个MSS，一次增加1个。这个过程为<strong>拥塞避免</strong>。慢启动到拥塞避免的过度点为<strong>临界窗口值</strong>。</li>
</ol>
<h6 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h6><p>发送方发出的数据收不到对应的确认包应答，发送方等待一段时间后，认为包丢失，重新发送一次。从发出原始包到重传这个包的这段时间成为RTO。</p>
<p>发生重传之后，RFC建议重新调整拥塞窗口为1MSS，然后进入慢启动过程。</p>
<p>超时重传性能影响：</p>
<ol>
<li>RTO阶段不能发数据，浪费了时间</li>
<li>拥塞窗口需要从1MSS重新调整一遍</li>
</ol>
<h6 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h6><p>发送数据过程中只有中间的几个包丢失，接收端发现后续的包的seq比预期的大，就会每收一个包，就ack一次期望的seq号，用来提醒发送方重传，当发送方收到<strong>3个</strong>或以上的重复确认<strong>Dup Ack</strong>，就认为对应的包丢了，立即重传那个包。用3个来判断是为了避免由于包到达接收端的顺序有差异，导致错误的触发重传。</p>
<p>当在拥塞避免阶段发生快速重传时，RFC 5681认为临界窗口应设置为发送拥塞时还没有被确认的数据量的1/2(但不能小于2个MSS)。然后将拥塞窗口设置为临界窗口的值+3个MSS，继续保持在拥塞避免阶段。而不用向超时重传那样从1个MSS重来一遍。</p>
<p>当发送端有多个包丢掉时，重发的策略有多种：</p>
<ol>
<li>从第一个丢包号开始之后的所有包都重新发一遍</li>
<li>接收方收到重传的第一个包后，回复丢的第二个包的序号，发送方根据ack重传，依次把所有丢的包重传完。这个称为NewReno，由RFC 2582和3782定义</li>
<li>接收方通知发送端自己已经收到的包号，同时告诉发送端第一个丢失的包号，发送端根据已经收到和第一个没有收到的包号，把所有没有收到的重发一遍。这种称为Sack方案 RFC2018中定义.Sack中的seq区间为收到的包</li>
</ol>
<p><img src="/uploads/wireshark/tcpsack.png" alt="tcpsack"></p>
<h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><ul>
<li>没有拥塞时，窗口越大，性能越好，可以尽量的增加接收窗口</li>
<li>经常发生拥塞，通过限制接收窗口，可间接限制发送窗口，从而减少重传导致的性能损失</li>
<li>尽量避免超时重传</li>
<li>快速重传影响小，几乎没有等到时间，拥塞窗口减小幅度小</li>
<li>SACK和NewReno都可以提高重传效率</li>
<li>丢包对小文件的影响比大文件严重，小文件可能等不到3个dup ack（总的数据量都没有3个包），所以无法触发快速重传，只能超时重传</li>
</ul>
<h6 id="Westwood算法"><a href="#Westwood算法" class="headerlink" title="Westwood算法"></a>Westwood算法</h6><p>根据接收端应答的ack计算拥塞窗口的大小，收到的确认越多，窗口越大</p>
<h6 id="Vegas算法"><a href="#Vegas算法" class="headerlink" title="Vegas算法"></a>Vegas算法</h6><p>根据网络的RTT（往返时间）来决定拥塞窗口，当RTT稳定时，增大拥塞窗口，RTT变大，网络繁忙时主动减小拥塞窗口。</p>
<h6 id="Compound算法"><a href="#Compound算法" class="headerlink" title="Compound算法"></a>Compound算法</h6><p>windows中使用两个拥塞窗口，一个用Westwood算法，一个用Vegas算法，真正的拥塞窗口为两者之和。</p>
<p>windows可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface tcp show global  # 查看当前的状态,默认为none，即关闭</span><br><span class="line">netsh interface tcp set global congestionprovider=ctcp # 使用compound</span><br><span class="line">netsh interface tcp set global congestionprovider=none # 关闭为none</span><br></pre></td></tr></table></figure>

<p><img src="/uploads/wireshark/compound.png" alt="compound"></p>
<h5 id="延迟确认"><a href="#延迟确认" class="headerlink" title="延迟确认"></a>延迟确认</h5><p>TCP处理交互式场景时，例如远程登录的SSH终端，输入字符，收到一个包之后暂时没有数据要发送给对方，就延迟一段时间再应答确认windows上为200ms。如果在这段时间里有数据发送，把确认包和这个数据在一个包中发回去。这样减轻网络负担。</p>
<h6 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h6><p>在发出去的数据还没有确认之前，又有小数据生成，就把小数据收集起来，凑满一个MSS或等收到确认后再发送。相当于把以后要发送的数据聚集起来一起发。</p>
<h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>Network File System 由SUN设计，用来将网络上的目录挂载到客户端，对于客户端，就像是访问本地磁盘</p>
<p>RFC1813中有详细介绍</p>
<p>NFS对客户端的访问控制是通过IP绑定的，创建共享目录时，可以设置每一个ip的权限</p>
<p>客户端在共享目录中创建文件时可能会用UID作为文件所有者的标识，而不是用户名，而这个UID在别的客户端可能被映射为其他用户，不同的Linux系统客户端用户UID可能是相同的。可以通过抓包查看网络中实际创建的用户信息，在TCP上一层的RPC协议中</p>
<p>portmap进程维护一张进程与端口映射表，他自己的端口号是111，默认值</p>
<h5 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h5><ol>
<li>客户端通过服务器的portmap进程请求服务端NFS的端口，服务端应答端口号</li>
<li>客户端按端口请求连接NFS进程，服务端应答</li>
<li>客户端请求mount的端口，服务器应答端口号</li>
<li>客户端按返回端口尝试连接服务端mount进程，服务器应答</li>
<li>客户端请求挂载/xxx目录，服务端应答file handler给客户端，以便客户端访问文件</li>
</ol>
<p>客户端访问服务端的文件时，服务端通过文件名先找到file handler来进行后续操作，如果目录中文件过多，获取file handler非常耗时</p>
<p>mount时可以设置每次读的数据大小为512KB</p>
<p><code>mount -o rsize=524288 192.168.1.101:/tmp/share</code></p>
<p>默认写数据是异步的async WRITE Call，服务器在真正存盘之前就会应答WRITE Reply从而提高性能，只有COMMIT之后的数据才认为是写成功的。写操作中有<code>UNSTABLE</code>标志。</p>
<p>写操作中<code>FILE_SYNC</code>表示当前为同步sync写，同步写是一写一答，所以不需要COMMIT操作。一些客户端无论设置<code>wsize</code>为多少，每次写的数据都为4KB。</p>
<p>mount时使用<code>noac</code>选项表示让客户端不缓存文件属性，但是会把写操作设置为sync方式，导致效率降低</p>
<h5 id="查问题"><a href="#查问题" class="headerlink" title="查问题"></a>查问题</h5><p>如果有问题，可以先用rpcinfo命令获取服务器上的端口列表，再用telnet命令逐个试探进程能否连上</p>
<p><code>rpcinfo -p 192.168.1.101 | egrep &quot;portmapper|mountd|nfs&quot;</code></p>
<p><code>telnet 192.168.1.101 111</code>查看portmap的111端口能否连接上</p>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ul>
<li>使用nslookup默认的UDP查询域名</li>
</ul>
<p><img src="/uploads/wireshark/dnscmd.png" alt="mss"></p>
<p>对应抓包为</p>
<p><img src="/uploads/wireshark/dnsudp.png" alt="mss"></p>
<p>网络环境为两级路由器，主路由器地址为192.168.0.x，次级路由器的ip地址为192.168.1.x，本机ip为192.168.1.102，连接在次级路由器上</p>
<p>由于没有指定服务器的地址，所以会到主路由器上查询，可以看到DNS的传输层为UDP协议</p>
<ul>
<li>使用TCP的DNS</li>
</ul>
<p><img src="/uploads/wireshark/dnscmdtcp.png" alt="dnscmdtcp"></p>
<p>指定<code>-vc</code>选项使用TCP协议，并通过<code>114.114.114.114</code>进行查询</p>
<p>对应抓包为</p>
<p><img src="/uploads/wireshark/dnstcp.png" alt="dnstcp"></p>
<p>其中215-217是TCP握手过程，220-221对应于查询和应答，223/225为断开连接</p>
<ul>
<li><p>A记录 通过域名找到对应的IP地址</p>
</li>
<li><p>PTR记录 从IP解析到域名 <code>nslookup xx.xx.xx.xx</code>可以找到域中的ip对应的名称</p>
</li>
<li><p>SRV记录  指向域内的资源 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> tpye=SRV</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">_ldap._tcp.dc._msdcs.xxx.com  <span class="comment">#其中xxx.com为域名</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CNAME记录 别名。即让二级域名指向另一个域名，这样当IP改变只需要改指向的那个www的域名对应的ip，别名指向的是www的域名，不用更改。</p>
</li>
</ul>
<h5 id="域名查询方式"><a href="#域名查询方式" class="headerlink" title="域名查询方式"></a>域名查询方式</h5><ul>
<li>递归查询： 从A找到B，B再找C，C再找D，再原路径把D返回给A</li>
<li>迭代查询：A依次把B、C、D问一遍，最后找到D</li>
</ul>
<h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>DNS支持循环工作模式(round-robin)。一个网站有10服务器，对应10个IP，每次服务器返回的是其中一个ip，每次查询都按一定的规则切换ip，达到服务器资源的充分利用。</p>
<h5 id="引入问题"><a href="#引入问题" class="headerlink" title="引入问题"></a>引入问题</h5><ul>
<li>名字相近的假域名</li>
<li>DNS服务器地址被恶意修改为假的ip地址</li>
<li>DNS服务器被攻击</li>
<li>DNS攻击</li>
</ul>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>udp的包头一共8个字节，数据量比TCP小，同时不需要建立连接过程</p>
<ul>
<li>UDP发送的数据大小直接在网络层分割，接收方收到后组装，这个过程会降低性能</li>
<li>UDP没有重传机制，丢包由应用层协议处理。如果某个操作过程中，一个包丢失，需要把所有的包全部重传一遍。而TCP只需要重传丢的那个包</li>
<li>接收端收到的包中如果有<code>More Fragments</code>标记说明还有分片的包，如果连续给接收端发这种包，接收端一直收而且无法组装这些分片导致内存耗尽。</li>
</ul>
<h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><p> <a href="https://wiki.wireshark.org/TLS" target="_blank" rel="noopener">https://wiki.wireshark.org/TLS</a> </p>
<p>在页面的Example capture file章节有一个TLS的例子可以下载</p>
<p>  <a href="https://wiki.wireshark.org/SampleCaptures#SSL_with_decryption_keys" target="_blank" rel="noopener">SampleCaptures#SSL_with_decryption_keys</a> 下载 <strong><a href="https://wiki.wireshark.org/SampleCaptures?action=AttachFile&do=get&target=snakeoil2_070531.tgz" target="_blank" rel="noopener">snakeoil2_070531.tgz</a></strong> 这个文件</p>
<ol>
<li><p>使用wireshark打开其中的cap文件，可以看到443端口的通信</p>
</li>
<li><p>第19个包的info显示为Application Data，在包详细信息中显示数据是加密数据</p>
</li>
<li><p>选择要解密的包，右键<code>Protocol Preference-&gt;Open Transport Layer Security Preferences</code>打开RSA key list，编辑加入新的一条解码信息 ip 127.0.0.1, port 443, protocol http, key file选择下载的key文件</p>
<p>也可以在<code>Edit-&gt;Prefernces-&gt;Protocol-&gt;TLS</code>中编辑</p>
<p><img src="/uploads/wireshark/tls.png" alt="tls"></p>
</li>
<li><p>此时19号包显示为HTTP协议，里面的原始数据可以看到</p>
</li>
</ol>
<h3 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h3><p>Kerberos是一种身份认证协议，Windows的域中身份认证用到</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ul>
<li><code>telnet &lt;ip&gt; &lt;port&gt;</code> 测试与主机一个端口是否可以连通，如果可以连通，考虑是否因为对端主动拒绝</li>
</ul>
<p>*　把两个通信的设备连接到简单的网络环境中，排除网络问题</p>
<ul>
<li><p>NIC teaming和Large Segment Offload(LSO)可能导致乱序</p>
</li>
<li><p>一般存储设备都是读比写快；对于网络环境，服务端的带宽大，客户端的带宽小。读文件时，大带宽进入小带宽可能导致性能问题</p>
</li>
<li><p>查看实际重传的网络包，分析如果是连续的包都进行了重传，可以考虑打开SACK模式，减少重传包的量</p>
</li>
<li><p>梳理问题的工作原理流程，缩小问题出现在流程中的范围，从而缩小问题范围，模拟问题环境进行复现和解决</p>
</li>
</ul>
<h3 id="tshark"><a href="#tshark" class="headerlink" title="tshark"></a>tshark</h3><p>终端上的wireshark版本，Windows安装目录默认有,还有capinfos/editcap。终端处理的数据方便进行导出，生成想要的报表</p>
<p>常用的命令或操作整理为脚本，提高效率</p>
<ul>
<li><p><code>capinfos.exe xx.pcap</code>查看一个包的统计信息</p>
</li>
<li><p><code>tshark -n -q -r xxx.pcap -z &quot;rpc,programs&quot;</code>重看NFS协议的服务响应时间</p>
</li>
<li><p><code>tshark -n -q -r xxx.pcap -z &quot;io.stat.0.tcp.analysis.retransmission&quot;</code> 重传统计数据</p>
</li>
<li><p><code>tshark -n -q -r xxx.pcap -z &quot;io.stat.0.tcp.analysis.out_of_order&quot;</code>乱序统计数据</p>
</li>
<li><p><code>tshark -n -q -r xxx.pcap -z &quot;conv,tcp&quot;</code>一个cap文件中所有tcp协议的会话</p>
</li>
<li><p><code>editcap input.cap output.cap -i &lt;second&gt;</code>把包input拆分为second秒长的一个个包文件</p>
</li>
<li><p><code>editcap input.cap output.cap -c &lt;packets per file&gt;</code>把包input拆分为xxx个packets一个的包文件</p>
</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Wireshark网络分析就是这么简单</li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>Xbox Tips</title>
    <url>/2022/07/11/xbox-tips/</url>
    <content><![CDATA[<h2 id="Xbox"><a href="#Xbox" class="headerlink" title="Xbox"></a>Xbox</h2><h3 id="Xbox-Proxy"><a href="#Xbox-Proxy" class="headerlink" title="Xbox Proxy"></a>Xbox Proxy</h3><p>xbox的Rewards需要美区IP才能激活，同时部分游戏也需要加速器才能正常联机使用，自己实际使用的时间不多，也没必要购买各种加速器。由于Xbox不支持设置代理功能，因此如果没有刷机的路由器或加速盒子，就只能开一个电脑进行转发。在网上搜了一下找到一个开源项目</p>
<h4 id="pcap2socks"><a href="#pcap2socks" class="headerlink" title="pcap2socks"></a><strong>pcap2socks</strong></h4><p><a href="https://github.com/zhxie/pcap2socks" target="_blank" rel="noopener">https://github.com/zhxie/pcap2socks</a></p>
<p>它还有个前端UI界面工程，<a href="https://github.com/zhxie/pcap2socks-gui" target="_blank" rel="noopener">pcap2socks GUI</a> 实际上使用命令行已经足够了。</p>
<h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ol>
<li>开启自己的Clash软件，设置全局加速</li>
<li>下载<code>pcap2socks.exe</code>，把它放在一个英文目录中</li>
<li>在目录中新建一个bat脚本<code>proxy_xbox.bat</code>，内容为<code>pcap2socks -s 172.2.2.2 -p 172.2.2.1 -d 127.0.0.1:7890 -i &quot;\Device\NPF_{6DADC48E-B6C8-4920-9B93-3BBCF597A8D5}&quot;</code></li>
<li>运行批处理后，会提示当前代理的IP地址，网关和掩码，并等待连接<code>Proxy 172.2.2.2/32 to 127.0.0.1:7890</code></li>
<li>在xbox的网络设置中，进阶设置中，设置有线网的IP地址为手动，将代理的IP<code>172.2.2.2</code>，掩码<code>255.255.255.0</code>以及网关<code>172.2.2.1</code>输入设置，DNS设置一个自己路由器的默认网关例如<code>192.168.68.1</code>和一个备用DNS地址<code>8.8.8.8</code></li>
<li>如果Clash代理没有问题的话，Xbox就可以使用代理进行连接了</li>
</ol>
<h5 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h5><p><code>pcap2socks -s &lt;需要代理的设备的 IP 地址&gt; -p &lt;需要代理的设备上所填写的网关&gt; -d &lt;SOCKS 代理，如 127.0.0.1:1080&gt; -i &lt;网卡名称&gt;</code></p>
<p>其中如果电脑有多个网卡，需要指定网卡，如果不设置<code>-i</code>参数，会提示<code>error: Cannot determine the interface. Available interfaces are listed below</code>，可以从程序输出的列表中查看自己是哪个网卡的ip地址和xbox的在同一个局域网中，使用那个网卡的名称作为参数。例如我本机的输出中最后一个无线网卡和xbox在同一个局域网，所以配置的网卡参数为<code>&quot;\Device\NPF_{6DADC48E-B6C8-4920-9B93-3BBCF597A8D5}&quot;</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">D:\network\pcap2socks<span class="literal">-v0</span>.<span class="number">6.2</span><span class="literal">-windows</span><span class="literal">-amd64</span>&gt;pcap2socks <span class="literal">-s</span> <span class="number">172.2</span>.<span class="number">2.2</span> <span class="literal">-p</span> <span class="number">172.2</span>.<span class="number">2.1</span></span><br><span class="line"><span class="literal">-d</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line">Interface <span class="string">'&#123;7667A9BA-BB55-4645-B68B-771977DC791E&#125;'</span> has an unexpected address len</span><br><span class="line">gth: <span class="number">8</span></span><br><span class="line">Interface <span class="string">'&#123;EF09116C-B70F-479F-96B5-985556028D0F&#125;'</span> has an unexpected address len</span><br><span class="line">gth: <span class="number">8</span></span><br><span class="line">error: Cannot determine the interface. Available interfaces are listed below, an</span><br><span class="line">d please use <span class="literal">-i</span> &lt;INTERFACE&gt; to designate:</span><br><span class="line">Interface <span class="string">'&#123;7667A9BA-BB55-4645-B68B-771977DC791E&#125;'</span> has an unexpected address len</span><br><span class="line">gth: <span class="number">8</span></span><br><span class="line">Interface <span class="string">'&#123;EF09116C-B70F-479F-96B5-985556028D0F&#125;'</span> has an unexpected address len</span><br><span class="line">gth: <span class="number">8</span></span><br><span class="line">    \Device\NPF_&#123;<span class="number">04</span>D21285<span class="literal">-A380</span><span class="literal">-4EE3</span><span class="literal">-BA6F</span><span class="literal">-BA624E1AE318</span>&#125; (VirtualBox Host<span class="literal">-Only</span> Eth</span><br><span class="line">ernet Adapter) [<span class="number">0</span><span class="type">a</span>:<span class="number">00</span>:<span class="number">37</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">28</span>]: <span class="number">192.168</span>.<span class="number">56.1</span></span><br><span class="line">    \Device\NPF_&#123;<span class="number">6</span>DADC48E<span class="literal">-B6C8</span><span class="literal">-4920</span><span class="literal">-9B93</span><span class="literal">-3BBCF597A8D5</span>&#125; (Atheros AR9285 Wireless</span><br><span class="line">Network Adapter) [<span class="number">6</span><span class="type">c</span>:<span class="type">fd</span>:<span class="type">b7</span>:<span class="number">33</span>:<span class="number">78</span>:<span class="type">ad</span>]: <span class="number">10.1</span>.<span class="number">1.151</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>game</tag>
        <tag>xbox</tag>
      </tags>
  </entry>
</search>
